<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>智伤帝的个人博客</title>
  
  <subtitle>岁月不饶人，我亦未曾饶过岁月。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.l0v0.com/"/>
  <updated>2022-12-14T02:54:16.794Z</updated>
  <id>https://blog.l0v0.com/</id>
  
  <author>
    <name>智伤帝</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maya 拍屏方案汇总</title>
    <link href="https://blog.l0v0.com/posts/ffec6f64.html"/>
    <id>https://blog.l0v0.com/posts/ffec6f64.html</id>
    <published>2022-11-28T13:30:46.000Z</published>
    <updated>2022-12-14T02:54:16.794Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;最近接到了一个需求，又是熟悉的 拍屏工具。<br>&emsp;&emsp;其实老早之前我就有写过类似的需求，只是表现形式各不相同。<br>&emsp;&emsp;这里打算将不同的拍屏方案汇总到一起，这样大家可以挑选一个合适的情景的方式完成这个任务。</p></blockquote><h2 id="拍屏方案汇总"><a href="#拍屏方案汇总" class="headerlink" title="拍屏方案汇总"></a>拍屏方案汇总</h2><p><a href="./404240a4.html">Maya Python Publish 检查功能开发</a></p><blockquote><p>&emsp;&emsp;最早在华强实习的时候，就写过将 Arnold 渲染的界面合成并打开 RV 进行预览。<br>&emsp;&emsp;背后主要用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/renderWindowEditor.html">renderWindowEditor</a> 命令导出。</p></blockquote><hr><p><a href="https://github.com/FXTD-ODYSSEY/MayaViewportCapture">https://github.com/FXTD-ODYSSEY/MayaViewportCapture</a></p><blockquote><p>&emsp;&emsp;后来进入腾讯前，我写了 Maya Viewport Capture 工具。<br>&emsp;&emsp;那个时候写的比较粗糙，我通过 UI 可以定义几个相机的位置，然后规定进行拍屏。<br>&emsp;&emsp;当时研究用 Maya 或者 Qt 的 API 将 Viewport 的画面截取下来。<br>&emsp;&emsp;背后主要用 Maya API <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m3d_view_html">M3dView</a>  的 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m3d_view_html#a02ea5cc758421097ddafe883c64e30ee">readColorBuffer</a><br>&emsp;&emsp;Qt 部分其实也是在拿到 Maya 的 MImage 之后转成 QImage 而已。</p></blockquote><hr><p><a href="./c45d9aff.html">Maya Python 模型拍屏合并工具</a></p><blockquote><p>&emsp;&emsp;后来正式工作之后，发现前辈用的是 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/ogsRender.html">ogsRender</a> 命令将 Maya Hardware 2.0 输出来。<br>&emsp;&emsp;相较于 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/renderWindowEditor.html">renderWindowEditor</a> 命令不需要打开渲染窗口。</p></blockquote><hr><p><a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/playblast.html">playblast</a></p><blockquote><p>&emsp;&emsp;实现拍屏有太多的方案，当然最为基础的方法就是使用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/playblast.html">playblast</a> 命令。<br>&emsp;&emsp;建议安装上 QuickTime 这样可以极大压缩 Maya 拍屏的文件大小，同时提升 Maya 拍屏的质量。<br>&emsp;&emsp;<a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/playblast.html">playblast</a> 命令既可以直接生成视频也可以拍屏序列帧。</p></blockquote><h2 id="拍屏需求汇总"><a href="#拍屏需求汇总" class="headerlink" title="拍屏需求汇总"></a>拍屏需求汇总</h2><blockquote><p>&emsp;&emsp;上面提供四种拍屏方案，最常用的时 playblast 方案，因为可以直接输出视频。<br>&emsp;&emsp;如果是图片序列还需要借助 <a href="https://ffmpeg.org/">ffmpeg</a> 等命令行工具将图片序列合成为视频。</p></blockquote><blockquote><p>&emsp;&emsp;拍屏的需求千变万化，但是有一些点其实大差不差。</p><ol><li>拍屏信息</li><li>镜头角度</li></ol></blockquote><blockquote><p>&emsp;&emsp;比较常见的信息有 时间，影片的归属名字(比如动画的某一段)，影片负责人 等等。<br>&emsp;&emsp;添加这些信息可以用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/headsUpMessage.html">headsUpMessage</a> 将相关信息叠加到 Viewport 上。<br>&emsp;&emsp;但是 headsUpMessage 非常难用，而且字体大小等各种非常不方便自定义。<br>&emsp;&emsp;要解决这个问题可以用  插件，它通过 OpenMaya API 扩展了 headsUpMessage 的功能。<br>&emsp;&emsp;作者是 <a href="https://zurbrigg.com/">zurbrigg</a> ，只可惜它之前免费的工具现在变成付费了。<br>&emsp;&emsp;<a href="http://mstools.work/">劲爆羊工具盒</a> 里面有拍屏王，它就是通过 ZShotmask VP2 插件，将各种信息贴到屏幕上。<br>&emsp;&emsp;具体可以在 <code>劲爆羊工具盒</code> 里面找到脚本 <code>resource\tools\MSTools\MST_DATA\plug-ins\zshotmask.py</code><br>&emsp;&emsp;当然它是一个 Maya Python 插件，注册之后提供了一个节点，只要设置节点的属性就可以了。</p></blockquote><hr><blockquote><p>&emsp;&emsp;这个方式可以结合 playblast 解决大部分拍屏的问题。<br>&emsp;&emsp;但有些情况并不能很好解决，比如我遇到的问题就是，每一帧都要重新矫正一下镜头的位置。<br>&emsp;&emsp;而且这个矫正还不能单纯使用约束，需要每一帧单独进行计算。<br>&emsp;&emsp;所以我只能改用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/ogsRender.html">ogsRender</a> 的方式，在后台进行拍屏。</p></blockquote><h2 id="Maya-ogsRender-输出序列帧"><a href="#Maya-ogsRender-输出序列帧" class="headerlink" title="Maya ogsRender 输出序列帧"></a>Maya ogsRender 输出序列帧</h2><blockquote><p>&emsp;&emsp;使用 <code>ogsRender</code> 输出序列帧只能输出到默认工程 images 文件夹的路径。<br>&emsp;&emsp;因此要控制 <code>ogsRender</code> 输出的位置只能通过修改工程位置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_workspace_images</span>(<span class="params">folder</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Change maya project images folder temporarily.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        folder (str): Image folder path.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    workspace_settings = pm.workspace(q=<span class="number">1</span>, fr=<span class="number">1</span>)</span><br><span class="line">    image_index = workspace_settings.index(<span class="string">&quot;images&quot;</span>)</span><br><span class="line">    original_image_folder = workspace_settings[image_index + <span class="number">1</span>]</span><br><span class="line">    pm.workspace(fr=[<span class="string">&quot;images&quot;</span>, folder])</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    pm.workspace(fr=[<span class="string">&quot;images&quot;</span>, original_image_folder])</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;我写了一个函数，可以修改输出位置，在修改回去。<br>&emsp;&emsp;这样我可以输出到任意路径。</p></blockquote><h2 id="Python-ThreadPool-多线程后处理"><a href="#Python-ThreadPool-多线程后处理" class="headerlink" title="Python ThreadPool 多线程后处理"></a>Python ThreadPool 多线程后处理</h2><blockquote><p>&emsp;&emsp;上面拍屏生成的图片，可以放到 <a href="https://imagemagick.org/">imagemagick</a> 进行图片后处理。<br>&emsp;&emsp;imagemagick 是 maya 自带的命令行图形处理库。<br>&emsp;&emsp;在 Maya 2022 之前叫做 <code>imconvert.exe</code>， 2022 之后叫做 <code>magick.exe</code></p></blockquote><blockquote><p>&emsp;&emsp;之前也研究过通过 imagemagick 处理图片，真的是拳打  <a href="https://python-pillow.org/">Pillow</a>  脚踢 <a href="https://doc.qt.io/qtforpython/PySide6/QtGui/QImage.html?highlight=qimage">QImage</a> </p></blockquote><p><a href="./852e1bef.html">ImageMagick 图像处理介绍</a></p><blockquote><p>&emsp;&emsp;<a href="https://github.com/ImageMagick/ImageMagick">imagemagick</a> 用 C 和 C++ 编写的，非常小巧，而且运行速度很快~<br>&emsp;&emsp;这里我没有使用 ZShotmask VP2 直接拍屏输出我要的信息，因为有些信息想要通过 imagemagick 叠加到图片上。<br>&emsp;&emsp;于是我想到可以利用 Pool 线程池的方式多线程后台调用命令行。</p></blockquote><blockquote><p>&emsp;&emsp;其中 <code>from multiprocessing.dummy import Pool</code> 可以导入 Python 隐藏的线程池。<br>&emsp;&emsp;这个用起来比起使用 <code>threading</code> 库要简单方便很多。<br>注: <code>from multiprocessing import Pool</code> 导入进程池， Maya 不太支持这个。<br>&emsp;&emsp;下面来个实例演示一下多线程调度后处理函数的好处。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_time</span>(<span class="params">func=<span class="literal">None</span>, msg=<span class="string">&quot;elapsed time:&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> func:</span><br><span class="line">        <span class="keyword">return</span> partial(log_time, msg=msg)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        curr = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[&#123;0&#125;]&quot;</span>.<span class="built_in">format</span>(func.__name__),msg, time.time() - curr)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_process</span>(<span class="params">index</span>):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>, index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@log_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_thread</span>():</span><br><span class="line">    pool = Pool()</span><br><span class="line"></span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        results.append(pool.apply_async(partial(post_process, index)))</span><br><span class="line"></span><br><span class="line">    [result.wait() <span class="keyword">for</span> result <span class="keyword">in</span> results]</span><br><span class="line">    pool.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@log_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sequence_run</span>():</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        post_process(index)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    multi_thread()</span><br><span class="line">    sequence_run()</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;执行上面的代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[sequence_run] elapsed time: 2.201172351837158</span><br><span class="line">[multi_thread] elapsed time: 1.2311382293701172</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;最后会得到用线程池的方式可以比直接执行快1倍。<br>&emsp;&emsp;而且这个代码是 py2 兼容的。<br>&emsp;&emsp;通过这个方式可以在 Maya 拍屏的时候用多线程调用 imagemagick 来对生成的图像进行处理。<br>&emsp;&emsp;这样用户几乎感受不到图像后处理的时间。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;以上就是 Maya 各种拍屏方案汇总，使用序列帧的自由度比较高，但是需要 ffmpeg 和 imagemagick 等依赖进行处理。<br>&emsp;&emsp;简单的需求可以直接用 playblast 加上 ZShotmask VP2 完成。</p></blockquote>]]></content>
    
    <summary type="html">
    
      结合 imagemagick 实现图片后处理
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="Maya 研究记录" scheme="https://blog.l0v0.com/categories/CG/Maya/Maya-%E7%A0%94%E7%A9%B6%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Maya" scheme="https://blog.l0v0.com/tags/Maya/"/>
    
      <category term="Python" scheme="https://blog.l0v0.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C++ 道法器术</title>
    <link href="https://blog.l0v0.com/posts/9d8a36c5.html"/>
    <id>https://blog.l0v0.com/posts/9d8a36c5.html</id>
    <published>2022-11-26T07:59:10.000Z</published>
    <updated>2022-12-14T02:54:16.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.bilibili.com/video/BV1pu411y7n1">https://www.bilibili.com/video/BV1pu411y7n1</a><br><a href="https://www.bilibili.com/video/BV1RV4y1x7qH">https://www.bilibili.com/video/BV1RV4y1x7qH</a></p><blockquote><p>&emsp;&emsp;上面两个链接是 李老师 的直播视屏。<br>&emsp;&emsp;虽然 李老师 在卖课。<br>&emsp;&emsp;但他免费的直播对我 C++ 小白来说，非常有用，让我对 C++ 语言有了一个大局观的认识。<br>&emsp;&emsp;这样才能更好地定位到自己学习的情况。<br>&emsp;&emsp;下面是对他 PPT 内容的一些总结汇总。</p></blockquote><h2 id="C-道法器术"><a href="#C-道法器术" class="headerlink" title="C++ 道法器术"></a>C++ 道法器术</h2><ul><li>C++ 5个术<ul><li><ol><li>类型系统</li></ol></li><li><ol start="2"><li>编译映射</li></ol></li><li><ol start="3"><li>内存管理</li></ol></li><li><ol start="4"><li>设计范式</li></ol></li><li><ol start="5"><li>习语与规范</li></ol></li></ul></li><li>设计范式<ul><li><ol><li>面向过程</li></ol></li><li><ol start="2"><li>面向对象</li></ol></li><li><ol start="3"><li>泛型编程</li></ol></li><li><ol start="4"><li>函数式编程</li></ol></li><li><ol start="5"><li>模板化编程</li></ol></li></ul></li><li>时空人<ul><li>时间分析 – 发生在什么时候</li><li>空间分析 – 变量/对象放在哪里</li><li>人物分析 – 代码哪来的，如何耦合</li></ul></li><li>模块一 C++ 类型系统与设施<ul><li>类型基础<ul><li>存储: 堆 栈 全局区</li><li>值语义与引用语义</li><li>指针与引用</li><li>初始化与生命周期</li></ul></li><li>其他类型<ul><li>数组序列: vector array 与 C数组</li><li>字符串处理: string string_view与char*</li><li>枚举类 联合 位域</li></ul></li><li>类<ul><li>数据成员</li><li>函数成员</li><li>静态与实例成员</li><li>操作符重载</li></ul></li><li>类型扩展<ul><li>auto 与自动类型推断</li><li>const</li><li>volatile</li><li>结构化绑定</li></ul></li><li>编译与构建<ul><li>C++ 编译机制</li><li>模块 (C++ 20)</li><li>GCC/Clang/MSVC</li></ul></li></ul></li><li>模块二 C++ 面向对象编程<ul><li>C++ 对象模型<ul><li>对象内存模型</li><li>对象成员与指针成员</li><li>对象布局 对齐 和尺寸</li></ul></li><li>三法则与五法则<ul><li>构造函数 / 析构函数</li><li>拷贝构造函数 / 赋值操作符</li><li>移动拷贝构造函数 / 移动赋值函数</li><li>默认定义与删除规则</li></ul></li><li>继承: 类型抽象<ul><li>基类与子类</li><li>成员的继承</li><li>抽象类</li><li>共有 私有 受保护继承</li><li>多继承与虚继承</li></ul></li><li>多态: 运行时绑定<ul><li>虚函数</li><li>虚函数表</li><li>虚析构函数</li><li>运行时绑定</li><li>dynamic_cast</li></ul></li><li>面向对象设计<ul><li>实现继承与接口继承</li><li>组合与继承</li><li>编译时 VS 运行时绑定</li><li>设计模式: Template Strategy Observer</li></ul></li></ul></li><li>模块三 内存管理: 原理 优化技巧与避免踩坑<ul><li>RAII: 内存与资源管理<ul><li>内存与资源</li><li>资源获取即初始化 (RAII)</li><li>C++ Java Go Rust 内存管理对比</li></ul></li><li>智能指针<ul><li>unique_ptr</li><li>shared_ptr</li><li>weak_ptr</li></ul></li><li>移动语义<ul><li>右值与左值</li><li>移动构造与移动赋值</li><li>移动与拷贝</li><li>临时对象与返回值优化(RVO)</li><li>std::move 操作</li><li>std::forward 操作</li></ul></li><li>new 与 delete 扩展<ul><li>全局 new 与 delete</li><li>new 与 delete 操作符</li><li>placement new</li><li>nothrow new</li></ul></li></ul></li><li>模板机制<ul><li>参数化类型<ul><li>类模板</li><li>类型参数与值参数</li><li>模板参数推到</li><li>参数的隐式绑定</li></ul></li><li>参数化操作<ul><li>函数模板</li><li>函数对象</li><li>lambda 表达式</li><li>函数式编程</li></ul></li><li>实用类型<ul><li>pair 与 tuple</li><li>variant optional any</li><li>bitset</li></ul></li><li>模板扩展<ul><li>模板编译模型</li><li>类型别名</li><li>模板特化</li><li>可变参数模板</li><li>constexpr 编译时计算</li><li>SFINAE \ enable_if \ Tag Dispatching \ if constexpr</li><li>模板元编程</li></ul></li></ul></li><li>模块五 泛型编程与 STL<ul><li>容器<ul><li>容器概述</li><li>STL 中的常用容器</li><li>容器及操作性能考虑</li><li>容器最佳实践</li></ul></li><li>算法<ul><li>STL 算法概览</li><li>不同算法的性能考虑</li><li>编写泛型算法</li><li>适配器</li></ul></li><li>迭代器<ul><li>迭代器概念</li><li>STL 中的迭代器</li><li>Ranges 与 for</li></ul></li><li>概念 (Concept)<ul><li>类型约束与接口规约</li><li>概念定义</li><li>STL 常用概念</li></ul></li></ul></li></ul><ul><li>设计原则 Design Principle<ul><li>正交设计四原则<ul><li>消除重复性</li><li>分离关注点</li><li>减少不必要地依赖</li><li>向稳定的方向依赖</li></ul></li><li>整洁代码三原则<ul><li>KISS 原则 (简单以理解)</li><li>DRY 原则 (不要重复自己)</li><li>迪米特原则 (最小依赖)</li></ul></li><li>SOLID 五大设计原则<ul><li>单一职责原则 (SRP)</li><li>开闭原则 (OCP)</li><li>里氏替换原则(LSP)</li><li>接口隔离原则(ISP)</li><li>依赖倒置原则(DIP)</li></ul></li><li>面向对象三原则<ul><li>封装责任 隔离变化</li><li>优化使用对象组合 而不是类继承</li><li>针对接口编程 而不是针对实现编程</li></ul></li></ul></li></ul><ul><li>设计习语 Design Idiom<ul><li>RAII 资源获取即初始化 </li><li>Scope Guard 范围守卫</li><li>Copy &amp; Swap 拷贝后转换</li><li>SOO 小对象优化</li><li>Local Buffer 本地缓存</li><li>Copy-On-Write (COW) 变更时拷贝</li><li>EBCO 空基类优化</li><li>Virtual Constructor 虚构造器</li><li>Pimpl 指向实现的指针</li><li>NVI (Non-Virtual Interface) 非虚接口</li><li>CRTP 奇异递归模板模式</li><li>Mixin 混入类</li><li>Policy Design 策略设计</li><li>Type Traits 类型萃取 </li><li>Lambda 重载</li><li>Tag Dispatcher 标签分发</li><li>Type Erasure 类型擦除</li><li>SFINAE 替换失败不是错误</li><li>Named Template Arguments / Method Chain 命名模板参数 / 方法链</li></ul></li></ul><ul><li>从管理变化的角度理解设计模式<ul><li>晚期扩展<ul><li>Template Method</li><li>Builder</li></ul></li><li>策略对象<ul><li>Strategy</li><li>Observer / Event</li></ul></li><li>对象创建<ul><li>Factory Method</li><li>Abstract Factory</li><li>Prototype</li></ul></li><li>单一职责<ul><li>Decorator</li><li>Bridge</li></ul></li><li>行为变化<ul><li>Command</li><li>Visitor</li></ul></li><li>接口隔离<ul><li>Adapter</li><li>Proxy</li><li>Facade</li><li>Mediator</li></ul></li><li>对象性能<ul><li>Singleton</li><li>Flyweight</li></ul></li><li>数据结构<ul><li>Composite</li><li>Iterator</li><li>Chain of Responsible</li></ul></li><li>状态变化<ul><li>State</li><li>Memento</li></ul></li><li>领域规则<ul><li>Interpreter</li></ul></li></ul></li></ul><h2 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><table><thead><tr><th>语言构造</th><th>习语与模式</th></tr></thead><tbody><tr><td>封装 - 接口隔离</td><td>Pimpl</td></tr><tr><td>多态基类 - 接口合约</td><td>NVI</td></tr><tr><td>泛型隐式接口</td><td>Template Method</td></tr><tr><td>Type Traits</td><td>Factory</td></tr><tr><td>Tag Dispatching</td><td>Adapter</td></tr><tr><td>SFINAE</td><td>Proxy</td></tr><tr><td>概念 – 泛型显示接口</td><td>Facade</td></tr><tr><td></td><td>Composite</td></tr><tr><td></td><td>Iterator</td></tr></tbody></table><h2 id="继承设计"><a href="#继承设计" class="headerlink" title="继承设计"></a>继承设计</h2><table><thead><tr><th>语言构造</th><th>习语与模式</th></tr></thead><tbody><tr><td>继承</td><td>EBCO</td></tr><tr><td>多继承</td><td>CRTP</td></tr><tr><td>虚继承</td><td>Bridge</td></tr><tr><td>实现继承</td><td>Mixin</td></tr><tr><td>接口继承</td><td>Decorator</td></tr><tr><td>变参继承</td></tr></tbody></table><h2 id="内存设计"><a href="#内存设计" class="headerlink" title="内存设计"></a>内存设计</h2><table><thead><tr><th>语言构造</th><th>习语与模式</th></tr></thead><tbody><tr><td>对象生命周期</td><td>RAII</td></tr><tr><td>值语义/引用语义</td><td>Scope Guard</td></tr><tr><td>对象内存布局</td><td>SOO</td></tr><tr><td>智能指针 {unique_ptr shared_ptr weak_ptr}</td><td>Local Buffer</td></tr><tr><td>移动语义</td><td>Copy-On-Write</td></tr><tr><td></td><td>Singleton</td></tr><tr><td></td><td>Flyweight</td></tr></tbody></table><h2 id="回调设计"><a href="#回调设计" class="headerlink" title="回调设计"></a>回调设计</h2><table><thead><tr><th>语言构造</th><th>习语与模式</th></tr></thead><tbody><tr><td>函数指针</td><td>Policy Design</td></tr><tr><td>多态对象 (策略 命令)</td><td>Strategy</td></tr><tr><td>函数对象 (仿函数)</td><td>Observer</td></tr><tr><td>函数适配器 (bine mem_fn)</td><td>Command</td></tr><tr><td>Lambda 表达式</td><td>Lambda Overload</td></tr><tr><td>std::function (多态回调对象)</td><td>Visitor</td></tr><tr><td>std::invoke (多态调用)</td><td></td></tr><tr><td>std::invocable (回调概念)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      李建忠的老师直播汇总
    
    </summary>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/C/"/>
    
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++ 基础入门</title>
    <link href="https://blog.l0v0.com/posts/20555bfb.html"/>
    <id>https://blog.l0v0.com/posts/20555bfb.html</id>
    <published>2022-11-13T03:39:03.000Z</published>
    <updated>2022-12-14T02:54:16.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;随着学习的深入，C++ 的学习越来越迫在眉睫。<br>&emsp;&emsp;虽然我在学习 Maya API 以及 Unreal 过程中已经写过不少的 C++ 代码。<br>&emsp;&emsp;但以前写 C++ 都是用 Python 的经验迁移过去使用的，很多 C++ 的特性都不懂，很多库也不怎么会用。<br>&emsp;&emsp;所以正因为如此，才希望自己可以深入学习好 C++</p></blockquote><h2 id="课程推荐"><a href="#课程推荐" class="headerlink" title="课程推荐"></a>课程推荐</h2><h3 id="C-MasterClass"><a href="#C-MasterClass" class="headerlink" title="C++ MasterClass"></a>C++ MasterClass</h3><p>在 youtube 上找到了一个非常棒的教程<br>Youtube地址(不完整): <a href="https://www.youtube.com/watch?v=8jLOx1hD3_o">https://www.youtube.com/watch?v=8jLOx1hD3_o</a><br>udemy 完整版地址: <a href="https://www.udemy.com/course/the-modern-cpp-20-masterclass/">https://www.udemy.com/course/the-modern-cpp-20-masterclass/</a><br>B站<br><a href="https://www.bilibili.com/video/BV1Hr4y1H7wB">https://www.bilibili.com/video/BV1Hr4y1H7wB</a><br><a href="https://www.bilibili.com/video/BV1JY4y1Y7uZ">https://www.bilibili.com/video/BV1JY4y1Y7uZ</a><br><a href="https://www.bilibili.com/video/BV1iA4y1X76r">https://www.bilibili.com/video/BV1iA4y1X76r</a><br><a href="https://www.bilibili.com/video/BV1A34y1e7KS">https://www.bilibili.com/video/BV1A34y1e7KS</a><br><a href="https://www.bilibili.com/video/BV1434y1e7N4">https://www.bilibili.com/video/BV1434y1e7N4</a></p><p>Github地址: <a href="https://github.com/rutura/The-C-20-Masterclass-Source-Code">https://github.com/rutura/The-C-20-Masterclass-Source-Code</a></p><blockquote><p>&emsp;&emsp;教程足足有 30 小时长，而且还是 <a href="https://www.udemy.com/course/the-modern-cpp-20-masterclass/">udemy</a> 教程的阉割版本，不过里面有第一章会教导如何使用 <code>MSVC</code> <code>gcc</code> <code>clang</code> 三种 C++ 编译器构建环境。<br>&emsp;&emsp;我 fork 了他的仓库加上我自己的 VSCode 配置 仓库地址: <a href="https://github.com/FXTD-ODYSSEY/The-C-20-Masterclass-Source-Code">https://github.com/FXTD-ODYSSEY/The-C-20-Masterclass-Source-Code</a></p></blockquote><blockquote><p>&emsp;&emsp;默认 tasks 是配置了三中不同编译的选项，如果注释掉两个的话，那就可以直接在 VScode 实现 ctrl+shift+b 实现编译并运行。<br>&emsp;&emsp;教程里面主要 IDE 环境是使用 VScode 搭建的，可能会有人困惑，why not VS。<br>&emsp;&emsp;我很久以前开发 Maya C++ 就是使用 VS 进行开发的，说实话，IDE 隐藏了太多细节，一旦出错，反而是无头苍蝇，无从查起。  <a href="https://www.zhihu.com/question/393152726/answer/1206640121">知乎回答</a><br>&emsp;&emsp;当然也同其他回答说得也对，用什么工具都无所谓，关键是懂得 C++ 的整个编译流程。</p></blockquote><h3 id="The-Cherno-C"><a href="#The-Cherno-C" class="headerlink" title="The Cherno C++"></a>The Cherno C++</h3><p><a href="https://www.youtube.com/watch?v=18c3MTX0PK0&amp;list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb">https://www.youtube.com/watch?v=18c3MTX0PK0&amp;list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb</a><br><a href="https://www.bilibili.com/video/BV1gk4y1r7UH">https://www.bilibili.com/video/BV1gk4y1r7UH</a></p><blockquote><p>&emsp;&emsp;游戏开发大佬推出的一系列编程课程。</p></blockquote><h3 id="parallel-101"><a href="#parallel-101" class="headerlink" title="parallel 101"></a>parallel 101</h3><blockquote><p>&emsp;&emsp;后来非常偶然地，我翻到一个大佬 (小彭老师) 的课程</p></blockquote><p><a href="https://github.com/parallel101/course">https://github.com/parallel101/course</a><br><a href="https://www.bilibili.com/video/BV1fa411r7zp">https://www.bilibili.com/video/BV1fa411r7zp</a></p><blockquote><p>&emsp;&emsp;这个课程用直播和录播的形式详细介绍了从 cmake 到 C++ 的使用。<br>&emsp;&emsp;而且老师年轻有为，能力很强，经验丰富。</p></blockquote><h3 id="原子之声"><a href="#原子之声" class="headerlink" title="原子之声"></a>原子之声</h3><p><a href="https://www.bilibili.com/video/BV1S54y1Z7Wc">C++现代实用教程(一):基础主线(VSCODE)</a> <a href="https://gitlab.com/yzzy/modern-cpp">gitlab地址</a><br><a href="https://www.bilibili.com/video/BV1eg411Q7nG">C++现代实用教程(二):面向对象基础</a> <a href="https://gitlab.com/yzzy/modern-oop">gitlab地址</a><br><a href="https://www.bilibili.com/video/BV1ZZ4y1e7zy">C++现代实用教程(三):面向对象之友元与继承</a> <a href="https://gitlab.com/yzzy/modern-friend">gitlab地址</a><br><a href="https://www.bilibili.com/video/BV15v4y1M7fF">C++现代实用教程(四):面向对象核心多态</a> <a href="https://gitlab.com/yzzy/modern-polymorphic">gitlab地址</a><br><a href="https://www.bilibili.com/video/BV18B4y187uL">C++现代实用教程:智能指针</a> <a href="https://gitlab.com/yzzy/smart-pointer">gitlab地址</a><br><a href="https://www.bilibili.com/video/BV1Va411T7TJ">C++现代实用教程: Namespace命名空间</a> <a href="https://gitlab.com/yzzy/namespace">gitlab地址</a></p><blockquote><p>&emsp;&emsp;这位老师也很赞~<br>&emsp;&emsp;但是还没仔细看…</p></blockquote><h3 id="C-道法器术"><a href="#C-道法器术" class="headerlink" title="C++ 道法器术"></a>C++ 道法器术</h3><p><a href="https://www.bilibili.com/video/BV1pu411y7n1">https://www.bilibili.com/video/BV1pu411y7n1</a><br><a href="https://www.bilibili.com/video/BV1RV4y1x7qH">https://www.bilibili.com/video/BV1RV4y1x7qH</a></p><blockquote><p>&emsp;&emsp;C++ 是一门很复杂的语言，像我是从 Python 开始进阶编程的。<br>&emsp;&emsp;当我将 Python 很多用法摸透之后，进入到 Python 底层，发现 C++ 还很多底层的内容等待我去学习<em>(:з」∠)</em><br>&emsp;&emsp;那上面的视频，比较系统地总结了 C++ 从入门到进阶的各个不同阶段地内容，学习 C++ 有很清晰的整体图谱。<br>&emsp;&emsp;当然视频里面其实是介绍作者推出的课程的~</p></blockquote><p>个人剖析文章 <a href="http://tw.l0v0.com/#01_C%2B%2B%20%E9%81%93%E6%B3%95%E5%99%A8%E6%9C%AF.md">01_C++ 道法器术.md</a></p><h2 id="搭建运行环境"><a href="#搭建运行环境" class="headerlink" title="搭建运行环境"></a>搭建运行环境</h2><blockquote><p>&emsp;&emsp;C++ 语言和 Python 运行方式有相当大的不同，</p></blockquote><p>参考: <a href="https://smartkeyerror.com/Python-Virtual-Machine">https://smartkeyerror.com/Python-Virtual-Machine</a></p><blockquote><p>&emsp;&emsp;编译 C++ 需要有 C++ 编译器来生成汇编代码(二进制机器码) ，不同的编译器有不同的优化策略，所以版本和编译器平台都会对生成的汇编有很大影响。<br>&emsp;&emsp;教程提供了 <a href="https://en.cppreference.com/w/cpp/compiler_support">https://en.cppreference.com/w/cpp/compiler_support</a> 这个网站。<br>&emsp;&emsp;可以看到不同平台编译器对各种 CPP 规范的支持情况，如果用了老版本就不能使用新版本的 C++ 写法<br>&emsp;&emsp;目前 C++ 也在不断演进，从古老的 C++98 到现在 C++11 C++14 C++17 C++20 以及后续即将推出的 C++23 C++26<br>&emsp;&emsp;目前主流编译器的最新版本都支持到 C++17 了。</p></blockquote><h3 id="编译器下载配置"><a href="#编译器下载配置" class="headerlink" title="编译器下载配置"></a>编译器下载配置</h3><blockquote><p>&emsp;&emsp;市面上最主流的 C++ 编译器有 <code>MSVC</code> <code>gcc</code> <code>clang</code> ，其中 <code>MSVC</code> 是 windows 平台的，另外两个是可跨平台开发。<br>&emsp;&emsp;windows 下如何安装环境呢？ 推荐使用 <a href="https://chocolatey.org/">choco</a> 进行安装</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>-ExecutionPolicy Bypass -Scope Process -Force; [System.<span class="built_in">Net</span>.ServicePointManager]::SecurityProtocol = [System.<span class="built_in">Net</span>.ServicePointManager]::SecurityProtocol -bor <span class="number">3072</span>; iex ((New-Object System.<span class="built_in">Net</span>.WebClient).DownloadString(&#x27;https://community.chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;用管理员权限打开 powershell 然后输入上面的命令进行安装。</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">::安装 MSVC</span><br><span class="line">choco install visualstudio2019buildtools --yes</span><br><span class="line">choco install vcredist140 --yes</span><br><span class="line"></span><br><span class="line">::安装 gcc</span><br><span class="line">choco install mingw --yes</span><br><span class="line"></span><br><span class="line">::安装 clang</span><br><span class="line">choco install llvm --yes</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;执行上面的命令可以安装相对应的环境到系统中。<br>&emsp;&emsp;需要注意的是 MSVC 需要打开 VS installer 配置 windows SDK <code>C:\Program Files (x86)\Microsoft Visual Studio\Installer\setup.exe</code> </p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/20555bfb/n_v285b0b4d8f4df41b999777df16203be55.png" alt="image"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/20555bfb/n_v22aa2ef04a31645f59c6f4ddc91cf8e35.png" alt="image"></p><blockquote><p>&emsp;&emsp;然后选择下载 Windows 10 SDK 再到右下角点击修改。<br>&emsp;&emsp;这样才能将 MSVC 编译器安装到电脑上。</p></blockquote><hr><blockquote><p>&emsp;&emsp;使用 MSVC 进行编译，需要调用 <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\Common7\Tools\VsDevCmd.bat</code> 脚本启动环境。<br>&emsp;&emsp;激活环境之后可以使用 cl.exe 来接链编译 C++ 代码。<br>&emsp;&emsp;而其他编译器默认安装完之后 choco 添加到 PATH 路径下了。</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Program</span> <span class="title">Files</span> (<span class="title">x86</span>)\<span class="title">Microsoft</span> <span class="title">Visual</span> <span class="title">Studio</span>\2019\<span class="title">BuildTools</span>\<span class="title">Common7</span>\<span class="title">Tools</span>\<span class="title">VsDevCmd.bat</span></span></span><br><span class="line"><span class="function"><span class="title">cl</span> /<span class="title">Zi</span> /<span class="title">std:c</span>++20 /<span class="title">EHsc</span> /<span class="title">Fe</span>: <span class="title">main.exe</span> <span class="title">main.cpp</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -g -std=c++<span class="number">20</span> main.exe main.cpp</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -g -std=c++<span class="number">20</span> main.exe main.cpp</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用上面的命令就可以实现 C++20 标准代码的编译。<br>&emsp;&emsp;如果你使用 Visual Studio 之类的 IDE，那背后其实也是调用编译器对 C++ 代码编译生成二进制机器码文件。</p></blockquote><h3 id="VScode-环境配置"><a href="#VScode-环境配置" class="headerlink" title="VScode 环境配置"></a>VScode 环境配置</h3><blockquote><p>&emsp;&emsp;有了上述的环境之后，只要运行命令就可以执行代码了。<br>&emsp;&emsp;开发工具比较推荐使用 <a href="https://code.visualstudio.com/">VScode</a><br>&emsp;&emsp;个人体验了 VS 感觉过于笨重，而且隐藏了很多编译的细节，导致很多环节出错了不知道从何查起。<br>&emsp;&emsp;所以我推荐使用 VScode 编辑器作为入门，了解了基础再使用复杂的 IDE 才能事半功倍。</p></blockquote><hr><blockquote><p>&emsp;&emsp;安装 VScode 之后，可以安装微软官方提供的 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C++ 扩展</a><br>&emsp;&emsp;实际上 VScode 官方是比较推荐用 <code>tasks.json</code> 配置来管理编译 用 <code>launch.json</code> 来管理启动的。<br>&emsp;&emsp;但是这些配置对小白来说还是稍显复杂。<br>&emsp;&emsp;这里我推荐安装 <a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">Code Runner</a> 插件</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/20555bfb/n_v21e4552e31949456090f6e78599693550.png" alt="image"></p><blockquote><p>&emsp;&emsp;去到对应的代码就有启动图标，在右上角，点击一下默认会调用 gcc 编译并执行。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/20555bfb/n_v234ae967db8bb48c4bf2df017554f3462.png" alt="image"></p><blockquote><p>&emsp;&emsp;如果想要修改默认的执行命令，可以去修改 code runner 的配置</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/20555bfb/n_v2d84c274019634fefa2e181f3ef1bae83.png" alt="image"></p><blockquote><p>&emsp;&emsp;默认会有不同语言对应执行的命令，我们这里可以把 Cpp 执行的命令改成我们想要的样子即可。<br>&emsp;&emsp;比如我们想要改成 clang 编译也或者 MSVC 编译也是完全可以的。<br>&emsp;&emsp;MSVC 比较麻烦，需要先跑 <code>VsDevCmd.bat</code> 激活环境才能使用 cl 命令。</p></blockquote><blockquote><p>&emsp;&emsp;另外输入源可以改成通配符识别 <code>*.cpp</code> ，这样多个文件只要都在一个目录里面都会一同编译，方便我们初学跑程序。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;cpp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd $dir &amp;&amp; g++ -g -std=c++20 *.cpp -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;另外在线网站 <a href="https://godbolt.org/">https://godbolt.org/</a> 内置了很多不用语言的编译器<br>&emsp;&emsp;可以在线编写代码去验证，也能很方便地查看编译出来的汇编语言。<br>&emsp;&emsp;没有本地环境的时候也可以用这个工具来跑代码进行验证。</p></blockquote><h2 id="C-入门"><a href="#C-入门" class="headerlink" title="C++ 入门"></a>C++ 入门</h2><blockquote><p>&emsp;&emsp;学习一门语言，是骡子是马总得遛 一遛才知道代码是否有问题。<br>&emsp;&emsp;所以只是看教程，脑内编译代码是不行的。</p></blockquote><blockquote><p>&emsp;&emsp;这里我用 C++ 入门会以 <a href="https://github.com/rutura/The-C-20-Masterclass-Source-Code">The-C-20-Masterclass-Source-Code</a><br>&emsp;&emsp;只要按照我上面的配置，就可以愉快地跑这个仓库任意路径的代码，并编译出可执行文件了~</p></blockquote><blockquote><p>&emsp;&emsp;如果你已经有编程基础，比如学过其他的编程语言，那么我更推荐直接看代码执行来学习，遇到不懂的部分再翻视频。<br>&emsp;&emsp;这样比起纯看看视频会更快上手。</p></blockquote><blockquote><p>&emsp;&emsp;另外为了方便能够查阅 <a href="https://en.cppreference.com/w/">cppreference.com</a> <a href="https://cplusplus.com/">cplusplus.com</a> 等官方文档，可以快速跑里面的案例 Demo<br>&emsp;&emsp;我用 Python 做了个简单的爬虫，将不同的资料汇总到一起 <a href="https://github.com/FXTD-ODYSSEY/cppreference">REPO</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      C++ MasterClass
    
    </summary>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/C/"/>
    
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
  </entry>
  
  <entry>
    <title>FBX 二进制数据解析</title>
    <link href="https://blog.l0v0.com/posts/8207ba23.html"/>
    <id>https://blog.l0v0.com/posts/8207ba23.html</id>
    <published>2022-11-06T08:38:37.000Z</published>
    <updated>2022-12-14T02:54:16.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;最近遇到了一个比较难搞的需求，好不容易解决了，在这里记录一下。<br>&emsp;&emsp;需求是这样的，公司有大佬在 motionbuilder 写了插件，利用 mobu API 做了一个自定义的节点并在里面通过 <a href="https://help.autodesk.com/view/MOBPRO/2020/ENU/?guid=MotionBuilder_SDK_cpp_ref_class_f_b_model_html#a338af922f322871b1001d527851ec995">FBXStore</a> API 存入了自定义数据。<br>&emsp;&emsp;我需要将这些操作通过 Python FBXSDK 来完成这些数据的写入。<br>&emsp;&emsp;主要原因是 motionbuilder 的稳定性不可靠，如果可以利用纯外部调用 FBXSDK 的形式解决问题，就不需要依赖 mobu 了。</p></blockquote><blockquote><p>&emsp;&emsp;用 FBXSDK 来还原自定义节点操作都好说。<br>&emsp;&emsp;主要蛋疼的地方在于需要解决 FBXStore API 调用背后怎么转换成二进制的问题。</p></blockquote><h2 id="motion-builder-C-插件编译"><a href="#motion-builder-C-插件编译" class="headerlink" title="motion builder C++ 插件编译"></a>motion builder C++ 插件编译</h2><blockquote><p>&emsp;&emsp;在 motion builder 的安装路径有 <code>OpenRealitySDK</code> 文件夹，里面的 samples 有很多开发 mobu 的参考代码。<br>&emsp;&emsp;其中比较具有代表性的脚本就是 <code>OpenRealitySDK\samples\devices\devicecamera\ordevicecamera_device.cxx</code><br>&emsp;&emsp;这个脚本就定义怎么将自定义数据存入 FBX 当中，并且利用 <code>FbxRetrieve</code> 方法将功能读取回来。</p></blockquote><blockquote><p>&emsp;&emsp;我们可以把这个东西编译出来作为我们这次测试的内容。</p></blockquote><blockquote><p>&emsp;&emsp;默认 motionbuilder 的 samples 里面提供了 sln 工程，可以直接用 VS 打开。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/8207ba23/n_v2086b51bf6afa43e8952472613069d6e3.png" alt="image"></p><blockquote><p>&emsp;&emsp;打开之后需要将平台工具集升级到最新的 VS 版支持的工具集，默认是 2012 工具集太过古老了。<br>&emsp;&emsp;改完之后本想着愉快地编译，然而这样会报错。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/8207ba23/n_v2a6310a64d7e4473aa71f51f191d1c9ab.png" alt="image"></p><blockquote><p>&emsp;&emsp;这个问题只能归结为新的平台工具集已经去掉了支持，但是头文件依旧引入相应的文件，解决也很简单，将报错的那一行注释即可。</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/8207ba23/n_v2c8da73f2b30b44ffa1a28b120ce44a47.png" alt="image"></h2><blockquote><p>&emsp;&emsp;编译完成会默认去到 <code>bin\x64\plugins</code> 的目录，这样只要重启 motion builder 就能加载到这个 dll 了。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/8207ba23/n_v25ed2de89967144a2818f413f2ace29eb.png" alt="image"></p><blockquote><p>&emsp;&emsp;这样将这个图标拖拽到场景就可以创建一个 device.<br>&emsp;&emsp;将这场景以 ascii 的格式保存。<br>&emsp;&emsp;检查保存的 FBX 文件，可以看到 FBXStore 的写入逻辑，会将信息写入到节点的 <code>MoBuAttrBlindData</code> 属性上</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/8207ba23/n_v237187ca650284706973961105736d6fb.png" alt="image"></p><blockquote><p>&emsp;&emsp;存储出来可以看到相应的信息。<br>&emsp;&emsp;这里官方的插件将信息转成了 KString 所以里面的信息也是以 FBX ASCII 的形式存在。<br>&emsp;&emsp;但如果将 FBX 存成 Binary 模式，然后再用 Python FBXSDK 来转存成 ASCII 的话，这些 FBXStore 的数据会转成 base64 的二进制数据。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/8207ba23/n_v288775b70604e49f2a3c93659049bdd50.png" alt="image"></p><blockquote><p>&emsp;&emsp;如果用 base64 解码，可以看到里面存储的二进制数据。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">in_data = <span class="string">r&quot;cBsAAAABAAAABQAAAAhDb21tVHlwZUkQAAAANAAAAAEAAAAFAAAAB1ZlcnNpb25JUQMAAGIAAAADAAAAGwAAAAZTZXJpYWxJAQAAAEkAlgAAUwwAAABTY2VuZQABTW9kZWycAAAABAAAACQAAAAJU2ltdWxhdG9yRAAAAAAAAPA/RAAAAAAAAPA/RAAAAAAAAAAARAAAAAAAAAAAwwAAAAIAAAATAAAAB05ldHdvcmtTCQAAADEyNy4wLjAuMUm5CwAA9gAAAAIAAAAaAAAADFNoYXJlZE1lbW9yeVMKAAAASE1DX1NITV9WMVMGAAAAMDAwMDAwFAEAAAEAAAAJAAAACFNldHRpbmdzRAAAAAAAAAAAMgEAAAEAAAAFAAAADFNhbXBsaW5nTW9kZUkAAAAAVAEAAAEAAAAFAAAAEEluc3RydW1lbnRBY3RpdmVJAQAAAG0BAAABAAAABQAAAAdWZXJzaW9uSVEDAACOAQAAAQAAAAUAAAAPTGVuc1RhYmxlTG9hZGVkSQAAAADbAQAABgAAAC4AAAASTWFudWFsTW9kZVNldHRpbmdzSQAAAABEBzDzdETpTEBEAAAAAACARkBJAAAAAEQAAAAAAAAAAEQAAAAAAAAAAP4BAAACAAAACgAAAAxJbnZlcnRWYWx1ZXNJAAAAAEkAAAAAHwIAAAEAAAAJAAAAC0FzcGVjdFJhdGlvRFVVVVVVVfU/QwIAAAEAAAAJAAAADlpvb21NdWx0aXBsaWVyRAAAAAAAAPA/aAIAAAEAAAAJAAAAD05vZGFsTXVsdGlwbGllckQAAAAAAABZQIgCAAABAAAABQAAAA5BbmdsZUluRGVncmVlc0kAAAAAywIAAAQAAAAkAAAAEkVuY29kZXJDYWxpYnJhdGlvbkQAAADgzxJjQUQAAADgzxJjwUQAAADgzxJjQUQAAADgzxJjwRsDAAAGAAAANgAAAA1TdHVkaW9PZmZzZXRzRAAAAAAAAAAARAAAAAAAAAAARAAAAAAAAAAARAAAAAAAAAAARAAAAAAAAAAARAAAAAAAAAAANAMAAAEAAAAFAAAAB1ZlcnNpb25JUQMAAE8DAAABAAAABQAAAAlTeW5jRGVsYXlJBAAAAAAAAAAAAAAAAAAAAAA=&quot;</span></span><br><span class="line"></span><br><span class="line">output_path = <span class="string">r&quot;G:\_TEMP\2022-11-1\test_device.bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output_path,<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> wf:</span><br><span class="line">    wf.write(base64.b64decode(in_data))</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/8207ba23/n_v2c9af2c88fe7d412b8a9f65a2da99ebf0.png" alt="image"></p><blockquote><p>&emsp;&emsp;VScode 安装 Hex Editor 可以查看二进制数据。<br>&emsp;&emsp;而我这边需要想办法用 Python 写入二进制数据，从而摆脱 motion builder 的依赖。</p></blockquote><h2 id="FBX-二进制"><a href="#FBX-二进制" class="headerlink" title="FBX 二进制"></a>FBX 二进制</h2><p>FBX 数据格式<br><a href="./c12b915c.html">RenderDoc Python 开发 FBX 导出工具</a></p><blockquote><p>&emsp;&emsp;之前写 renderdoc 导出 FBX 插件的时候，使用的时 FBX ASCII 格式，通过将数据写入到 FBX ASCII 对应的位置。FBX 就可以被读取到。<br>&emsp;&emsp;当时踩了的坑也可以从中窥探到 FBX 存储的结构。</p></blockquote><p>Python 二进制处理<br><a href="./5c00f85e.html">Maya 输出顶点动画到引擎</a></p><blockquote><p>&emsp;&emsp;通过上面的文章，可以了解到 Python 写入二进制数据可以依赖内置的 <a href="https://docs.python.org/3/library/struct.html">struct</a> 包。<br>&emsp;&emsp;写入数据需要了解 C++ 的数据类型的长度，按照长度和数据的写入顺序就可以用 Python 还原二进制数据。</p></blockquote><hr><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/8207ba23/n_v2260d987c1c924d8e92baf610813d12c2.png" alt="image"></p><blockquote><p>&emsp;&emsp;通过 C++ 源码可以知道写入了这些数据</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/8207ba23/n_v2c9af2c88fe7d412b8a9f65a2da99ebf0.png" alt="image"></p><blockquote><p>&emsp;&emsp;通过源码和二进制的对比，可以窥探到其中意思规则<br>&emsp;&emsp;比如利用 C++ 可以知道 Version 数据写入的时 <code>0x0351</code> 的数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> struct</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>struct.pack(<span class="string">&quot;i&quot;</span>,<span class="number">0x0351</span>) </span><br><span class="line"><span class="string">b&#x27;Q\x03\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用 python 将 <code>0x0351</code> 转换为整形会返回 <code>Q\x03\x00\x00</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/8207ba23/n_v23dbc5f16d9bb480697e9f37bba7b3802.png" alt="image"></p><blockquote><p>&emsp;&emsp;正好和 二进制 数据是对应的，中间的 I 则表示是 Int 整形数据。<br>&emsp;&emsp;这个规律我经过我对二进制不少数据的解读总结出来的。但还有一些数据的含义是未知的。</p></blockquote><blockquote><p>&emsp;&emsp;后来在网上搜索了一下这个二进制规则，发现 Blender 官方提供了 FBX 二进制的解读。 <a href="https://code.blender.org/2013/08/fbx-binary-file-format-specification/">链接</a><br>&emsp;&emsp;这个文章有非常完整的 FBX 二进制规则。<br>&emsp;&emsp;通过这个规则可以解读出整个 FBX 二进制数据的存储方式。</p></blockquote><blockquote><p>&emsp;&emsp;比如开头的 <code>CommmType</code> 前面有14位数据，除去开头第一个 <code>0x70</code> 数据，后面的数据分别对应 <code>EndOffset</code> <code>NumProperties</code> <code>PropertyListLen</code> <code>NameLen</code><br>&emsp;&emsp;完全和 Node Record Format 对应。</p></blockquote><blockquote><p>&emsp;&emsp;理解了数据的存储方式之后，就可以很顺利用 Python 写入同样的二进制数据。</p></blockquote><h2 id="FBXSDK-写入问题"><a href="#FBXSDK-写入问题" class="headerlink" title="FBXSDK 写入问题"></a>FBXSDK 写入问题</h2><blockquote><p>&emsp;&emsp;只是我处理的时候发现 Python FBXSDK 无法直接写入 blob 二进制数据。<br>&emsp;&emsp;原因是 <code>FbxProperty.Set</code> 不接受 bytes 数据。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/8207ba23/n_v2e4128595ef4f4b49b00c9f6ff7577ded.png" alt="image"></p><blockquote><p>&emsp;&emsp;这个部分是用 C++ 模板实现的，可能这个功能并没有映射给 Python FBXSDK，导致功能缺失。(也只能说这个功能少用得很)<br>&emsp;&emsp;为了保证数据的长度，我的处理方式是用 FbxString 写入相同长度的 字符串桩 ，比如一堆 <code>*</code> 的字符串。<br>&emsp;&emsp;保存出去的 FBX 二进制文件再度用 Python 读取，然后将 字符串桩 替换为真实的 二进制 数据。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;这次深度挖掘了 FBX 二进制格式，对 FBX 的文件处理更加得心应手😄~</p></blockquote>]]></content>
    
    <summary type="html">
    
      FBXSDK 如何写入二进制
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="FBX" scheme="https://blog.l0v0.com/categories/CG/FBX/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Maya RBF 算法应用</title>
    <link href="https://blog.l0v0.com/posts/1048128c.html"/>
    <id>https://blog.l0v0.com/posts/1048128c.html</id>
    <published>2022-08-25T07:46:44.000Z</published>
    <updated>2022-12-14T02:54:16.806Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好, 这里需要密码.提示(神秘号码 + 光子)</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="ffbed5c3f03360d507f5c5e59067d1b561f71cef21376416139ae9a8634f569a"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      绑定中非常实用的算法应用
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="Rigging" scheme="https://blog.l0v0.com/categories/CG/Maya/Rigging/"/>
    
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
  </entry>
  
  <entry>
    <title>Maya 顶点色单通道笔刷</title>
    <link href="https://blog.l0v0.com/posts/1cdbfd5e.html"/>
    <id>https://blog.l0v0.com/posts/1cdbfd5e.html</id>
    <published>2022-08-16T08:11:28.000Z</published>
    <updated>2022-12-14T02:54:16.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;上次我们讨论了怎么在 Maya 实现各种笔刷的姿势 <a href="./cacaf61d.html">Maya CurveBrush 笔刷开发</a><br>&emsp;&emsp;趁着最近比较有空，我又捡起了之前想要开发顶点颜色单通道笔刷，<br>&emsp;&emsp;仓库早在 1 年前就创建了，但是并没有好好开发出来。</p></blockquote><p><a href="https://github.com/FXTD-ODYSSEY/Maya-VertexColorPainter">https://github.com/FXTD-ODYSSEY/Maya-VertexColorPainter</a></p><blockquote><p>&emsp;&emsp;关于单通道顶点色笔刷，其实是之前项目组给我提的需求，Maya 官方提供的 <code>Paint Vertex Color Tool</code> 挺好的</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/2b1586377c548119cf7f0ad1e2bb1e1e.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;就是绘制的时候顶点色是混合在一起的。无法实现分通道绘制。<br>&emsp;&emsp;网上也可以找到有不少帖子抱怨 Maya 竟然没有实现这个功能的。</p></blockquote><p><a href="https://polycount.com/discussion/191918/single-channel-vertex-painting-in-maya-2018">https://polycount.com/discussion/191918/single-channel-vertex-painting-in-maya-2018</a><br><a href="https://www.reddit.com/r/Maya/comments/87znt2/paint_on_separate_channels_in_vertex_painting/">https://www.reddit.com/r/Maya/comments/87znt2/paint_on_separate_channels_in_vertex_painting/</a></p><blockquote><p>&emsp;&emsp;我当时做了一些研究，后来因为太忙了，就将需求转交给其他同事负责了。<br>&emsp;&emsp;那个同事解决了需求，只是解决方案比较复杂，需要用 OpenMaya 写一个节点，再加自定义笔刷实现。</p></blockquote><blockquote><p>&emsp;&emsp;经过我上次笔刷的折腾，我在想能否扩展原本 Maya <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=GUID-3DB9DB65-78B6-407B-8CB0-5212217B645F">Paint Vertex Color Tool</a> 的功能</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/demo.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;上面就是我最终实现的效果，在 Maya 的原生 UI 上进行修改，提供了额外的 UI 配置来进行单通道绘制。</p></blockquote><h2 id="笔刷选型"><a href="#笔刷选型" class="headerlink" title="笔刷选型"></a>笔刷选型</h2><blockquote><p>&emsp;&emsp;<a href="./cacaf61d.html">Maya CurveBrush 笔刷开发</a> 我这篇文章已经覆盖了写笔刷的各种姿势。<br>&emsp;&emsp;用 Maya 开放的 <code>MPxContext</code> 写笔刷实最为自由的，但是很多功能都没有。<br>&emsp;&emsp;使用 Maya 内置的 <code>artisan</code> 笔刷，则已经实现了好多功能。</p></blockquote><ol><li>自带镜像</li><li>笔刷可以自定义笔刷图章实现渐变</li><li>内置序列化功能</li></ol><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=GUID-72D60883-07A4-4536-AE72-226A2AD0845E">artisan painting 扩展官方文档</a></p><blockquote><p>&emsp;&emsp;所以如果不是复杂的笔刷，能用 artisan 就用 artisan 去实现。<br>&emsp;&emsp;只可惜 Maya 没有暴露 artisan 笔刷的 C++ 接口，所以如果用 C++ 开发就只能重新实现一遍 <code>artisan</code> 的功能，比较麻烦。<br>&emsp;&emsp;当然绘制顶点色我直接使用 <code>artAttrPaintVertexCtx</code> 即可。</p></blockquote><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="单通道-color-set-拆分"><a href="#单通道-color-set-拆分" class="headerlink" title="单通道 color set 拆分"></a>单通道 color set 拆分</h3><blockquote><p>&emsp;&emsp;利用 Maya 提供的 <code>ColorSet</code> 功能，将模型的主顶点色分拆成四个通道的 <code>ColorSet</code> ，<br>&emsp;&emsp;我这里就分别命名为 <code>VertexColorR</code> <code>VertexColorG</code> <code>VertexColorB</code> <code>VertexColorA</code><br>&emsp;&emsp;绘制的时候根据选择 UI 的选择激活相应的 <code>ColorSet</code> 。</p></blockquote><blockquote><p>&emsp;&emsp;这一步可以用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/artAttrPaintVertexCtx.html">artAttrPaintVertexCtx</a> 的 <code>toolOnProc</code> 和 <code>toolOffProc</code> 定义激活和关闭的回调。<br>&emsp;&emsp;激活 context 的时候创建 <code>ColorSet</code> 拆分，退出 Context 的时候删除冗余的 <code>ColorSet</code><br>&emsp;&emsp;这个地方的 <code>toolOnProc</code> <code>toolOffProc</code> 同样只接受 mel 函数，用 Python 解决的方案参考 <a href="./cacaf61d.html">Maya CurveBrush 笔刷开发</a> 这篇文章。</p></blockquote><h3 id="颜色分解"><a href="#颜色分解" class="headerlink" title="颜色分解"></a>颜色分解</h3><blockquote><p>&emsp;&emsp;那么上面拆分 <code>ColorSet</code> 的时候就需要将对应的 MainColorSet 的颜色按通道赋值给对应单通道的 <code>ColorSet</code>.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyeml.core <span class="keyword">as</span> pm</span><br><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> OpenMaya</span><br><span class="line">PAINT_CTX = <span class="string">&quot;artAttrColorPerVertexContext&quot;</span></span><br><span class="line">color_set_representation = &#123;</span><br><span class="line">    <span class="string">&quot;R&quot;</span>: <span class="string">&quot;RGB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;G&quot;</span>: <span class="string">&quot;RGB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;B&quot;</span>: <span class="string">&quot;RGB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;A&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_color_sets</span>(<span class="params">node</span>):</span><br><span class="line">    color_sets = pm.polyColorSet(node, q=<span class="number">1</span>, allColorSets=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> color_sets <span class="keyword">or</span> pm.polyColorSet(node, create=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_color</span>(<span class="params">color, index, source_color=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> index &gt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> color</span><br><span class="line">    is_color = <span class="built_in">isinstance</span>(source_color, OpenMaya.MColor)</span><br><span class="line">    color_list = <span class="built_in">list</span>(source_color) <span class="keyword">if</span> is_color <span class="keyword">else</span> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    color_list[index] = color[index]</span><br><span class="line">    <span class="keyword">return</span> OpenMaya.MColor(*color_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTES(timmyliang): 获取当前正在绘制的节点</span></span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> <span class="built_in">set</span>(pm.artAttrPaintVertexCtx(PAINT_CTX, q=<span class="number">1</span>, pna=<span class="number">1</span>).split()):</span><br><span class="line">    node = pm.PyNode(node)</span><br><span class="line">    node.displayColors.<span class="built_in">set</span>(<span class="number">1</span>)</span><br><span class="line">    color_sets = get_color_sets(node)</span><br><span class="line">    main_color_set = color_sets[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    mesh = node.__apimfn__()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># NOTES(timmyliang): 获取主 color set 顶点色</span></span><br><span class="line">    color_array = OpenMaya.MColorArray()</span><br><span class="line">    mesh.getVertexColors(color_array, main_color_set)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTES(timmyliang): 获取顶点序号数组</span></span><br><span class="line">    vtx_array = OpenMaya.MIntArray()</span><br><span class="line">    <span class="keyword">for</span> array_index <span class="keyword">in</span> <span class="built_in">range</span>(color_array.length()):</span><br><span class="line">        vtx_array.append(array_index)</span><br><span class="line"></span><br><span class="line">    final_colors = OpenMaya.MColorArray()</span><br><span class="line">    <span class="keyword">for</span> channel_index, color_channel <span class="keyword">in</span> <span class="built_in">enumerate</span>(cls.CHANNELS):</span><br><span class="line">        <span class="comment"># NOTES(timmyliang): 如果通道 color set 不存在则创建</span></span><br><span class="line">        color_set = <span class="string">&quot;VertexColor&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(color_channel)</span><br><span class="line">        <span class="keyword">if</span> color_set <span class="keyword">not</span> <span class="keyword">in</span> color_sets:</span><br><span class="line">            rpt = color_set_representation.get(color_channel)</span><br><span class="line">            pm.polyColorSet(node, create=<span class="number">1</span>, rpt=rpt, colorSet=color_set)</span><br><span class="line"></span><br><span class="line">        mesh.setCurrentColorSetName(color_set)</span><br><span class="line">        final_colors.clear()</span><br><span class="line">        <span class="keyword">for</span> array_index <span class="keyword">in</span> <span class="built_in">range</span>(color_array.length()):</span><br><span class="line">            full_color = color_array[array_index]</span><br><span class="line">            color = filter_color(full_color, index=channel_index)</span><br><span class="line">            final_colors.append(color)</span><br><span class="line">        <span class="comment"># NOTES(timmyliang): 批量设置顶点色</span></span><br><span class="line">        mesh.setVertexColors(final_colors, vtx_array)</span><br><span class="line">    mesh.setCurrentColorSetName(main_color_set)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这里利用 pymel 提供的 <code>__apimfn__</code> 直接获取 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_fn_mesh_html">MFnMesh</a> 对象<br>&emsp;&emsp;利用 <code>setVertexColors</code> API 批量设置顶点色，性能比起单点设置要好很多。</p></blockquote><h3 id="单通道-单颜色-绘制"><a href="#单通道-单颜色-绘制" class="headerlink" title="单通道 单颜色 绘制"></a>单通道 单颜色 绘制</h3><blockquote><p>&emsp;&emsp;下一步就是要实现绘制将颜色锁在对应通道上。<br>&emsp;&emsp;比如我在 UI 上设置为值绘制 R 通道的状态，绘制选择的颜色是 白色 [255,255,255]，点击 Viewport 的时候会将颜色过滤成 红色 [255,0,0] ，这样勾选 R 的时候就只会刷出 红色 没有其他颜色。<br>&emsp;&emsp;这里可以监听 Viewport 的 press 和 release 触发，当点击 viewport 的时候根据 UI 勾选的通道过滤 Ctx 颜色配置。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NOTES(timmyliang): 获取 UI 的颜色和透明值</span></span><br><span class="line">rgb = pm.colorSliderGrp(<span class="string">&quot;colorPerVertexColor&quot;</span>, q=<span class="number">1</span>, rgb=<span class="number">1</span>)</span><br><span class="line">alpha = pm.floatSliderGrp(<span class="string">&quot;colorPerVertexAlpha&quot;</span>, q=<span class="number">1</span>, value=<span class="number">1</span>)</span><br><span class="line">rgb.append(alpha)</span><br><span class="line"><span class="comment"># NOTES(timmyliang): 组装颜色，过滤掉相应的通道。</span></span><br><span class="line"><span class="comment"># 获取 ui 的选项</span></span><br><span class="line">sel = pm.radioButtonGrp(SINGLE_CONTROL, q=<span class="number">1</span>, sl=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 过滤颜色</span></span><br><span class="line">color = filter_color(rgb, index=sel)</span><br><span class="line">pm.artAttrPaintVertexCtx(PAINT_CTX, e=<span class="number">1</span>, cl4=<span class="built_in">tuple</span>(color))</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;release 的时候恢复之前的 顶点色 颜色配置。</p></blockquote><h3 id="release-通道颜色同步"><a href="#release-通道颜色同步" class="headerlink" title="release 通道颜色同步"></a>release 通道颜色同步</h3><blockquote><p>&emsp;&emsp;最后还需要实现将绘制完的通道同步到其他的 color set 上的功能。<br>&emsp;&emsp;因此 release 触发的时候要判断当前绘制的模式，如果绘制 rgb 就将颜色分解到对应的单通道上。<br>&emsp;&emsp;相反如果是单通道绘制就要将颜色反馈到 rgb 的主 color set 上。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">apply_color_channel</span>(<span class="params">cls</span>):</span><br><span class="line">    index = pm.radioButtonGrp(cls.SINGLE_CONTROL, q=<span class="number">1</span>, sl=<span class="number">1</span>)</span><br><span class="line">    mode = cls.OPTION_ITEMS[index + <span class="number">1</span>]</span><br><span class="line">    is_rgb = mode == <span class="string">&quot;RGB&quot;</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> cls.get_paint_nodes():</span><br><span class="line">        dag_path = node.__apimdagpath__()</span><br><span class="line">        mesh = OpenMaya.MFnMesh(dag_path)</span><br><span class="line">        color_sets = cls.get_color_sets(node)</span><br><span class="line">        main_color_set = color_sets[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        current_color_set = mesh.currentColorSetName()</span><br><span class="line"></span><br><span class="line">        main_colors = OpenMaya.MColorArray()</span><br><span class="line">        mesh.getVertexColors(main_colors, main_color_set)</span><br><span class="line">        vtx_array = cls.vertex_color_data[node.fullPathName()]</span><br><span class="line">        final_colors = OpenMaya.MColorArray()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># NOTES(timmyliang): 如果当前绘制为非单通道</span></span><br><span class="line">        <span class="keyword">if</span> is_rgb:</span><br><span class="line">            <span class="comment"># NOTES(timmyliang): 将当前的主颜色 拆分到各个通道上</span></span><br><span class="line">            <span class="keyword">for</span> channel_index, color_channel <span class="keyword">in</span> <span class="built_in">enumerate</span>(cls.CHANNELS):</span><br><span class="line">                final_colors.clear()</span><br><span class="line">                color_set = <span class="string">&quot;VertexColor&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(color_channel)</span><br><span class="line">                mesh.setCurrentColorSetName(color_set)</span><br><span class="line">                <span class="keyword">for</span> vtx_index <span class="keyword">in</span> vtx_array:</span><br><span class="line">                    main_color = main_colors[vtx_index]</span><br><span class="line">                    color = cls.filter_color(main_color, channel_index)</span><br><span class="line">                    final_colors.append(color)</span><br><span class="line">                mesh.setVertexColors(final_colors, vtx_array)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mode_index = cls.OPTION_ITEMS.index(mode) - <span class="number">2</span></span><br><span class="line">            channel_colors = OpenMaya.MColorArray()</span><br><span class="line">            fix_colors = OpenMaya.MColorArray()</span><br><span class="line">            color_set = <span class="string">&quot;VertexColor&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(mode)</span><br><span class="line">            mesh.getVertexColors(channel_colors, color_set)</span><br><span class="line">            <span class="comment"># NOTES(timmyliang): 获取单通道的颜色 回馈到主颜色上</span></span><br><span class="line">            <span class="keyword">for</span> vtx_index <span class="keyword">in</span> vtx_array:</span><br><span class="line">                channel_color = channel_colors[vtx_index]</span><br><span class="line">                main_color = main_colors[vtx_index]</span><br><span class="line">                color = cls.filter_color(channel_color, mode_index, main_color)</span><br><span class="line">                final_colors.append(color)</span><br><span class="line">                fix_color = cls.filter_color(channel_color, mode_index)</span><br><span class="line">                fix_colors.append(fix_color)</span><br><span class="line"></span><br><span class="line">            mesh.setVertexColors(fix_colors, vtx_array)</span><br><span class="line">            mesh.setCurrentColorSetName(main_color_set)</span><br><span class="line">            mesh.setVertexColors(final_colors, vtx_array)</span><br><span class="line"></span><br><span class="line">        mesh.setCurrentColorSetName(current_color_set)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过上面的方式就可以每次绘制完之后同步顶点色到对应的 color set 上。</p></blockquote><h2 id="Maya-UI-修改-amp-扩展"><a href="#Maya-UI-修改-amp-扩展" class="headerlink" title="Maya UI 修改 &amp; 扩展"></a>Maya UI 修改 &amp; 扩展</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/dfb9ca62bbf7b8121c65dfb559630a1c.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;Maya 有个非常好的设计是 UI 使用过 mel 脚本组装的，这样不需要编译就可以改动 UI，而且这部分的 mel 脚本都是开源的。<br>&emsp;&emsp;可以很清楚地知道 Maya 是如何组装出相应工具的界面。</p></blockquote><p><code>C:\Program Files\Autodesk\Maya2018\scripts\others\artAttrColorPerVertexProperties.mel</code></p><blockquote><p>&emsp;&emsp;Maya 的颜色笔刷是通过上面路径的 mel 脚本实现的。<br>&emsp;&emsp;这样可以找到对应 UI 的名字</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/e00422a70b50bbc821d9f6f33f5c448c.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;如上图所示，可以找到 <code>artAttrColorChannelChoices</code> 的名字。<br>&emsp;&emsp;然后用 cmds 命令可以对这些 UI 进行二次修改。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> cmds</span><br><span class="line">cmds.radioButtonGrp(<span class="string">&#x27;artAttrColorChannelChoices&#x27;</span>,e=<span class="number">1</span>,gbc=[<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/dfb16fc909c3bb878347cf03adda2bf5.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;比如执行上面的代码可以修改相应 UI 的背景颜色。</p></blockquote><hr><blockquote><p>&emsp;&emsp;上面已经展示了如何修改原生的 UI<br>&emsp;&emsp;这些操作需要学习 Mel 的 UI 构建方式，会有点复杂。</p></blockquote><blockquote><p>&emsp;&emsp;不过 Mel 的 example 都有案例，比如这里的UI 使用了 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/columnLayout.html">columnLayout</a><br>&emsp;&emsp;那我可以去到 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/columnLayout.html">columnLayout</a> 的文档运行案例代码进行学习。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/8d91b5c6f91a3098c1bdddfb4dadba3a.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;将代码放到代码编辑器执行。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/38cb3e0d0968119fbcab02762fd3dea9.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;查了一下 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/columnLayout.html">columnLayout</a> 的 API ，发现它竟然没有 insert 功能。<br>&emsp;&emsp;于是我找了一下 Mel Tips大全的网站 <a href="http://ewertb.mayasound.com/mel/mel.php"><strong>MEL How-To</strong></a> (上古网站，但对学习Mel很有帮助)</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/a8b9a2bf48400f9676c23ccfba27949f.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;可以找到一个 <a href="http://ewertb.mayasound.com/mel/mel.022.php">链接</a> 如何实现UI的置顶插入。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/d3657cce79e9589239f71eeb29f6bd58.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;方案一使用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/frameLayout.html">frameLayout</a> 比较繁琐<br>&emsp;&emsp;方案二则是使用一个新的 Layout 然后将旧 Layout 的 UI 删除掉。<br>&emsp;&emsp;这个方法删除 UI 对我想要的效果并不适用。</p></blockquote><blockquote><p>&emsp;&emsp;不过倒是启发了我，我想到了可以利用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/columnLayout.html#flagchildArray">childArray</a> 可以拿到 Layout 下所有的 Control 名字。<br>&emsp;&emsp;然后对每个 Control 修改 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/control.html#flagparent">parent</a> 到新的 Layout 上。</p></blockquote><h3 id="使用-cmds-嵌入-UI"><a href="#使用-cmds-嵌入-UI" class="headerlink" title="使用 cmds 嵌入 UI"></a>使用 cmds 嵌入 UI</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> cmds</span><br><span class="line">parent = cmds.radioButtonGrp(<span class="string">&#x27;artAttrColorChannelChoices&#x27;</span>,q=<span class="number">1</span>,parent=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(parent)</span><br><span class="line"><span class="comment"># ToolSettings|MainToolSettingsLayout|tabLayout1|artAttrColorPerVertex|artCommonOperationFrame|columnLayout1061|columnLayout1065</span></span><br><span class="line">window = cmds.window()</span><br><span class="line">column_layout = cmds.columnLayout()</span><br><span class="line"><span class="keyword">for</span> control <span class="keyword">in</span> cmds.layout(parent,q=<span class="number">1</span>,childArray=<span class="number">1</span>):</span><br><span class="line">    cmds.control(control, e=<span class="number">1</span>, p=column_layout)</span><br><span class="line">    </span><br><span class="line">cmds.showWindow(window)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的想法写成代码如上所示</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/c6d720eec66764ff4d8db70e56721174.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;直接实现了 UI 的乾坤大挪移<br>&emsp;&emsp;只是显示上有些不一样，主要原因是 mel 构建 UI 的时候使用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/setUITemplate.html">setUITemplate</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> cmds</span><br><span class="line">window = cmds.window()</span><br><span class="line">cmds.setUITemplate(<span class="string">&quot;OptionsTemplate&quot;</span>, pushTemplate=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">column_layout = cmds.columnLayout()</span><br><span class="line">parent = cmds.radioButtonGrp(<span class="string">&#x27;artAttrColorChannelChoices&#x27;</span>,q=<span class="number">1</span>,parent=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> control <span class="keyword">in</span> cmds.layout(parent,q=<span class="number">1</span>,childArray=<span class="number">1</span>):</span><br><span class="line">    cmds.control(control, e=<span class="number">1</span>, p=column_layout)</span><br><span class="line">    </span><br><span class="line">cmds.setUITemplate(popTemplate=<span class="number">1</span>)</span><br><span class="line">cmds.showWindow(window)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/b84161550157b6f4ff918fa439166f22.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;加上了 <code>OptionsTemplate</code> 之后 UI 的显示就保持一致了<br>&emsp;&emsp;所以在 parent control 的过程中加入自己的 UI ，就可以实现对应位置的嵌入效果。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> cmds</span><br><span class="line">window = cmds.window()</span><br><span class="line">cmds.setUITemplate(<span class="string">&quot;OptionsTemplate&quot;</span>, pushTemplate=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">column_layout = cmds.columnLayout()</span><br><span class="line">parent = cmds.radioButtonGrp(<span class="string">&#x27;artAttrColorChannelChoices&#x27;</span>,q=<span class="number">1</span>,parent=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> control <span class="keyword">in</span> cmds.layout(parent,q=<span class="number">1</span>,childArray=<span class="number">1</span>):</span><br><span class="line">    cmds.control(control, e=<span class="number">1</span>, p=column_layout)</span><br><span class="line">    <span class="keyword">if</span> control == <span class="string">&quot;artAttrColorChannelChoices&quot;</span>:</span><br><span class="line">        cmds.button(label=<span class="string">&quot;click me&quot;</span>)</span><br><span class="line">    </span><br><span class="line">cmds.setUITemplate(popTemplate=<span class="number">1</span>)</span><br><span class="line">cmds.showWindow(window)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/dce4c6b736b41b3a08ad3f20de378342.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;比如上面的效果，如此就可以在相应的位置嵌入任意的 UI</p></blockquote><blockquote><p>&emsp;&emsp;最后是怎么将 UI 嵌入到原本的位置，关键就是使用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/setParent.html">setParent</a> 命令</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> cmds</span><br><span class="line">parent = cmds.radioButtonGrp(<span class="string">&#x27;artAttrColorChannelChoices&#x27;</span>,q=<span class="number">1</span>,parent=<span class="number">1</span>)</span><br><span class="line">cmds.setParent(parent)</span><br><span class="line">cmds.setUITemplate(<span class="string">&quot;OptionsTemplate&quot;</span>, pushTemplate=<span class="number">1</span>)</span><br><span class="line">column_layout = cmds.columnLayout()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> control <span class="keyword">in</span> cmds.layout(parent,q=<span class="number">1</span>,childArray=<span class="number">1</span>):</span><br><span class="line">    cmds.control(control, e=<span class="number">1</span>, p=column_layout)</span><br><span class="line">    <span class="keyword">if</span> control == <span class="string">&quot;artAttrColorChannelChoices&quot;</span>:</span><br><span class="line">        cmds.button(label=<span class="string">&quot;click me&quot;</span>)</span><br><span class="line">    </span><br><span class="line">cmds.setUITemplate(popTemplate=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/d20d3533d76f1a8f35b804f7f6ba043b.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;如此就可以了， <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/setParent.html">setParent</a> 会将当前 UI 创建设置到之前的 Layout 下。</p></blockquote><h3 id="使用-Qt-嵌入-UI"><a href="#使用-Qt-嵌入-UI" class="headerlink" title="使用 Qt 嵌入 UI"></a>使用 Qt 嵌入 UI</h3><blockquote><p>&emsp;&emsp;既然 cmds 可以实现 UI 嵌入，那能否利用 Qt API 来实现这个效果呢？</p></blockquote><blockquote><p>&emsp;&emsp;我也想过将 Layout 转成 Qt Object 的方式进行调用。<br>&emsp;&emsp;但这个方式获取到的是 QLayout 无法使用 <code>insertWidget</code> 插入，倒是可以使用 <a href="https://doc.qt.io/qtforpython-5/PySide2/QtWidgets/QLayout.html?highlight=indexof#PySide2.QtWidgets.PySide2.QtWidgets.QLayout.addWidget">addWidget</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtWidgets</span><br><span class="line">widget = pm.uitypes.toQtObject(<span class="string">&quot;artAttrColorChannelChoices&quot;</span>)</span><br><span class="line">parent = widget.parent()</span><br><span class="line"><span class="built_in">print</span>(parent.objectName())</span><br><span class="line"><span class="comment"># columnLayout1065 objectName 和 mel 的 controlName 是一样的</span></span><br><span class="line">layout = parent.layout()</span><br><span class="line"><span class="built_in">print</span>(layout)</span><br><span class="line"><span class="comment"># &lt;PySide2.QtWidgets.QLayout object at 0x0000014DB0917648&gt;</span></span><br><span class="line">layout.addWidget(QtWidgets.QPushButton(<span class="string">&quot;asd&quot;</span>))</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/2114ac0e4b10f70c2127952a6bd92b0b.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;利用上面的方式就可以在 Layout 的最末端添加一个按钮。<br>&emsp;&emsp;上面使用了 <a href="https://help.autodesk.com/cloudhelp/2019/ENU/Maya-Tech-Docs/PyMel/generated/functions/pymel.core.uitypes/pymel.core.uitypes.toQtObject.html?highlight=toqtobject">toQtObject</a> 的 pymel API<br>&emsp;&emsp;背后调用 OpenMayaUI 库通过 objectName 查找到对应的 Qt 组件，然后 wrapInstance 将组件转换为 QObject 类型。<br>&emsp;&emsp;用 pymel 的方式比较方便。</p></blockquote><blockquote><p>&emsp;&emsp;要实现 insert 的效果可以利用 <code>takeAt</code> API 将 widget 提取出来再放回去。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtWidgets</span><br><span class="line">widget = pm.uitypes.toQtObject(<span class="string">&quot;artAttrColorChannelChoices&quot;</span>)</span><br><span class="line">parent = widget.parent()</span><br><span class="line">layout = parent.layout()</span><br><span class="line">index = layout.indexOf(widget)</span><br><span class="line">widget_list = [layout.takeAt(<span class="number">0</span>).widget() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(layout.count())]</span><br><span class="line">widget_list.insert(index,QtWidgets.QPushButton(<span class="string">&quot;click me&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> widget <span class="keyword">in</span> widget_list:</span><br><span class="line">    layout.addWidget(widget)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cdbfd5e/ffd79713320585a38c6f070133ef54c5.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;如上所示，也完全实现了 cmds 库一样的效果，使用 Qt API 就比 cmds 要灵活很多。<br>&emsp;&emsp;可以嵌入 Designer 生成的 Widget 等等。</p></blockquote><blockquote><p>&emsp;&emsp;这里只是展望了一下，我的实现还是基于 cmds 的方式。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;我的工具已经做成了 Maya 插件，启用按照插件的方式加载即可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Paint Vertex Color Tool 增强
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="Maya 工具开发" scheme="https://blog.l0v0.com/categories/CG/Maya/Maya-%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Maya CurveBrush 笔刷开发</title>
    <link href="https://blog.l0v0.com/posts/cacaf61d.html"/>
    <id>https://blog.l0v0.com/posts/cacaf61d.html</id>
    <published>2022-08-09T07:01:17.000Z</published>
    <updated>2022-12-14T02:54:16.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;最近因为比较特殊的原因，工作上突然闲下来了，于是我就去研究了我们组做的 Maya 毛发工具。<br>&emsp;&emsp;学习一下 Maya 做笔刷有哪些坑。</p></blockquote><blockquote><p>&emsp;&emsp;这次我的主要目的是模仿 <code>XGen</code> 的毛发笔刷效果，通过最小案例的实现，探讨不同的实现方案。</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/xgen_brush.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><p>官方文档: <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=GUID-496603B0-F929-45CD-B607-1CFCD3283DBE">XGen Interactive Grooming</a></p><blockquote><p>&emsp;&emsp;上面的视频就是 XGen 实现的笔刷效果，对于毛发制作非常丝滑好用。<br>&emsp;&emsp;只可惜这个笔刷不能对曲线直接生效。</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/curve_brush.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;上面是我用 C++ 写的曲线笔刷，下面我也会来探讨如何用 Python OpenMaya 结合 Qt 开发笔刷的流程。<br>&emsp;&emsp;具体代码已经开源到 <a href="https://github.com/FXTD-ODYSSEY/Maya-CurveBrush">https://github.com/FXTD-ODYSSEY/Maya-CurveBrush</a><br>&emsp;&emsp;C++ 插件提供了 2020 - 2023 支持<br>&emsp;&emsp;Python 插件有 <code>om1_curve_brush.py</code> 和 <code>om2_curve_brush.py</code></p></blockquote><h2 id="Maya-C-笔刷开发流程"><a href="#Maya-C-笔刷开发流程" class="headerlink" title="Maya C++ 笔刷开发流程"></a>Maya C++ 笔刷开发流程</h2><h3 id="Maya-C-MPxContext"><a href="#Maya-C-MPxContext" class="headerlink" title="Maya C++ MPxContext"></a>Maya C++ MPxContext</h3><blockquote><p>&emsp;&emsp;什么是 Maya Context ？ <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_Contexts_html">官方文档说明</a><br>&emsp;&emsp;Maya Context 就是一个开放的接口，可以用于自定义 鼠标 在 Viewport 上执行的逻辑，实现 绘制 修改选择物体 等操作。</p></blockquote><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_MPxContext_html">MPxContext 官方文档</a></p><blockquote><p>&emsp;&emsp;上面的链接是一个 Maya Devkit 里面的案例 <code>devkit\plug-ins\marqueeTool\marqueeTool.cpp</code><br>&emsp;&emsp;<a href="./5875a169.html">Maya CMake 构建 C++ 插件编译环境</a> 我的这篇文章有提到如何将 devkit 的源码编译生成 mll </p></blockquote><p><a href="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/marqueeTool.mll">maya2020 - marqueeTool.mll</a></p><blockquote><p>&emsp;&emsp;这里提供 Maya2020 windows 版本的 mll 插件<br>&emsp;&emsp;Maya 加载 mll 插件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line">ctx = cmds.marqueeToolContext()</span><br><span class="line">cmds.setToolTo(ctx)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;加载mll 插件后，可以使用上面的代码激活 Context</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/marqueeTool.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;上面实现的效果和默认的 框选物体是一样的。<br>&emsp;&emsp;只是框的颜色变成了自定义的 黄色。</p></blockquote><hr><blockquote><p>&emsp;&emsp;实现这个 context 需要继承实现两个类，一个是 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_html">MPxContext</a> 另一个是 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_command_html">MPxContextCommand</a><br>&emsp;&emsp;<a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_html">MPxContext</a> 类定义了鼠标拖拽 移动 等逻辑的虚函数，<a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_command_html">MPxContextCommand</a> 则是用来读取 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_html">MPxContext</a> 数据的 Mel 命令。<br>&emsp;&emsp;通过 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_command_html">MPxContextCommand</a> 就可以用 Mel 命令来修改 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_html">MPxContext</a> 的变量(比如笔刷大小之类的)</p></blockquote><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_MPxContextCommand_html">MPxContextCommand 官方文档</a></p><h3 id="Maya-C-MPxToolCommand"><a href="#Maya-C-MPxToolCommand" class="headerlink" title="Maya C++ MPxToolCommand"></a>Maya C++ MPxToolCommand</h3><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_MPxToolCommand_html">MPxToolCommand 官方文档</a></p><blockquote><p>&emsp;&emsp;上面提到的方案 Context 进行处理的时候是没有 Undo 功能的。<br>&emsp;&emsp;因此 Maya C++ 提供了 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_tool_command_html">MPxToolCommand</a> 这样将需要 undo 的逻辑放到 Command 当中实现，就可以 undo redo 操作了。<br>&emsp;&emsp;上面文档的案例来自于 <code>devkit\plug-ins\helixTool\helixTool.cpp</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/29da80e2a9a4b9a1513eb82a93e5ec30.jpeg" alt="image"><br><a href="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/helixTool.mll">maya2020 - helixTool.mll</a></p><blockquote><p>&emsp;&emsp;这里照样提供 Maya2020 windows 版本的 mll 插件<br>&emsp;&emsp;Maya 加载 mll 插件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line">ctx = cmds.helixToolContext()</span><br><span class="line">cmds.setToolTo(ctx)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;加载mll 插件后，可以使用上面的代码激活 Context</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/4bb07f53fb16d1d0b3afe0449630340c.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;<strong>需要注意这个插件只能在旧的 Viewport 生效</strong> (我测了好久才明白过来)</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/helixTool.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;这个工具可以在 Maya Viewport 拖拽一个 圆柱预览 ，这个圆柱最后生成 螺旋线。<br>&emsp;&emsp;通过 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_tool_command_html">MPxToolCommand</a> 的方式就可以让生成的 螺旋线 支持undo。</p></blockquote><hr><blockquote><p>&emsp;&emsp;为何这个工具不能在 viewport2.0 下使用</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/581b6161891458d2098e7e062cd62bf2.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;从上面的 API 列表可以看到 <code>doDrag</code> <code>doPress</code> 好几个 API 都有两个实现。<br>&emsp;&emsp;一个是只传入 event 的，这个方法只在 老 Viewport 下调用。<br>&emsp;&emsp;Viewport2.0 调用的是传入 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a> 的方法。<br>&emsp;&emsp;<a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_helix_tool_2helix_tool_8cpp_example_html">helixTool</a> 没有实现 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a> 的方法，所以 Viewport2.0 下不起作用。</p></blockquote><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Viewport_2_0_API_Maya_Viewport_2_0_API_Guide_Plug_in_Entry_Points_Tool_Contexts_html">Tool Contexts 官方文档</a></p><blockquote><p>&emsp;&emsp;官方文档被打散到 Viewport2.0 的目录下了，具体的说法可以参照上面</p></blockquote><h3 id="笔刷工具的-UI"><a href="#笔刷工具的-UI" class="headerlink" title="笔刷工具的 UI"></a>笔刷工具的 UI</h3><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_Tool_property_sheets_html">Tool property sheets 官方文档</a></p><p><code>&lt;&gt;Properties.mel</code> 实现左侧的可修改界面<br><code>&lt;&gt;Values.mel</code> 获取笔刷数值 (更新到界面上)</p><blockquote><p>&emsp;&emsp;Context 激活之后，双击可以看到工具界面</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/5839bf8a5a103ef28fd5ee770f6b67cc.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;这个界面就是遵循上面两个 mel 的方法来实现的。</p></blockquote><hr><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/29da80e2a9a4b9a1513eb82a93e5ec30.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;可以继续参考 helixTool 的源码目录，它提供了 <code>helixProperties.mel</code> 和 <code>helixValues.mel</code> 脚本<br>&emsp;&emsp;那么上面的命名 <code>&lt;&gt;</code> 是怎么决定的，为啥用 <code>helixProperties</code> 而不是 <code>helixToolProperties</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/d9ae6102b9d5478f9956c83a03beb640.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;其实这是 <code>getClassName</code> 决定的。<br>&emsp;&emsp;mel脚本并不是重点，双击 Context 调用的是 <code>helixProperties</code> <code>helixValues</code> 两个 mel 方法，如果找不到才会找同名脚本。</p></blockquote><h3 id="用-Python-生成-Mel-Proc"><a href="#用-Python-生成-Mel-Proc" class="headerlink" title="用 Python 生成 Mel Proc"></a>用 Python 生成 Mel Proc</h3><blockquote><p>&emsp;&emsp;如果要编写自定义的 UI，一定要用 mel 才能编写吗？<br>&emsp;&emsp;能否用 Python 解决问题呢？</p></blockquote><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=GUID-8A96A8DB-FD6F-434F-A878-288DD84E99C7#GUID-8A96A8DB-FD6F-434F-A878-288DD84E99C7__WS73099CC142F48755F2FC9DF120970276F7-BBF">Python function as a MEL procedure 官方文档</a> </p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/a3e91c75f34ee059bed5905ccd505edb.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;如果嫌弃使用 mel 确实可以参考上面的链接用 Python 创建的 Mel Proc</p></blockquote><p><code>C:\Program Files\Autodesk\Maya2020\Python\Lib\site-packages\maya\mel\melutils.py</code><br>具体的代码实现可以通过上面的路径找到。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/bef869fe72657a593b289fd018356fb2.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;我尝试了一下，默认 <code>returnCmd</code> 是 False 会打开文件窗口生成出 mel 脚本。<br>&emsp;&emsp;可以设置 <code>returnCmd=True</code> 这样就返回 mel 代码了。<br>&emsp;&emsp;后面可以用 <code>mel.eval</code> 来执行返回的代码</p></blockquote><blockquote><p>&emsp;&emsp;就是传入的Python <code>function</code> 如果不在 Python 模块之下会弹出警告</p></blockquote><hr><p><a href="https://help.autodesk.com/cloudhelp/2020/JPN/Maya-Tech-Docs/PyMel/generated/functions/pymel.tools.py2mel/pymel.tools.py2mel.py2melProc.html">py2melProc 文档</a> </p><blockquote><p>&emsp;&emsp;pymel 库也提供了 py2mel 的方法<br>&emsp;&emsp;使用这个方法会比 Maya 内置的处理好一些<br>&emsp;&emsp;实现的原理基本一致，都是通过 Python 构建出 Mel 代码，<br>&emsp;&emsp;Mel 代码本质就是用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/Commands/python.html">python</a> 关键字执行 Python 代码 (一会 Python 一会 Mel 的似乎挺绕的<em>(:з」∠)</em>)</p></blockquote><blockquote><p>&emsp;&emsp;pymel 还提供了 <code>mel2pyStr</code> 的方法可以直接将 mel 代码转成 Python 的版本。<br>&emsp;&emsp;这样就可以避免 python 和 mel 混写。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymel.tools <span class="keyword">import</span> mel2py</span><br><span class="line">path = <span class="string">r&quot;C:\Program Files\Autodesk\Maya2018\scripts\others\customtoolPaint.mel&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> rf:</span><br><span class="line">    content = rf.read()</span><br><span class="line">py_str = mel2py.mel2pyStr(content, pymelNamespace=<span class="string">&quot;pm&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(py_str)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;比如上面就可以将一些内置的 mel 案例转换成 python 版本。<br>&emsp;&emsp;<code>pymelNamespace</code> 可以给所有的调用加上相应的前缀。</p></blockquote><blockquote><p>&emsp;&emsp;利用上面的方法就可以将 helixTool 的 mel 脚本转为 Python 实现</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/b4775fae8fea92958f3eee9ab6d8ef0d.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;转换完成之后需要注意 function 调用，要将 <code>pm.mel</code> 去掉<br>&emsp;&emsp;因为之前 proc 编程 Python function 用 <code>pm.mel.helixSetCallbacks</code> 是调用不了的。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/09520a8d62d92800c1bd8e8f7dd8b97d.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;另外一些变量名 mel 里面可能命名为了 <code>set</code> ，如果这些是 Python 的关键字或者内置命名需要注意。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"><span class="keyword">from</span> pymel.tools <span class="keyword">import</span> py2mel</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helixProperties</span>():</span><br><span class="line">    pm.setUITemplate(<span class="string">&quot;DefaultTemplate&quot;</span>, pushTemplate=<span class="number">1</span>)</span><br><span class="line">    parent = <span class="built_in">str</span>(pm.toolPropertyWindow(q=<span class="number">1</span>, location=<span class="number">1</span>))</span><br><span class="line">    pm.setParent(parent)</span><br><span class="line">    pm.columnLayout(<span class="string">&quot;helix&quot;</span>)</span><br><span class="line">    pm.tabLayout(<span class="string">&quot;helixTabs&quot;</span>, childResizable=<span class="literal">True</span>)</span><br><span class="line">    pm.columnLayout(<span class="string">&quot;helixTab&quot;</span>)</span><br><span class="line">    pm.frameLayout(<span class="string">&quot;helixFrame&quot;</span>, cll=<span class="literal">True</span>, l=<span class="string">&quot;Helix Options&quot;</span>, cl=<span class="literal">False</span>)</span><br><span class="line">    pm.columnLayout(<span class="string">&quot;helixOptions&quot;</span>)</span><br><span class="line">    pm.separator(style=<span class="string">&quot;none&quot;</span>)</span><br><span class="line">    pm.intSliderGrp(</span><br><span class="line">        <span class="string">&quot;numCVs&quot;</span>, field=<span class="number">1</span>, minValue=<span class="number">20</span>, maxValue=<span class="number">100</span>, value=<span class="number">1</span>, label=<span class="string">&quot;Number of CVs&quot;</span></span><br><span class="line">    )</span><br><span class="line">    pm.checkBoxGrp(<span class="string">&quot;upsideDownGrp&quot;</span>, numberOfCheckBoxes=<span class="number">1</span>, l1=<span class="string">&quot; &quot;</span>, label=<span class="string">&quot;Upside Down&quot;</span>)</span><br><span class="line">    pm.setParent(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">    <span class="comment"># helixOptions</span></span><br><span class="line">    pm.setParent(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">    <span class="comment"># helixFrame</span></span><br><span class="line">    pm.setParent(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">    <span class="comment"># helixTab</span></span><br><span class="line">    pm.setParent(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">    <span class="comment"># helixTabs</span></span><br><span class="line">    pm.setParent(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">    <span class="comment"># helix</span></span><br><span class="line">    <span class="comment"># Name the tabs; -tl does not allow tab labelling upon creation</span></span><br><span class="line">    pm.tabLayout(<span class="string">&quot;helixTabs&quot;</span>, tl=(<span class="string">&quot;helixTab&quot;</span>, <span class="string">&quot;Tool Defaults&quot;</span>), e=<span class="number">1</span>)</span><br><span class="line">    pm.setUITemplate(popTemplate=<span class="number">1</span>)</span><br><span class="line">    helixSetCallbacks(parent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helixSetCallbacks</span>(<span class="params">parent</span>):</span><br><span class="line">    pm.setParent(parent)</span><br><span class="line">    pm.checkBoxGrp(</span><br><span class="line">        <span class="string">&quot;upsideDownGrp&quot;</span>,</span><br><span class="line">        e=<span class="number">1</span>,</span><br><span class="line">        on1=<span class="keyword">lambda</span> *args: pm.helixToolContext(pm.currentCtx(), upsideDown=<span class="literal">True</span>, e=<span class="number">1</span>),</span><br><span class="line">        of1=<span class="keyword">lambda</span> *args: pm.helixToolContext(pm.currentCtx(), upsideDown=<span class="literal">False</span>, e=<span class="number">1</span>),</span><br><span class="line">    )</span><br><span class="line">    pm.intSliderGrp(</span><br><span class="line">        <span class="string">&quot;numCVs&quot;</span>,</span><br><span class="line">        e=<span class="number">1</span>,</span><br><span class="line">        cc=<span class="keyword">lambda</span> *args: pm.helixToolContext(pm.currentCtx(), numCVs=args[<span class="number">0</span>], e=<span class="number">1</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helixValues</span>(<span class="params">toolName</span>):</span><br><span class="line">    parent=(<span class="built_in">str</span>(pm.toolPropertyWindow(q=<span class="number">1</span>, location=<span class="number">1</span>)) + <span class="string">&quot;|helix|helixTabs|helixTab&quot;</span>)</span><br><span class="line">    pm.setParent(parent)</span><br><span class="line">    icon=<span class="string">&quot;helixTool.xpm&quot;</span></span><br><span class="line">    <span class="built_in">help</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">    pm.mel.toolPropertySetCommon(toolName, icon, <span class="built_in">help</span>)</span><br><span class="line">    pm.frameLayout(<span class="string">&#x27;helixFrame&#x27;</span>, en=<span class="literal">True</span>, e=<span class="number">1</span>, cl=<span class="literal">False</span>)</span><br><span class="line">    helixOptionValues(toolName)</span><br><span class="line">    pm.mel.toolPropertySelect(<span class="string">&#x27;helix&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helixOptionValues</span>(<span class="params">toolName</span>):</span><br><span class="line">    </span><br><span class="line">    cv_num = <span class="number">0</span></span><br><span class="line">    cv_num=<span class="built_in">int</span>(pm.mel.<span class="built_in">eval</span>(<span class="string">&quot;helixToolContext -q -numCVs &quot;</span> + toolName))</span><br><span class="line">    pm.intSliderGrp(<span class="string">&#x27;numCVs&#x27;</span>, e=<span class="number">1</span>, value=cv_num)</span><br><span class="line">    cv_num=<span class="built_in">int</span>(pm.mel.<span class="built_in">eval</span>(<span class="string">&quot;helixToolContext -q -upsideDown &quot;</span> + toolName))</span><br><span class="line">    <span class="keyword">if</span> cv_num:</span><br><span class="line">        pm.checkBoxGrp(<span class="string">&#x27;upsideDownGrp&#x27;</span>, e=<span class="number">1</span>, value1=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pm.checkBoxGrp(<span class="string">&#x27;upsideDownGrp&#x27;</span>, e=<span class="number">1</span>, value1=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">py2mel.py2melProc(helixProperties, procName=<span class="string">&quot;helixProperties&quot;</span>)</span><br><span class="line">py2mel.py2melProc(helixValues, procName=<span class="string">&quot;helixValues&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;经过一些修改之后，可以实现用 Python 的方式来编写 Mel Proc。<br>&emsp;&emsp;只是还是需要熟悉一下 mel UI 构建的语法。</p></blockquote><h2 id="Maya-C-CurveBrush"><a href="#Maya-C-CurveBrush" class="headerlink" title="Maya C++ CurveBrush"></a>Maya C++ CurveBrush</h2><blockquote><p>&emsp;&emsp;通过上面一番探讨之后，我们理清楚了做一个笔刷需要什么。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/31a73f4c83ccff69f92bc03bde499e99.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;所以我在 C++ 代码层面拆分三个头文件，分别对应 <code>MPxContext</code> <code>MPxContextCommand</code> <code>MPxContextToolCommand</code> 的实现。<br>&emsp;&emsp;如何开发也可以参考 helixTool 的代码。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/9fff8010770bff57783e3e1fdd93120a.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;注册插件的时候需要同时注册 <code>MPxContextCommand</code> 和 <code>MPxContextToolCommand</code><br>&emsp;&emsp;这样 Maya 就知道这两个命令是关联在一起的， <code>MPxContext</code> 里面调用 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_context_html#a8e65ca6ff1d97d4b49ac94897462dc72">newToolCommand</a> 方法就可以获取到 <code>MPxContextToolCommand</code></p></blockquote><h3 id="笔刷属性调整"><a href="#笔刷属性调整" class="headerlink" title="笔刷属性调整"></a>笔刷属性调整</h3><blockquote><p>&emsp;&emsp;我先要让笔刷按住 B 键的时候可以实现 大小 调整。<br>&emsp;&emsp;默认 Maya API 没有提供键盘事件的监听。<br>&emsp;&emsp;于是查找官方的案例，找到了 <code>devkit\plug-ins\grabUVMain.cpp</code>   </p></blockquote><p><a href="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/grabUV.mll">maya2020 - grabUV.mll</a></p><blockquote><p>&emsp;&emsp;这里提供 Maya2020 windows 版本的 mll 插件<br>&emsp;&emsp;Maya 加载 mll 插件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line">ctx = cmds.grabUVContext()</span><br><span class="line">cmds.setToolTo(ctx)</span><br></pre></td></tr></table></figure><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/grabUV.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;这个插件可以按住 B 键调整笔刷的大小。<br>&emsp;&emsp;原理是利用 Qt 的 eventFilter 监听全局的键盘响应，所以编译的 include 路径需要有 Qt 的头文件，默认的 include 路径只有 Qt 头文件压缩包，需要解压缩来索引。</p></blockquote><blockquote><p>&emsp;&emsp;所以我也是用同样的方式监听是否有按 B 键。<br>&emsp;&emsp;左键拖拽调整笔刷大小，中键拖拽调整笔刷强度。</p></blockquote><h3 id="曲线衰变颜色"><a href="#曲线衰变颜色" class="headerlink" title="曲线衰变颜色"></a>曲线衰变颜色</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/63b2f06b1f337413c94aee582df735de.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;笔刷覆盖的范围呈现颜色，这个是用 <code>Viewport2.0</code> 的 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a> 实现的。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/8917c29ae2838d566878dd7f92c712a3.jpeg" alt="image"><br><a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a></p><blockquote><p>&emsp;&emsp;<a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a> 提供了 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html#ab7479336abc018548fe68277932d848a">mesh</a> 的 API 进行曲线模型等的绘制。<br>&emsp;&emsp;最重要的第一点是可以传入颜色数组，根据每个点自定义颜色，其他的 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html#abe48ac82aa2ede6d0efd3c9cfadb068c">line</a> API 无法实现这个功能</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MStatus <span class="title">curveBrushContext::doPtrMoved</span><span class="params">(MEvent &amp;event, MHWRender::MUIDrawManager &amp;drawMgr, <span class="type">const</span> MHWRender::MFrameContext &amp;context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">short</span> x, y;</span><br><span class="line">    event.<span class="built_in">getPosition</span>(x, y);</span><br><span class="line">    mBrushCenterScreenPoint = <span class="built_in">MPoint</span>(x, y);</span><br><span class="line">    <span class="keyword">auto</span> radius = mBrushConfig.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    drawMgr.<span class="built_in">beginDrawable</span>();</span><br><span class="line">    <span class="keyword">if</span> (bFalloffMode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> index = <span class="number">0</span>; index &lt; objDagPathArray.<span class="built_in">length</span>(); ++index)</span><br><span class="line">        &#123;</span><br><span class="line">            MPointArray pointArray;</span><br><span class="line">            MColorArray colorArray;</span><br><span class="line">            <span class="function">MFnNurbsCurve <span class="title">curveFn</span><span class="params">(objDagPathArray[index])</span></span>;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> segmentCount = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> pointIndex = <span class="number">0</span>; pointIndex &lt; segmentCount; ++pointIndex)</span><br><span class="line">            &#123;</span><br><span class="line">                MPoint point;</span><br><span class="line">                <span class="keyword">auto</span> param = curveFn.<span class="built_in">findParamFromLength</span>(curveFn.<span class="built_in">length</span>() * pointIndex / segmentCount);</span><br><span class="line">                curveFn.<span class="built_in">getPointAtParam</span>(param, point, MSpace::kWorld);</span><br><span class="line">                pointArray.<span class="built_in">append</span>(point);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// NOTE(timmyliang): draw falloff</span></span><br><span class="line">                <span class="type">short</span> x_pos, y_pos;</span><br><span class="line">                view.<span class="built_in">worldToView</span>(point, x_pos, y_pos);</span><br><span class="line">                <span class="function">MPoint <span class="title">screenPoint</span><span class="params">(x_pos, y_pos)</span></span>;</span><br><span class="line">                <span class="keyword">auto</span> distance = (mBrushCenterScreenPoint - screenPoint).<span class="built_in">length</span>();</span><br><span class="line">                <span class="keyword">auto</span> field = <span class="number">1</span> - distance / radius;</span><br><span class="line">                <span class="comment">// NOTE(timmyliang): transparent</span></span><br><span class="line">                colorArray.<span class="built_in">append</span>(distance &gt; radius ? <span class="built_in">MColor</span>(<span class="number">0.f</span>) : <span class="built_in">MColor</span>(field, field, field));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            drawMgr.<span class="built_in">setLineWidth</span>(<span class="number">12.0f</span>);</span><br><span class="line">            drawMgr.<span class="built_in">mesh</span>(MHWRender::MUIDrawManager::kLineStrip, pointArray, <span class="literal">NULL</span>, &amp;colorArray);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    drawMgr.<span class="built_in">setColor</span>(<span class="built_in">MColor</span>(<span class="number">1.f</span>, <span class="number">1.f</span>, <span class="number">1.f</span>));</span><br><span class="line">    drawMgr.<span class="built_in">setLineWidth</span>(<span class="number">2.0f</span>);</span><br><span class="line">    drawMgr.<span class="built_in">circle2d</span>(mBrushCenterScreenPoint, radius);</span><br><span class="line"></span><br><span class="line">    drawMgr.<span class="built_in">endDrawable</span>();</span><br><span class="line">    <span class="keyword">return</span> MS::kSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;那么问题就变成怎么获取顶点上色了，如果曲线的顶点数量很少就很难有好的显示效果。</p></blockquote><blockquote><p>&emsp;&emsp;因此这里使用 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_fn_nurbs_curve_html#a6fc77e351e95b453079bbad771940d9f">findParamFromLength</a> <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_fn_nurbs_curve_html#ab2f1acb5a0653b12d7430d5786ef2e3e">getPointAtParam</a>  的方式重新采样曲线的顶点。<br>&emsp;&emsp;对采样的顶点再判断一下是否在笔刷的圆圈范围内，范围外的附上透明的颜色，范围内的根据距离附上黑白色。</p></blockquote><h3 id="曲线-CV-移动"><a href="#曲线-CV-移动" class="headerlink" title="曲线 CV 移动"></a>曲线 CV 移动</h3><blockquote><p>&emsp;&emsp;首先要获取 drag 偏移的向量。<br>&emsp;&emsp;通过 <code>doPress</code> 方法可以获取到点击的时候的向量偏移。<br>&emsp;&emsp;再通过 <code>doDrag</code> 获取拖拽的时候鼠标的位置。<br>&emsp;&emsp;两个位置坐标就可以得到偏移的向量。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MStatus <span class="title">curveBrushContext::doPress</span><span class="params">(MEvent &amp;event, MHWRender::MUIDrawManager &amp;drawMgr, <span class="type">const</span> MHWRender::MFrameContext &amp;context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    view = M3dView::<span class="built_in">active3dView</span>();</span><br><span class="line">    event.<span class="built_in">getPosition</span>(startPosX, startPosY);</span><br><span class="line">    fStartBrushSize = mBrushConfig.<span class="built_in">size</span>();</span><br><span class="line">    fStartBrushStrength = mBrushConfig.<span class="built_in">strength</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MS::kSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">MStatus <span class="title">curveBrushContext::doDrag</span><span class="params">(MEvent &amp;event, MHWRender::MUIDrawManager &amp;drawMgr, <span class="type">const</span> MHWRender::MFrameContext &amp;context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    view.<span class="built_in">refresh</span>(<span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="type">short</span> currentPosX, currentPosY;</span><br><span class="line">    event.<span class="built_in">getPosition</span>(currentPosX, currentPosY);</span><br><span class="line">    <span class="keyword">auto</span> currentPos = <span class="built_in">MPoint</span>(currentPosX, currentPosY);</span><br><span class="line"></span><br><span class="line">    <span class="function">MPoint <span class="title">start</span><span class="params">(startPosX, startPosY)</span></span>;</span><br><span class="line">    MVector delta = <span class="built_in">MVector</span>(currentPos - start);</span><br><span class="line"></span><br><span class="line">    drawMgr.<span class="built_in">beginDrawable</span>();</span><br><span class="line">    drawMgr.<span class="built_in">setColor</span>(<span class="built_in">MColor</span>(<span class="number">1.f</span>, <span class="number">1.f</span>, <span class="number">1.f</span>));</span><br><span class="line">    drawMgr.<span class="built_in">setLineWidth</span>(<span class="number">2.0f</span>);</span><br><span class="line">    <span class="comment">// NOTE(timmyliang): hold down `B` key</span></span><br><span class="line">    <span class="keyword">if</span> (eDragMode == kBrushSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">float</span> deltaValue;</span><br><span class="line">        <span class="type">char</span> info[<span class="number">64</span>];</span><br><span class="line">        <span class="comment">// NOTES(timmyliang): left mouse for size</span></span><br><span class="line">        <span class="keyword">if</span> (event.<span class="built_in">mouseButton</span>() == MEvent::kLeftMouse)</span><br><span class="line">        &#123;</span><br><span class="line">            deltaValue = delta.x &gt; <span class="number">0</span> ? delta.<span class="built_in">length</span>() : -delta.<span class="built_in">length</span>();</span><br><span class="line">            mBrushConfig.<span class="built_in">setSize</span>(fStartBrushSize + deltaValue);</span><br><span class="line">            <span class="built_in">sprintf</span>(info, <span class="string">&quot;Brush Size: %.2f&quot;</span>, mBrushConfig.<span class="built_in">size</span>());</span><br><span class="line">            drawMgr.<span class="built_in">text2d</span>(currentPos, info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// NOTES(timmyliang): middle mouse for strength</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (event.<span class="built_in">mouseButton</span>() == MEvent::kMiddleMouse)</span><br><span class="line">        &#123;</span><br><span class="line">            deltaValue = delta.y &gt; <span class="number">0</span> ? delta.<span class="built_in">length</span>() : -delta.<span class="built_in">length</span>();</span><br><span class="line">            mBrushConfig.<span class="built_in">setStrength</span>(fStartBrushStrength + deltaValue);</span><br><span class="line">            <span class="built_in">sprintf</span>(info, <span class="string">&quot;Brush Strength: %.2f&quot;</span>, mBrushConfig.<span class="built_in">strength</span>());</span><br><span class="line">            drawMgr.<span class="built_in">text2d</span>(currentPos, info);</span><br><span class="line">        &#125;</span><br><span class="line">        drawMgr.<span class="built_in">line2d</span>(start, <span class="built_in">MPoint</span>(startPosX, startPosY + mBrushConfig.<span class="built_in">strength</span>() * <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MPoint startNearPos, startFarPos, currNearPos, currFarPos;</span><br><span class="line">        view.<span class="built_in">viewToWorld</span>(currentPosX, currentPosY, currNearPos, currFarPos);</span><br><span class="line">        view.<span class="built_in">viewToWorld</span>(startPosX, startPosY, startFarPos, startFarPos);</span><br><span class="line">        <span class="comment">// NOTE(timmyliang): use tool command for undo</span></span><br><span class="line">        curveBrushTool *cmd = (curveBrushTool *)<span class="built_in">newToolCommand</span>();</span><br><span class="line">        cmd-&gt;<span class="built_in">setStrength</span>(mBrushConfig.<span class="built_in">strength</span>());</span><br><span class="line">        cmd-&gt;<span class="built_in">setRadius</span>(mBrushConfig.<span class="built_in">size</span>());</span><br><span class="line">        cmd-&gt;<span class="built_in">setMoveVector</span>((currFarPos - startFarPos).<span class="built_in">normal</span>());</span><br><span class="line">        cmd-&gt;<span class="built_in">setStartPoint</span>(start);</span><br><span class="line">        cmd-&gt;<span class="built_in">setDagPathArray</span>(objDagPathArray);</span><br><span class="line">        cmd-&gt;<span class="built_in">redoIt</span>();</span><br><span class="line">        cmd-&gt;<span class="built_in">finalize</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    drawMgr.<span class="built_in">circle2d</span>(start, mBrushConfig.<span class="built_in">size</span>());</span><br><span class="line">    drawMgr.<span class="built_in">endDrawable</span>();</span><br><span class="line">    <span class="keyword">return</span> MS::kSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>doDrag</code> 还会判断是否按住 <code>B</code> 键，按住的话就调整笔刷的大小。<br>&emsp;&emsp;反之则调用 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_context_html#a8e65ca6ff1d97d4b49ac94897462dc72">newToolCommand</a>  执行 CV 移动的逻辑</p></blockquote><hr><blockquote><p>&emsp;&emsp;<code>ToolCommand</code> 会获取曲线上 CV 点的位置，将空间坐标转为屏幕坐标。<br>&emsp;&emsp;这样可以判断这些 CV 点是否在笔刷范围内。<br>&emsp;&emsp;如果在范围的 CV 点根据笔刷提供的方向进行偏移。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MStatus <span class="title">curveBrushTool::redoIt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    MVector offsetVector = moveVector * <span class="number">0.002</span> * strength;</span><br><span class="line">    M3dView view = M3dView::<span class="built_in">active3dView</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// NOTE(timmyliang): move curves cv in radius</span></span><br><span class="line">    <span class="type">short</span> x_pos, y_pos;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> index = <span class="number">0</span>; index &lt; dagPathArray.<span class="built_in">length</span>(); ++index)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">MFnNurbsCurve <span class="title">curveFn</span><span class="params">(dagPathArray[index])</span></span>;</span><br><span class="line">        std::map&lt;<span class="type">int</span>, MVector&gt; offsetMap;</span><br><span class="line">        <span class="keyword">for</span> (MItCurveCV <span class="built_in">cvIter</span>(dagPathArray[index]); !cvIter.<span class="built_in">isDone</span>(); cvIter.<span class="built_in">next</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            MPoint pos = cvIter.<span class="built_in">position</span>(MSpace::kWorld);</span><br><span class="line">            <span class="type">int</span> cvIndex = cvIter.<span class="built_in">index</span>();</span><br><span class="line">            curvePointMap[index][cvIndex] = pos;</span><br><span class="line">            view.<span class="built_in">worldToView</span>(pos, x_pos, y_pos);</span><br><span class="line">            <span class="keyword">if</span> ((startPoint - <span class="built_in">MPoint</span>(x_pos, y_pos)).<span class="built_in">length</span>() &lt; radius)</span><br><span class="line">            &#123;</span><br><span class="line">                offsetMap[cvIndex] = pos + offsetVector;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;it : offsetMap)</span><br><span class="line">        &#123;</span><br><span class="line">            curveFn.<span class="built_in">setCV</span>(it.first, it.second, MSpace::kWorld);</span><br><span class="line">        &#125;</span><br><span class="line">        curveFn.<span class="built_in">updateCurve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MStatus::kSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_it_curve_c_v_html">MItCurveCV</a> 遍历曲线上所有的 CV 点。<br>&emsp;&emsp;利用 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_fn_nurbs_curve_html#a48b56f4698e7040883822351234c8c63">setCV</a> 方法可以实现顶点的偏移<br>&emsp;&emsp;C++ 这边我发现不能在 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_it_curve_c_v_html">MItCurveCV</a> 的遍历过程中调用 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_fn_nurbs_curve_html#a48b56f4698e7040883822351234c8c63">setCV</a> ，它会导致遍历中断。<br>&emsp;&emsp;但是用 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_it_curve_c_v_html">MItCurveCV</a> 提供的 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_it_curve_c_v_html#a0cb9d81962afa9947eb5aa0b4465f217">setCVPosition</a> 无法实现位置的刷新。<br>&emsp;&emsp;最后只好将 CV序号 和 位置通过 Map 保存起来，通过 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_fn_nurbs_curve_html#a48b56f4698e7040883822351234c8c63">setCV</a> API 去偏移。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MStatus <span class="title">curveBrushTool::undoIt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// NOTE(timmyliang): reset point position</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;kv : curvePointMap)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">MFnNurbsCurve <span class="title">curveFn</span><span class="params">(dagPathArray[kv.first])</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;it : kv.second)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cvIndex = it.first;</span><br><span class="line">            MPoint pos = it.second;</span><br><span class="line">            curveFn.<span class="built_in">setCV</span>(cvIndex, pos, MSpace::kWorld);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MStatus::kSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 <code>curvePointMap</code> 变量保存了上一次所有 CV 点的位置，undo 只要遍历这个字典去重置 CV 位置即可。</p></blockquote><h2 id="OpenMaya-2-0-笔刷开发"><a href="#OpenMaya-2-0-笔刷开发" class="headerlink" title="OpenMaya 2.0 笔刷开发"></a>OpenMaya 2.0 笔刷开发</h2><blockquote><p>&emsp;&emsp;既然 C++ 可以开发出如上看到的笔刷，理论上也可以通过 Python OpenMaya 库进行笔刷开发。<br>&emsp;&emsp;但是我发现 OpenMaya 1.0 不支持 Viewport 2.0 的 API，比如上面关键的 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a><br>&emsp;&emsp;在 OpenMaya1.0 下是不不存在的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> OpenMayaRender</span><br><span class="line">OpenMayaRender.MUIDrawManager </span><br><span class="line"><span class="comment"># Error: AttributeError: file &lt;maya console&gt; line 2: &#x27;module&#x27; object has no attribute &#x27;MUIDrawManager&#x27; # </span></span><br><span class="line"><span class="keyword">from</span> maya.api <span class="keyword">import</span> OpenMayaRender</span><br><span class="line">OpenMayaRender.MUIDrawManager</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;可以看到 OpenMaya 2.0 才有 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__py_ref_class_open_maya_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a></p></blockquote><p><a href="https://matiascodesal.com/blog/maya-python-api-20-it-ready-yet/">https://matiascodesal.com/blog/maya-python-api-20-it-ready-yet/</a></p><blockquote><p>&emsp;&emsp;以前 18 年的时候还看到有人了文章介绍 OpenMaya 2.0 到底是否可以已经完善了。<br>&emsp;&emsp;OpenMaya 2.0 与 OpenMaya 1.0 相比还缺了挺多的 C++ 类的。<br>&emsp;&emsp;而且 OpenMaya2.0 的案例都有一些代码错误，比如 <code>plug-ins\python\api2\py2LassoTool.py</code> (已经是 2023 的最新版本了)<br>&emsp;&emsp;这实在是令人失望，脚本的第 224 行有明显 <code>true</code> 使用不当，并且 <code>MItCurveCV</code> 这个类 OpenMaya 2.0 不支持的。<br>&emsp;&emsp;我启用这个脚本框选 CV 点直接给我报错<em>(:з」∠)</em><br>&emsp;&emsp;也因为 OpenMaya 2.0 各种不完善， <a href="http://tw.l0v0.com/#%F0%9F%91%A8%E2%80%8D%F0%9F%92%BBmottosso">👨‍💻mottosso</a> 大佬才会做自己的 Pyd wrapper 封装 C++ API <a href="https://github.com/mottosso/cmdc">cmdc</a> ，只是目前的进度还需要更多人加入支持开发。</p></blockquote><hr><blockquote><p>&emsp;&emsp;那是用 OpenMaya 2.0 能否完成我上面的 C++ 曲线笔刷的复刻呢？<br>&emsp;&emsp;我查了一下，发现 Maya 2020 之后添加了 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_tool_command_html">MPxToolCommand</a> 命令，似乎可以实现和 C++ 一样的 undo 命令。<br>&emsp;&emsp;然而我的实测却让我非常失望。</p></blockquote><p><a href="https://github.com/FXTD-ODYSSEY/Maya-CurveBrush/blob/main/plug-ins/om2_curve_brush.py">https://github.com/FXTD-ODYSSEY/Maya-CurveBrush/blob/main/plug-ins/om2_curve_brush.py</a></p><h3 id="MPxContextCommand-缺失-syntax-parser-方法"><a href="#MPxContextCommand-缺失-syntax-parser-方法" class="headerlink" title="MPxContextCommand 缺失 syntax parser 方法"></a>MPxContextCommand 缺失 syntax parser 方法</h3><blockquote><p>&emsp;&emsp;基于 OpenMaya 2.0 版本的插件我已经写完了，只是被它的不完整气得不轻。<br>&emsp;&emsp;首先 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_context_command_html">MPxContextCommand</a> 缺失了 <code>syntax</code> <code>parser</code> 方法<br>&emsp;&emsp;即便提供了 <code>doQueryFlags</code> <code>doEditFlags</code> 的 API 但是没法和 C++ 一样进行调用，但是 OpenMaya 1.0 提供了 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_command_html#a7d98dc216bb8f7089f649230e06f6da9">_syntax</a> <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_command_html#aa367dd5b853c97af707d0fb44aa37971">_parser</a> 方法给 Python 调用。</p></blockquote><h3 id="registerContextCommand-不支持-MPxToolCommand-注册"><a href="#registerContextCommand-不支持-MPxToolCommand-注册" class="headerlink" title="registerContextCommand 不支持 MPxToolCommand 注册"></a>registerContextCommand 不支持 MPxToolCommand 注册</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    pluginFn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pluginFn.registerContextCommand(CONTEXT_NAME, CurveBrushContextCmd.creator)</span><br><span class="line">        <span class="comment"># TODO(timmyliang): not support MPxToolCommand registered</span></span><br><span class="line">        <span class="comment"># pluginFn.registerContextCommand(</span></span><br><span class="line">        <span class="comment">#     CONTEXT_NAME,</span></span><br><span class="line">        <span class="comment">#     CurveBrushContextCmd.creator,</span></span><br><span class="line">        <span class="comment">#     CONTEXT_TOOL_NAME,</span></span><br><span class="line">        <span class="comment">#     CurveBrushTool.creator,</span></span><br><span class="line">        <span class="comment">#     CurveBrushTool.newSyntax,</span></span><br><span class="line">        <span class="comment"># )</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register command: %s\n&quot;</span> % CONTEXT_NAME)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;OpenMaya 2.0 终于在 Maya 2020 提供了 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_tool_command_html">MPxToolCommand</a> 的接口。<br>&emsp;&emsp;但是 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_tool_command_html">MPxToolCommand</a> 需要通过 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_1_1_m_fn_plugin_html#af866d7403152d0a96ab838a9dd16d460">registerContextCommand</a> 来注册进去。<br>&emsp;&emsp;但是它目前不支持 5 个参数的调用，导致 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_tool_command_html">MPxToolCommand</a> 无法注册。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Error: TypeError: file F:/repo/CMakeMaya/modules/Maya-CurveBrush/plug-ins/om2_curve_brush.py line 448: function takes exactly 2 arguments (5 given) # </span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;注册的时候会提示 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_1_1_m_fn_plugin_html#af866d7403152d0a96ab838a9dd16d460">registerContextCommand</a> 只接受两个参数。</p></blockquote><h3 id="MPxToolCommand-doFinalize-无法传入参数"><a href="#MPxToolCommand-doFinalize-无法传入参数" class="headerlink" title="MPxToolCommand doFinalize 无法传入参数"></a>MPxToolCommand doFinalize 无法传入参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CurveBrushTool</span>(omui.MPxToolCommand):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">finalize</span>(<span class="params">self</span>):</span><br><span class="line">        command = om.MArgList()</span><br><span class="line">        command.addArg(self.commandString)</span><br><span class="line">        <span class="keyword">for</span> flag, config <span class="keyword">in</span> self.flags_data.items():</span><br><span class="line">            long_flag = config.get(<span class="string">&quot;long&quot;</span>)</span><br><span class="line">            command.addArg(flag)</span><br><span class="line">            command.addArg(<span class="built_in">getattr</span>(self, long_flag[<span class="number">1</span>:]))</span><br><span class="line">        <span class="comment"># TODO(timmyliang): not accept the command argument</span></span><br><span class="line">        <span class="comment"># return self.doFinalize(command)</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;虽然 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_1_1_m_fn_plugin_html#af866d7403152d0a96ab838a9dd16d460">registerContextCommand</a> 无法注册 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_tool_command_html">MPxToolCommand</a> 导致 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_context_html#a8e65ca6ff1d97d4b49ac94897462dc72">newToolCommand</a> 没有正常的返回。<br>&emsp;&emsp;但我可以单独实例化 <code>MPxToolCommand</code> 从而实现 undo<br>&emsp;&emsp;可是还是不行，而且这个坑爹的情况明显是官方的问题。<br>&emsp;&emsp;<a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_tool_command_html#adf6d293860cfea905a954f2931f7c3c5">doFinalize</a> 明明可以接受一个 <code>MArgList</code> 类型的参数，但是这个 Python 函数却不接受任何参数<em>(:з」∠)</em></p></blockquote><h3 id="OpenMaya-2-0-展示"><a href="#OpenMaya-2-0-展示" class="headerlink" title="OpenMaya 2.0 展示"></a>OpenMaya 2.0 展示</h3><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/om2.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;虽然 2.0 有上述的诸多问题，笔刷的基础功能还是可以实现的。<br>&emsp;&emsp;只是 undo 功能解决不了，倒是可以将曲线的 tweak 操作转移到另一个 Command 上从而实现 undo 的。<br>&emsp;&emsp;不过我这里就点到为止，主要踩了 OpenMaya 2.0 的坑，对它好感度降低了不少<em>(:з」∠)</em></p></blockquote><h2 id="Python-Qt-Overlay-实现自定义绘制"><a href="#Python-Qt-Overlay-实现自定义绘制" class="headerlink" title="Python Qt Overlay 实现自定义绘制"></a>Python Qt Overlay 实现自定义绘制</h2><blockquote><p>&emsp;&emsp;上面提到了 OpenMaya 1.0 缺失了 <code>MUIDrawManager</code> 所以无法在 Viewport 2.0 下进行图像绘制。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/581b6161891458d2098e7e062cd62bf2.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;C++ 文档也注明了带 <code>MUIDrawManager</code> 是无法在 Python 下使用的。<br>&emsp;&emsp;我也测试了不传入 <code>MUIDrawManager</code> 的几个方法，他们只能在 Legacy Viewport 下响应触发。</p></blockquote><blockquote><p>&emsp;&emsp;那还有什么方法不用 C++ 也可以实现 Python 的绘制呢？<br>&emsp;&emsp;这就可以参考一个非常棒的 Maya Python 工具 <a href="https://github.com/wiremas/spore">spore</a></p></blockquote><blockquote><p>&emsp;&emsp;spore 也实现了自己的笔刷工具，并且对低版本 Maya 兼容。<br>&emsp;&emsp;它的做法不是通过 Maya API 实现，而是利用 Qt 的 API 进行绘制。<br>&emsp;&emsp;首先对 Maya 的 Viewport 叠加一层透明的 QWidget 层，通过 <a href="https://doc.qt.io/qtforpython-5/PySide2/QtWidgets/QWidget.html?highlight=paintevent#PySide2.QtWidgets.PySide2.QtWidgets.QWidget.paintEvent">paintEvent</a> 的实现，绘制自定义图形叠加到 Viewport 上。</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/om1.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;实现效果如上图，基本和 Maya API 的绘制效果很接近。</p></blockquote><h3 id="Overlay-组件实现"><a href="#Overlay-组件实现" class="headerlink" title="Overlay 组件实现"></a>Overlay 组件实现</h3><blockquote><p>&emsp;&emsp;组件叠加的方案我之前的文章也有过 <a href="./5905c2c9.html">Unreal Python 路径定位启动器</a><br>&emsp;&emsp;核心思路就是取消 Widget 的边框，忽略输入影响，透明化背景并且永远保持在最前面。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CanvasOverlay</span>(QtWidgets.QWidget):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, context</span>):</span><br><span class="line">        <span class="comment"># type: (CurveBrushContext) -&gt; <span class="literal">None</span></span></span><br><span class="line">        <span class="built_in">super</span>(CanvasOverlay, self).__init__()</span><br><span class="line">        self.setWindowFlags(</span><br><span class="line">            QtCore.Qt.FramelessWindowHint</span><br><span class="line">            | QtCore.Qt.SplashScreen</span><br><span class="line">            | QtCore.Qt.WindowStaysOnTopHint</span><br><span class="line">            | QtCore.Qt.WindowTransparentForInput</span><br><span class="line">        )</span><br><span class="line">        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)</span><br><span class="line">        self.setAttribute(QtCore.Qt.WA_NoSystemBackground)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这样就是一个无边框透明的窗口，如果不加上颜色用户是无感知的。</p></blockquote><p><a href="https://github.com/wiremas/spore/blob/b1ec511017cc9ba05d9034321369e5e404550232/scripts/ui/canvas.py#L18">spore 参考</a></p><h3 id="多个-Viewport-叠加支持"><a href="#多个-Viewport-叠加支持" class="headerlink" title="多个 Viewport 叠加支持"></a>多个 Viewport 叠加支持</h3><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/overlay.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><br>注: 这里的 Overlay 加上了大色块方便观察。<br><br>&gt; &emsp;&emsp;我添加了多个 Viewport 的 Overlay 支持，spore 默认是只对笔刷激活时的 Viewport 进行 Overlay 操作。<br>&gt; &emsp;&emsp;如果切换到多视图或者单独的 Viewport 窗口就会让 Overlay 显示不正常。<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AppFilter</span>(QtCore.QObject):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, canvas</span>):</span><br><span class="line">        <span class="comment"># type: (CurveBrushContext) -&gt; <span class="literal">None</span></span></span><br><span class="line">        <span class="built_in">super</span>(AppFilter, self).__init__()</span><br><span class="line">        self.canvas = canvas</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eventFilter</span>(<span class="params">self, receiver, event</span>):</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span>() == QtCore.QEvent.MouseButtonPress:</span><br><span class="line">            widget = QtWidgets.QApplication.widgetAt(QtGui.QCursor.pos())</span><br><span class="line">            panel = <span class="built_in">isinstance</span>(widget, QtCore.QObject) <span class="keyword">and</span> widget.parent()</span><br><span class="line">            name = panel <span class="keyword">and</span> panel.objectName()</span><br><span class="line">            <span class="keyword">if</span> name:</span><br><span class="line">                is_model_editor = cmds.objectTypeUI(name, i=<span class="string">&quot;modelEditor&quot;</span>)</span><br><span class="line">                self.canvas.setVisible(is_model_editor)</span><br><span class="line">                <span class="keyword">if</span> is_model_editor:</span><br><span class="line">                    QtCore.QTimer.singleShot(<span class="number">0</span>, self.canvas.setup_active_viewport)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(AppFilter, self).eventFilter(receiver, event)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CurveBrushContext</span>(OpenMayaMPx.MPxContext):</span><br><span class="line">    <span class="comment"># 省略 ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOnSetup</span>(<span class="params">self</span>):</span><br><span class="line">        self.canvas = CanvasOverlay(self)</span><br><span class="line">        <span class="comment"># NOTES(timmyliang): 获取 QApplication 进行监听</span></span><br><span class="line">        app = QtWidgets.QApplication.instance()</span><br><span class="line">        app_filter = AppFilter(self.canvas)</span><br><span class="line">        app.installEventFilter(app_filter)</span><br></pre></td></tr></table></figure><br><br>&gt; &emsp;&emsp;我这里的做法是利用 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_html#a658f83d3a196c6c8e77e7ed2655eb6d7">toolOnSetup</a> API ，激活笔刷的时候监听 Maya QApplication 全局的点击事件<br>&gt; &emsp;&emsp;如果点击的 Widget 是 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/modelEditor.html">modelEditor</a> 就将 overlay 同步过去。<br>&gt; &emsp;&emsp;Qt 的 objectName 就是 Maya 的 UI control Name ，所以从 <code>objectName()</code> 获取的 API 可以直接用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/objectTypeUI.html">objectTypeUI</a> 判断类型<br>&gt; &emsp;&emsp;利用这个方法任何 Viewport 点击都可以直接 resize Overlay 上去。<br><br>&gt; &emsp;&emsp;本来不想搞得那么复杂的，但是 Maya 原生的监听方案不起作用 <a href="https://stackoverflow.com/q/60470709">stackoverflow</a><br>&gt; &emsp;&emsp;stackoverflow 的回答是使用 timer 定时触发，也不是很理想，所以还是借助 Qt API 监听鼠标按键的方法最好。<br><br>### 监听 Viewport 事件<br><br>&gt; &emsp;&emsp;正如上面所说的 <code>doDrag</code> <code>doPress</code> 等一系列 API 在 Viewport 2.0 下是失效的。<br>&gt; &emsp;&emsp;通过 Qt 的 <a href="https://doc.qt.io/qtforpython-5/PySide2/QtCore/QObject.html?highlight=installeventfilter#PySide2.QtCore.PySide2.QtCore.QObject.installEventFilter">installEventFilter</a> 可以实现对 Viewport 的事件监听。<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shiboken2</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide2.QtWidgets <span class="keyword">import</span> QWidget</span><br><span class="line"><span class="keyword">from</span> PySide2.QtCore <span class="keyword">import</span> QObject</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">active_view</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; return the active 3d view &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> omui.M3dView.active3dView()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">active_view_wdg</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; return the active 3d view wrapped in a QWidget &quot;&quot;&quot;</span></span><br><span class="line">    view = active_view()</span><br><span class="line">    active_view_widget = shiboken2.wrapInstance(long(view.widget()), QWidget)</span><br><span class="line">    <span class="keyword">return</span> active_view_widget</span><br></pre></td></tr></table></figure><br><br><a href="https://github.com/wiremas/spore/blob/b1ec511017cc9ba05d9034321369e5e404550232/scripts/utils/window_utils.py#L15">spore 参考</a><br><br>&gt; &emsp;&emsp;通过 OpenMaya 1.0 的 API 可以获取当前激活的 Viewport QWidget<br>&gt; &emsp;&emsp;拦截这个 Viewport QWidget 的事件可以实现鼠标点击拖拽等等的响应。<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MouseFilter</span>(QtCore.QObject):</span><br><span class="line">    wheel = QtCore.Signal(QtCore.QEvent)</span><br><span class="line">    moved = QtCore.Signal(QtCore.QEvent)</span><br><span class="line">    clicked = QtCore.Signal(QtCore.QEvent)</span><br><span class="line">    dragged = QtCore.Signal(QtCore.QEvent)</span><br><span class="line">    released = QtCore.Signal(QtCore.QEvent)</span><br><span class="line">    entered = QtCore.Signal()</span><br><span class="line">    leaved = QtCore.Signal()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(MouseFilter, self).__init__(*args, **kwargs)</span><br><span class="line">        self.is_clicked = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eventFilter</span>(<span class="params">self, receiver, event</span>):</span><br><span class="line">        event_type = event.<span class="built_in">type</span>()</span><br><span class="line">        <span class="keyword">if</span> event_type == QtCore.QEvent.MouseMove:</span><br><span class="line">            self.moved.emit(event)</span><br><span class="line">            <span class="keyword">if</span> self.is_clicked:</span><br><span class="line">                self.dragged.emit(event)</span><br><span class="line">        <span class="keyword">elif</span> (</span><br><span class="line">            event_type == QtCore.QEvent.MouseButtonPress</span><br><span class="line">            <span class="keyword">or</span> event_type == QtCore.QEvent.MouseButtonDblClick</span><br><span class="line">        ):</span><br><span class="line">            self.is_clicked = <span class="literal">True</span></span><br><span class="line">            self.clicked.emit(event)</span><br><span class="line">        <span class="keyword">elif</span> event_type == QtCore.QEvent.MouseButtonRelease:</span><br><span class="line">            self.is_clicked = <span class="literal">False</span></span><br><span class="line">            self.released.emit(event)</span><br><span class="line">        <span class="keyword">elif</span> event_type == QtCore.QEvent.Enter:</span><br><span class="line">            self.entered.emit()</span><br><span class="line">        <span class="keyword">elif</span> event_type == QtCore.QEvent.Leave:</span><br><span class="line">            self.leaved.emit()</span><br><span class="line">        <span class="keyword">elif</span> event_type == QtCore.QEvent.Wheel:</span><br><span class="line">            self.wheel.emit(event)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(MouseFilter, self).eventFilter(receiver, event)</span><br><span class="line"></span><br><span class="line">viewport = active_view_wdg()</span><br><span class="line">mouse_filter = MouseFilter()</span><br><span class="line">viewport.installEventFilter(mouse_filter)</span><br></pre></td></tr></table></figure><br><br>&gt; &emsp;&emsp;通过上面的方式就可以拦截 viewport 的 event 通过 <code>MouseFilter</code> 的信号槽做相应的触发。<br><br>### 绘制实现<br><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/ca328c45d71ebda1041ee55d0eac4a97.jpeg" alt="image"><br><br>&gt; &emsp;&emsp;参考上图可以看到，Qt API 基本上和 Maya API 绘制的效果差不多。<br>&gt; &emsp;&emsp;Maya API 的 <code>MUIDrawManager</code> 提供了 mesh API 来绘制复杂图形。<br>&gt; &emsp;&emsp;Qt API 并没有类似的方法，不过 Qt 也有 <a href="https://doc.qt.io/qtforpython-5/PySide2/QtGui/QGradient.html">QGradient</a><br>&gt; &emsp;&emsp;通过 <a href="https://doc.qt.io/qtforpython-5/PySide2/QtGui/QLinearGradient.html#qlineargradient">QLinearGradient</a> 可以实现上面的效果。<br>&gt; &emsp;&emsp;同样地需要对曲线进行二次采样，提高分段数。<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">    self.draw_shape(self.create_brush_cricle(), QtCore.Qt.white, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> self.is_press_B:</span><br><span class="line">        self.draw_shape(self.create_brush_line(), QtCore.Qt.white, <span class="number">2</span>)</span><br><span class="line">    self.draw_text(self._message_info)</span><br><span class="line">    <span class="keyword">for</span> curve, data <span class="keyword">in</span> self.color_data.items():</span><br><span class="line">        self.draw_shape(data.get(<span class="string">&quot;points&quot;</span>), data.get(<span class="string">&quot;colors&quot;</span>), <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>(CanvasOverlay, self).paintEvent(event)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_brush_cricle</span>(<span class="params">self, count=<span class="number">60</span></span>):</span><br><span class="line">    shape = []</span><br><span class="line">    radius = self.radius</span><br><span class="line">    pt = self.start_pos <span class="keyword">if</span> self.is_press_B <span class="keyword">else</span> self.current_pos</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(count + <span class="number">1</span>):</span><br><span class="line">        theta = math.radians(<span class="number">360</span> * index / count)</span><br><span class="line">        pos_x = pt.x() + radius * math.cos(theta)</span><br><span class="line">        pos_y = pt.y() + radius * math.sin(theta)</span><br><span class="line">        shape.append(QtCore.QPointF(pos_x, pos_y))</span><br><span class="line">    <span class="keyword">return</span> shape</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_brush_line</span>(<span class="params">self</span>):</span><br><span class="line">    shape = []</span><br><span class="line">    start_pt = self.start_pos <span class="keyword">if</span> self.is_press_B <span class="keyword">else</span> self.current_pos</span><br><span class="line">    shape.append(start_pt)</span><br><span class="line">    shape.append(QtCore.QPoint(start_pt.x(), start_pt.y() - self.strength))</span><br><span class="line">    <span class="keyword">return</span> shape</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_shape</span>(<span class="params">self, line_shapes, colors, width=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(line_shapes) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    colors = colors <span class="keyword">or</span> QtCore.Qt.white</span><br><span class="line">    painter = QtGui.QPainter(self)</span><br><span class="line"></span><br><span class="line">    painter.setRenderHint(painter.Antialiasing)</span><br><span class="line">    painter.begin(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        <span class="built_in">isinstance</span>(colors, Iterable)</span><br><span class="line">        <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(colors, six.string_types)</span><br><span class="line">        <span class="keyword">and</span> <span class="built_in">len</span>(colors) == <span class="built_in">len</span>(line_shapes)</span><br><span class="line">    ):</span><br><span class="line">        <span class="comment"># NOTES(timmyliang): paint falloff</span></span><br><span class="line">        <span class="keyword">for</span> index, point <span class="keyword">in</span> <span class="built_in">enumerate</span>(line_shapes[:-<span class="number">1</span>]):</span><br><span class="line">            start_point = point</span><br><span class="line">            end_point = line_shapes[index + <span class="number">1</span>]</span><br><span class="line">            grandient_color = QtGui.QLinearGradient(start_point, end_point)</span><br><span class="line">            start_color = colors[index]</span><br><span class="line">            end_color = colors[index + <span class="number">1</span>]</span><br><span class="line">            grandient_color.setColorAt(<span class="number">0</span>, start_color)</span><br><span class="line">            grandient_color.setColorAt(<span class="number">1</span>, end_color)</span><br><span class="line">            pen = QtGui.QPen(grandient_color, width)</span><br><span class="line">            pen.setCapStyle(QtCore.Qt.RoundCap)</span><br><span class="line">            pen.setJoinStyle(QtCore.Qt.RoundJoin)</span><br><span class="line">            painter.setPen(pen)</span><br><span class="line">            painter.drawLine(start_point, end_point)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        path = QtGui.QPainterPath()</span><br><span class="line">        path.moveTo(line_shapes[<span class="number">0</span>])</span><br><span class="line">        [path.lineTo(point) <span class="keyword">for</span> point <span class="keyword">in</span> line_shapes]</span><br><span class="line">        color = QtGui.QColor(colors)</span><br><span class="line">        pen = QtGui.QPen(color, width)</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawPath(path)</span><br><span class="line"></span><br><span class="line">    painter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_text</span>(<span class="params">self, text, pos=<span class="literal">None</span>, color=QtCore.Qt.white, width=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    painter = QtGui.QPainter(self)</span><br><span class="line">    pen = QtGui.QPen(color, width)</span><br><span class="line">    painter.setPen(pen)</span><br><span class="line">    pos = pos <span class="keyword">or</span> self.current_pos + QtCore.QPoint(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">    painter.drawText(pos, text)</span><br><span class="line">    painter.end()</span><br></pre></td></tr></table></figure><br><br>&gt; &emsp;&emsp;上面是绘制用到的 一些 API<br>&gt; &emsp;&emsp;核心就是 <code>draw_shape</code> 里面如果传入了多个 color ，获取color每个顶点画一条渐变的线<br>&gt; &emsp;&emsp;多条线组合成圆形，由此有了衰变颜色的圆形曲线。<br><br>&gt; &emsp;&emsp;其他的绘制比如 绘制文字，Qt 有 <code>drawText</code> API<br>&gt; &emsp;&emsp;绘制圆圈可以利用 <code>sin</code> <code>cos</code> 数学函数来生成圆形的顶点进行绘制。<br><br><br>### 踩坑注意<br><br>&gt; &emsp;&emsp;<code>QtCore.QPoint</code> 和 <code>OpenMaya.MPoint</code> 两者的 Y 轴坐标起始不一样，所以通过 M3dView 将世界坐标转换为屏幕坐标的时候需要额外的处理。<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">world_to_view</span>(<span class="params">position, invertY=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    convert the given 3d position to  2d viewport coordinates</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    view = OpenMayaUI.M3dView.active3dView()</span><br><span class="line">    arg_x = OpenMaya.MScriptUtil(<span class="number">0</span>)</span><br><span class="line">    arg_y = OpenMaya.MScriptUtil(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    arg_x_ptr = arg_x.asShortPtr()</span><br><span class="line">    arg_y_ptr = arg_y.asShortPtr()</span><br><span class="line">    view.worldToView(position, arg_x_ptr, arg_y_ptr)</span><br><span class="line">    x_pos = arg_x.getShort(arg_x_ptr)</span><br><span class="line">    y_pos = arg_y.getShort(arg_y_ptr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> invertY:</span><br><span class="line">        y_pos = view.portHeight() - y_pos</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (x_pos, y_pos)</span><br></pre></td></tr></table></figure><br><br><a href="https://github.com/wiremas/spore/blob/b1ec511017cc9ba05d9034321369e5e404550232/scripts/utils/window_utils.py#L30">spore 参考</a><br><br>## 基于 draggerContext 笔刷<br><br><a href="https://www.highend3d.com/maya/script/curve-paint-and-tweak-tool-for-maya#google_vignette">Curve paint and tweak tool</a><br><br><br><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/ysv.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;最后在 <a href="https://www.highend3d.com/maya/script/curve-paint-and-tweak-tool-for-maya#google_vignette">highend3d</a> 里面也找到了一个直接 tweak CV 点的方案。<br>&emsp;&emsp;这个方案采用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/draggerContext.html">draggerContext</a> 实现<br>&emsp;&emsp;<a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/draggerContext.html">draggerContext</a> 的案例就可以实现在 viewport 拖拽的时候实现回调。<br>&emsp;&emsp;<code>highend3d</code> 的 ysd 曲线工具集还结合软选择的范围作为笔刷移动的范围参数，这是非常聪明的做法。<br>&emsp;&emsp;也可以通过这个方式实现拖拽生成一条曲线。<br>&emsp;&emsp;结合 OpenMaya API 可以做更多的事情，比如散布物体等等，用这个的方案比起 从零构建一个 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_html">MPxContext</a> 要简单许多。</p></blockquote><blockquote><p>&emsp;&emsp;绘制功能还是无法通过 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/draggerContext.html">draggerContext</a> 解决，不过可以用上面 Qt Overlay 方案来解决。</p></blockquote><h3 id="ysv-工具优化"><a href="#ysv-工具优化" class="headerlink" title="ysv 工具优化"></a>ysv 工具优化</h3><blockquote><p>&emsp;&emsp;从 <code>highend3d</code> 下载的 ysv 曲线工具可以用，但是有几个问题</p><ol><li>直接调用 PySide 导致不兼容</li><li>没有做 Python3 兼容</li><li>部分代码在新版本代码下运行有 BUG</li></ol></blockquote><h4 id="PySide-兼容"><a href="#PySide-兼容" class="headerlink" title="PySide 兼容"></a>PySide 兼容</h4><blockquote><p>&emsp;&emsp;将 PySide 的导入转成 Qt.py 的导入<br>&emsp;&emsp;Qt.py 库的引入则是采用 submodule 的方式放到 scripts 目录下。</p></blockquote><h4 id="Python3-兼容"><a href="#Python3-兼容" class="headerlink" title="Python3 兼容"></a>Python3 兼容</h4><blockquote><p>&emsp;&emsp;Python3 兼容使用 Python内置的 lib2to3 库进行转换 <a href="https://cainiaojiaocheng.com/Python/docs/3.8/library/2to3">参考链接</a></p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mayapy -m lib2to3 -w F:\repo\Maya-CurveBrush\scripts\ysv\ysvView.py</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过这个方式就可以自动将所有的 print 括号加上等操作。省去繁琐的人工操作。<br>&emsp;&emsp;我当时是写了一个脚本，批量执行，执行完之后调用 black 和 isort 风格化代码。</p></blockquote><blockquote><p>&emsp;&emsp;生成完之后会将之前的文件加上 <code>.bak</code> 后缀，如果没有问题就可以把 bak 删除。</p></blockquote><h4 id="BUG-修复"><a href="#BUG-修复" class="headerlink" title="BUG 修复"></a>BUG 修复</h4><blockquote><p>&emsp;&emsp;原代码获取当前摄像机是通过下面的方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymel.core <span class="keyword">import</span> *</span><br><span class="line">modelEditor(getPanel(wf=<span class="number">1</span>), e=<span class="number">1</span>, nurbsCurves=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;但是如果当前 focus 的 panel 不是 modelEditor 就遭殃了。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymel.core <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> mp <span class="keyword">in</span> getPanel(<span class="built_in">type</span>=<span class="string">&quot;modelPanel&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span> modelEditor(mp, q=<span class="number">1</span>, av=<span class="number">1</span>):</span><br><span class="line">        modelEditor(mp, e=<span class="number">1</span>, nurbsCurves=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;所以我把代码改成上面的效果。</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> crv <span class="keyword">in</span> self.inViewCurves:</span><br><span class="line">    <span class="keyword">for</span> cv <span class="keyword">in</span> [crv.cv[<span class="number">0</span>], crv.cv[-<span class="number">1</span>]]:</span><br><span class="line">        cv = <span class="built_in">str</span>(cv) <span class="comment"># fix add here</span></span><br><span class="line">        setAttr(cv + <span class="string">&quot;.xv&quot;</span>, lock=<span class="number">1</span>)</span><br><span class="line">        setAttr(cv + <span class="string">&quot;.yv&quot;</span>, lock=<span class="number">1</span>)</span><br><span class="line">        setAttr(cv + <span class="string">&quot;.zv&quot;</span>, lock=<span class="number">1</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;用 pymel 获取 cv 点之后，直接将 <code>NurbsCurveCV</code> 与字符串相加<br>&emsp;&emsp;但是 <code>NurbsCurveCV</code> 有自己的相加逻辑，所以这里需要加上字符串转换可以修复 BUG。</p></blockquote><h2 id="artisan-笔刷"><a href="#artisan-笔刷" class="headerlink" title="artisan 笔刷"></a>artisan 笔刷</h2><blockquote><p>&emsp;&emsp;<a href="./77ed9d8.html">Maya 根据贴图在模型表面散列物体</a> 以前也写过散列物体的文章，不过实现方式是非笔刷的。<br>&emsp;&emsp;利用 artisan 就可以实现笔刷的方式散布物体了。</p></blockquote><p>官方文档: <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=GUID-72D60883-07A4-4536-AE72-226A2AD0845E">Overview of MEL script painting</a></p><blockquote><p>&emsp;&emsp;官方提到有 <code>spherePaint</code> <code>geometryPaint</code> <code>emitterPaint</code> 几个案例。<br>&emsp;&emsp;具体的代码可以在 mel 脚本库里面找到 eg: <code>C:\Program Files\Autodesk\Maya2018\scripts\others\spherePaint.mel</code><br>&emsp;&emsp;从最简单的 <code>spherePaint</code> 介绍</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/d0c515791bd2c9e96e5347e4cb3865dc.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;在 <code>Modify</code> 页面下找到 <code>Paint Scripts Tool</code> 工具<br>&emsp;&emsp;打开工具属性面板，在 <code>Setup</code> 标签页的 <code>Tool setup cmd</code> 输入 <code>spherePaint</code> 就可以激活笔刷</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/spherePaint.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;激活工具之后就可以模型上刷 Sphere</p></blockquote><hr><blockquote><p>&emsp;&emsp;只可惜 artisan 笔刷它不响应 <code>NurbsCurve</code> ，只支持 mesh。<br>&emsp;&emsp;所以无法实现上面探讨的 曲线笔刷 的功能。<br>&emsp;&emsp;artisan 方案更适合颜色绘制或者是物体散布。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;以上就是我发现的 Maya 笔刷的多种使用姿势。<br>&emsp;&emsp;后面有机会可以再探讨一下 artisan 笔刷的关于顶点色编辑相关的内容。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Maya 笔刷开发的各种姿势汇总
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/CG/Maya/C/"/>
    
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
  </entry>
  
  <entry>
    <title>Unreal C++ 工具开发最小实践</title>
    <link href="https://blog.l0v0.com/posts/cab0d099.html"/>
    <id>https://blog.l0v0.com/posts/cab0d099.html</id>
    <published>2022-07-15T08:00:58.000Z</published>
    <updated>2022-12-14T02:54:16.862Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;Unreal 的学习浩瀚且博杂，有时候一个最小 Demo 就是很好的学习起点。<br>&emsp;&emsp;想起我以前翻阅 UE 的源码一大堆的文件，看得我是无比头疼。<br>&emsp;&emsp;偶然间发现 CSDN YakSue 写了好多篇 Unreal 工具开发的 介绍。<br>&emsp;&emsp;虽然没有配上 Github 链接，但是源码都在文章里面体现了。<br>&emsp;&emsp;对于工具开发的不同模块都大有裨益。<br>&emsp;&emsp;于是我将这些内容整合到一起，并且详细讲解其中实现的核心点。</p></blockquote><h2 id="Custom-Asset"><a href="#Custom-Asset" class="headerlink" title="Custom Asset"></a>Custom Asset</h2><p><a href="https://yaksue.blog.csdn.net/article/details/107646900">https://yaksue.blog.csdn.net/article/details/107646900</a><br><a href="https://github.com/FXTD-ODYSSEY/Unreal-Playground/tree/main/Plugins/Yaksue/TestAssetEditorPlg">https://github.com/FXTD-ODYSSEY/Unreal-Playground/tree/main/Plugins/Yaksue/TestAssetEditorPlg</a></p><blockquote><p>&emsp;&emsp;创建一个自定义的 Asset 需要有三个类</p><ol><li>Asset (UObject)</li><li>AssetFactory (UFactory)</li><li>AssetTypeActions (FAssetTypeActions_Base)</li></ol></blockquote><blockquote><p>&emsp;&emsp;Asset 描述对象本身的数据<br>&emsp;&emsp;AssetFactory 描述如何创建对象<br>&emsp;&emsp;AssetTypeActions 返回对象显示的信息</p></blockquote><blockquote><p>&emsp;&emsp;<code>AssetTypeActions</code> 包含方法 <code>GetName</code> <code>GetTypeColor</code> <code>GetSupportedClass</code> <code>GetCategories</code> 用来描述对应的信息。<br>&emsp;&emsp;<code>GetCategories</code> 会分配 Asset 所属的位置。</p></blockquote><blockquote><p>&emsp;&emsp;这个方式默认打开的窗口是 Details Panel.<br>&emsp;&emsp;如果想要自定义打开的窗口需要添加 <code>FAssetEditorToolkit</code> 类<br>&emsp;&emsp;<code>AssetTypeActions</code> 添加 <code>OpenAssetEditor</code> 方法将 Toolkit 生成并初始化。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FAssetEditorToolkit</span><br><span class="line">  GetToolkitFName</span><br><span class="line">  GetBaseToolkitName</span><br><span class="line">  GetWorldCentricTabPrefix</span><br><span class="line">  GetWorldCentricTabColorScale</span><br><span class="line">  Initialize</span><br><span class="line">  RegisterTabSpawners</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>RegisterTabSpawners</code> 通过这个方法注册生产 Tab 的 ID<br>&emsp;&emsp;后续通过 <code>Initialize</code> 方法调用 AddTab 将 Register 的 Tab 生成。<br>&emsp;&emsp;最后通过 <code>FAssetEditorToolkit::InitAssetEditor</code> 完成 Toolkit 的初始化</p></blockquote><hr><blockquote><p>&emsp;&emsp;如果不想将 Asset 放到 <code>EAssetTypeCategories::Misc</code> 的分类中。<br>&emsp;&emsp;也可以构建一个新的标签附上去。<br>&emsp;&emsp;只是需要将 factory 相关的 <code>GetMenuCategories</code> 放入去掉。<br>&emsp;&emsp;我之前没有去掉，一直很疑惑为啥自定义菜单没有生效。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FYaksueTestAssetTypeActions::<span class="built_in">FYaksueTestAssetTypeActions</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> 注册新的分类</span></span><br><span class="line">IAssetTools &amp;AssetTools = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FAssetToolsModule&gt;(<span class="string">&quot;AssetTools&quot;</span>).<span class="built_in">Get</span>();</span><br><span class="line">    AssetCategory = AssetTools.<span class="built_in">RegisterAdvancedAssetCategory</span>(<span class="built_in">FName</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Custom Assets&quot;</span>)), <span class="built_in">LOCTEXT</span>(<span class="string">&quot;CustomAssetCategory&quot;</span>, <span class="string">&quot;Custom Assets&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">uint32 <span class="title">FYaksueTestAssetTypeActions::GetCategories</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> AssetCategory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;构造函数注册新的分类，头文件需要添加上定义 <code>FYaksueTestAssetTypeActions();</code> <code>EAssetTypeCategories::Type AssetCategory;</code></p></blockquote><h2 id="Custom-Filter"><a href="#Custom-Filter" class="headerlink" title="Custom Filter"></a>Custom Filter</h2><p><a href="https://yaksue.blog.csdn.net/article/details/120929455">https://yaksue.blog.csdn.net/article/details/120929455</a><br><a href="https://github.com/FXTD-ODYSSEY/Unreal-Playground/tree/main/Plugins/Yaksue/TestCustomFilter">https://github.com/FXTD-ODYSSEY/Unreal-Playground/tree/main/Plugins/Yaksue/TestCustomFilter</a></p><blockquote><p>&emsp;&emsp;继承 <code>UContentBrowserFrontEndFilterExtension</code> 可以通过 override <code>AddFrontEndFilterExtensions</code> 方法扩展 filter。<br>&emsp;&emsp;生成一个 <code>FFrontendFilter</code> 子类，然后通过 <code>AddFrontEndFilterExtensions</code> 将过滤对象添加到过滤列表里面。<br>&emsp;&emsp;<code>FFrontendFilter</code> 最核心的方法就是 <code>PassesFilter</code> 它会将每个 item 传到这个函数返回 bool 来决定是否显示。</p></blockquote><!-- TODO PassesFilter item wrong --><h2 id="Slate"><a href="#Slate" class="headerlink" title="Slate"></a>Slate</h2><p><a href="https://yaksue.blog.csdn.net/article/details/110084013">https://yaksue.blog.csdn.net/article/details/110084013</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Put your tab content here!</span></span><br><span class="line"><span class="built_in">SNew</span>(SOverlay)</span><br><span class="line">+ SOverlay::<span class="built_in">Slot</span>()<span class="comment">//底层</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SHorizontalBox)</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>().<span class="built_in">FillWidth</span>(<span class="number">0.3f</span>)<span class="comment">//占30%</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)<span class="number">1</span></span><br><span class="line">]</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>().<span class="built_in">FillWidth</span>(<span class="number">0.7f</span>)<span class="comment">//占70%</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SVerticalBox)</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>().<span class="built_in">FillHeight</span>(<span class="number">0.5f</span>)<span class="comment">//占50%</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">]</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>().<span class="built_in">FillHeight</span>(<span class="number">0.5f</span>)<span class="comment">//占50%</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">+ SOverlay::<span class="built_in">Slot</span>()<span class="comment">//顶层</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SHorizontalBox)</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>().<span class="built_in">FillWidth</span>(<span class="number">1.0f</span>)<span class="comment">//占满剩余空间</span></span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>().<span class="built_in">AutoWidth</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SVerticalBox)</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>().<span class="built_in">FillHeight</span>(<span class="number">1.0f</span>)<span class="comment">//占满剩余空间</span></span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>().<span class="built_in">AutoHeight</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SBox)</span><br><span class="line">.<span class="built_in">HeightOverride</span>(<span class="number">128</span>)</span><br><span class="line">.<span class="built_in">WidthOverride</span>(<span class="number">128</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>().<span class="built_in">FillHeight</span>(<span class="number">1.0f</span>)<span class="comment">//占满剩余空间</span></span><br><span class="line">]</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>().<span class="built_in">FillWidth</span>(<span class="number">1.0f</span>)<span class="comment">//占满剩余空间</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用 Unreal Slate 构建窗口，通过代码的属性结构来描述 UI 的构成和配置。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201124215104568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM0MTIzOTE=,size_16,color_FFFFFF,t_70#pic_center" alt="alt"></p><h2 id="DockTab-Layout"><a href="#DockTab-Layout" class="headerlink" title="DockTab Layout"></a>DockTab Layout</h2><p><a href="https://yaksue.blog.csdn.net/article/details/109321869">https://yaksue.blog.csdn.net/article/details/109321869</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FTestLayoutWindowModule::StartupModule</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module</span></span><br><span class="line"></span><br><span class="line">FTestLayoutWindowStyle::<span class="built_in">Initialize</span>();</span><br><span class="line">FTestLayoutWindowStyle::<span class="built_in">ReloadTextures</span>();</span><br><span class="line"></span><br><span class="line">FTestLayoutWindowCommands::<span class="built_in">Register</span>();</span><br><span class="line"></span><br><span class="line">PluginCommands = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> FUICommandList);</span><br><span class="line"></span><br><span class="line">PluginCommands-&gt;<span class="built_in">MapAction</span>(</span><br><span class="line">FTestLayoutWindowCommands::<span class="built_in">Get</span>().OpenLayoutWindow,</span><br><span class="line">FExecuteAction::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FTestLayoutWindowModule::PluginButtonClicked),</span><br><span class="line"><span class="built_in">FCanExecuteAction</span>());</span><br><span class="line"></span><br><span class="line">FLevelEditorModule&amp; LevelEditorModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FLevelEditorModule&gt;(<span class="string">&quot;LevelEditor&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">TSharedPtr&lt;FExtender&gt; MenuExtender = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FExtender</span>());</span><br><span class="line">MenuExtender-&gt;<span class="built_in">AddMenuExtension</span>(<span class="string">&quot;WindowLayout&quot;</span>, EExtensionHook::After, PluginCommands, FMenuExtensionDelegate::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FTestLayoutWindowModule::AddMenuExtension));</span><br><span class="line"></span><br><span class="line">LevelEditorModule.<span class="built_in">GetMenuExtensibilityManager</span>()-&gt;<span class="built_in">AddExtender</span>(MenuExtender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">TSharedPtr&lt;FExtender&gt; ToolbarExtender = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> FExtender);</span><br><span class="line">ToolbarExtender-&gt;<span class="built_in">AddToolBarExtension</span>(<span class="string">&quot;Settings&quot;</span>, EExtensionHook::After, PluginCommands, FToolBarExtensionDelegate::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FTestLayoutWindowModule::AddToolbarExtension));</span><br><span class="line"></span><br><span class="line">LevelEditorModule.<span class="built_in">GetToolBarExtensibilityManager</span>()-&gt;<span class="built_in">AddExtender</span>(ToolbarExtender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">RegisterNomadTabSpawner</span>(TestLayoutWindowTabName, FOnSpawnTab::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FTestLayoutWindowModule::OnSpawnPluginTab))</span><br><span class="line">.<span class="built_in">SetDisplayName</span>(<span class="built_in">LOCTEXT</span>(<span class="string">&quot;FTestLayoutWindowTabTitle&quot;</span>, <span class="string">&quot;TestLayoutWindow&quot;</span>))</span><br><span class="line">.<span class="built_in">SetMenuType</span>(ETabSpawnerMenuType::Hidden);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ! InnerTab的内容：</span></span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">RegisterNomadTabSpawner</span>(InnerTabName, FOnSpawnTab::<span class="built_in">CreateLambda</span>([](<span class="type">const</span> FSpawnTabArgs&amp; SpawnTabArgs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="built_in">SNew</span>(SDockTab)</span><br><span class="line">.<span class="built_in">TabRole</span>(ETabRole::NomadTab)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(STextBlock)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromString</span>(<span class="string">&quot;InnerTab&quot;</span>))</span><br><span class="line">];</span><br><span class="line">&#125;))</span><br><span class="line">.<span class="built_in">SetDisplayName</span>(<span class="built_in">LOCTEXT</span>(<span class="string">&quot;InnerTab&quot;</span>, <span class="string">&quot;InnerTab&quot;</span>))</span><br><span class="line">.<span class="built_in">SetMenuType</span>(ETabSpawnerMenuType::Hidden);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ! InnerTab2的内容：</span></span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">RegisterNomadTabSpawner</span>(InnerTabName2, FOnSpawnTab::<span class="built_in">CreateLambda</span>([](<span class="type">const</span> FSpawnTabArgs&amp; SpawnTabArgs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="built_in">SNew</span>(SDockTab)</span><br><span class="line">.<span class="built_in">TabRole</span>(ETabRole::NomadTab)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(STextBlock)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromString</span>(<span class="string">&quot;InnerTab2&quot;</span>))</span><br><span class="line">];</span><br><span class="line">&#125;))</span><br><span class="line">.<span class="built_in">SetDisplayName</span>(<span class="built_in">LOCTEXT</span>(<span class="string">&quot;InnerTab2&quot;</span>, <span class="string">&quot;InnerTab2&quot;</span>))</span><br><span class="line">.<span class="built_in">SetMenuType</span>(ETabSpawnerMenuType::Hidden);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;核心处理是在插件加载的时候 <code>StartupModule</code> 调用 <code>RegisterNomadTabSpawner</code> 注册 Tab</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FTestLayoutWindowModule::PluginButtonClicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">InvokeTab</span>(TestLayoutWindowTabName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;点击 GUI 会触发 Tab 生成，调用 <code>OnSpawnPluginTab</code> 方法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedRef&lt;SDockTab&gt; <span class="title">FTestLayoutWindowModule::OnSpawnPluginTab</span><span class="params">(<span class="type">const</span> FSpawnTabArgs&amp; SpawnTabArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//原来的分页：</span></span><br><span class="line"><span class="type">const</span> TSharedRef&lt;SDockTab&gt; NomadTab = <span class="built_in">SNew</span>(SDockTab)</span><br><span class="line">.<span class="built_in">TabRole</span>(ETabRole::NomadTab);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建TabManager</span></span><br><span class="line"><span class="keyword">if</span> (!TabManager.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">TabManager = FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">NewTabManager</span>(NomadTab);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建布局：</span></span><br><span class="line"><span class="keyword">if</span> (!TabManagerLayout.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">TabManagerLayout = FTabManager::<span class="built_in">NewLayout</span>(<span class="string">&quot;TestLayoutWindow&quot;</span>)</span><br><span class="line">-&gt;<span class="built_in">AddArea</span></span><br><span class="line">(</span><br><span class="line">FTabManager::<span class="built_in">NewPrimaryArea</span>()</span><br><span class="line">-&gt;<span class="built_in">SetOrientation</span>(Orient_Vertical)</span><br><span class="line">-&gt;<span class="built_in">Split</span></span><br><span class="line">(</span><br><span class="line">FTabManager::<span class="built_in">NewStack</span>()</span><br><span class="line">-&gt;<span class="built_in">SetSizeCoefficient</span>(<span class="number">.4</span>f)</span><br><span class="line">-&gt;<span class="built_in">AddTab</span>(InnerTabName, ETabState::OpenedTab)</span><br><span class="line">)</span><br><span class="line">-&gt;<span class="built_in">Split</span></span><br><span class="line">(</span><br><span class="line">FTabManager::<span class="built_in">NewStack</span>()</span><br><span class="line">-&gt;<span class="built_in">SetSizeCoefficient</span>(<span class="number">.4</span>f)</span><br><span class="line">-&gt;<span class="built_in">AddTab</span>(InnerTabName2, ETabState::OpenedTab)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从布局中恢复得到控件</span></span><br><span class="line">TSharedRef&lt;SWidget&gt; TabContents = TabManager-&gt;<span class="built_in">RestoreFrom</span>(TabManagerLayout.<span class="built_in">ToSharedRef</span>(), <span class="built_in">TSharedPtr</span>&lt;SWindow&gt;()).<span class="built_in">ToSharedRef</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置内容控件</span></span><br><span class="line">NomadTab-&gt;<span class="built_in">SetContent</span>(</span><br><span class="line">TabContents</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NomadTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这里将之前注册的 Tab 唤起。</p></blockquote><h2 id="Viewport"><a href="#Viewport" class="headerlink" title="Viewport"></a>Viewport</h2><p><a href="https://yaksue.blog.csdn.net/article/details/109258860">https://yaksue.blog.csdn.net/article/details/109258860</a></p><blockquote><p>&emsp;&emsp;引入默认的 <code>SEditorViewport</code> 类<br>&emsp;&emsp;然后 override 方法 <code>MakeEditorViewportClient</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedRef&lt;FEditorViewportClient&gt; <span class="title">STestLevelEditorViewport::MakeEditorViewportClient</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TSharedPtr&lt;FEditorViewportClient&gt; EditorViewportClient = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FEditorViewportClient</span>(<span class="literal">nullptr</span>));</span><br><span class="line"><span class="keyword">return</span> EditorViewportClient.<span class="built_in">ToSharedRef</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;然后Slate 代码直接使用 <code>SNew(STestLevelEditorViewport)</code> 初始化界面即可。<br>&emsp;&emsp;不过这个方式沿用了 Viewport ，如何构建一个自定义 Viewport 呢？</p></blockquote><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedRef&lt;FEditorViewportClient&gt; <span class="title">STestEditorViewport::MakeEditorViewportClient</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PreviewScene = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FPreviewScene</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//向预览场景中加一个测试模型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//读取模型</span></span><br><span class="line">UStaticMesh* SM = <span class="built_in">LoadObject</span>&lt;UStaticMesh&gt;(<span class="literal">NULL</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;StaticMesh&#x27;/Engine/EngineMeshes/Cube.Cube&#x27;&quot;</span>), <span class="literal">NULL</span>, LOAD_None, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line">UStaticMeshComponent* SMC = <span class="built_in">NewObject</span>&lt;UStaticMeshComponent&gt;();</span><br><span class="line">SMC-&gt;<span class="built_in">SetStaticMesh</span>(SM);</span><br><span class="line"><span class="comment">//向预览场景中增加组件</span></span><br><span class="line">PreviewScene-&gt;<span class="built_in">AddComponent</span>(SMC, FTransform::Identity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TSharedPtr&lt;FEditorViewportClient&gt; EditorViewportClient = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FEditorViewportClient</span>(<span class="literal">nullptr</span>, PreviewScene.<span class="built_in">Get</span>()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EditorViewportClient.<span class="built_in">ToSharedRef</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;新建一个自定义的 <code>FPreviewScene</code> ，可以将物体实例化添加到场景当中。<br>&emsp;&emsp;将 <code>PreviewScene</code> 传入到  <code>FEditorViewportClient</code> 中，这样 Viewport 就显示独立的场景。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedPtr&lt;SWidget&gt; <span class="title">STestEditorViewport::MakeViewportToolbar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SNew</span>(SCommonEditorViewportToolbarBase, <span class="built_in">SharedThis</span>(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用上面的代码可以构建出默认 Viewport 的 Toolbar。</p></blockquote><h2 id="GraphEditor"><a href="#GraphEditor" class="headerlink" title="GraphEditor"></a>GraphEditor</h2><p><a href="https://yaksue.blog.csdn.net/article/details/107945507">https://yaksue.blog.csdn.net/article/details/107945507</a><br><a href="https://yaksue.blog.csdn.net/article/details/108020797">https://yaksue.blog.csdn.net/article/details/108020797</a><br><a href="https://yaksue.blog.csdn.net/article/details/108227439">https://yaksue.blog.csdn.net/article/details/108227439</a><br><a href="https://yaksue.blog.csdn.net/article/details/109347063">https://yaksue.blog.csdn.net/article/details/109347063</a></p><h2 id="EditorMode"><a href="#EditorMode" class="headerlink" title="EditorMode"></a>EditorMode</h2><!-- TODO -->]]></content>
    
    <summary type="html">
    
      YakSue 工具开发文章学习
    
    </summary>
    
      <category term="游戏开发" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unreal" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/C/"/>
    
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
      <category term="ࠃUnreal" scheme="https://blog.l0v0.com/tags/%E0%A0%83Unreal/"/>
    
  </entry>
  
  <entry>
    <title>Maya C++ pyd 模块开发</title>
    <link href="https://blog.l0v0.com/posts/ce449c32.html"/>
    <id>https://blog.l0v0.com/posts/ce449c32.html</id>
    <published>2022-07-14T02:52:30.000Z</published>
    <updated>2022-12-14T02:54:16.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作者: <a href="http://tw.l0v0.com/#%F0%9F%91%A8%E2%80%8D%F0%9F%92%BBsonictk">👨‍💻sonictk</a></p><p><a href="https://github.com/sonictk/maya_python_c_extension">https://github.com/sonictk/maya_python_c_extension</a></p><blockquote><p>&emsp;&emsp;这篇文章也是参考 sonictk 大佬的提供的 pyd 开发文章。<br>&emsp;&emsp;文章也提到之前的 hot reload 方案已经解决了很多 C++ 开发困难的问题。<br>&emsp;&emsp;然而还是有很多情况需要开发一个 python 的 C++ 模块实现 Maya C++ API 的 调用。<br>&emsp;&emsp;这个情况有点像是 Unreal 暴露 C++ API 到 Python 一样。</p></blockquote><p><a href="./1a24f2d2.html">Maya 编译 c 相关 Python 库 &amp; pyd 编译</a></p><blockquote><p>&emsp;&emsp;之前我也写过关于 Maya pyd 编译的文章，但是这个文章是用 Cython 自动生成 C 代码编译实现的，这次是手写 pyd。</p></blockquote><h2 id="什么是-pyd"><a href="#什么是-pyd" class="headerlink" title="什么是 pyd"></a>什么是 pyd</h2><blockquote><p>&emsp;&emsp;pyd 本质上也是一个 dll 文件，就像 Maya 插件的 mll 一样。<br>&emsp;&emsp;只是 pyd 规定了一些暴露规则，从而让 python 解释器可以读取。<br>&emsp;&emsp;这也是 Python 称之为胶水语言的一大特点，它可以无缝和 C++ 编译的模块进行交互。<br>&emsp;&emsp;因此很多 C++ 的包 比如 Qt 等可以暴露接口到 Python 实现调用。</p></blockquote><h2 id="pyd-hello-world-案例"><a href="#pyd-hello-world-案例" class="headerlink" title="pyd hello world 案例"></a>pyd hello world 案例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Python.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;maya/MGlobal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> MAYA_PYTHON_C_EXT_DOCSTRING[] = <span class="string">&quot;An example Python C extension that makes use of Maya functionality.&quot;</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> HELLO_WORLD_MAYA_DOCSTRING[] = <span class="string">&quot;Says hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(timmyliang): 调用 MGlobal API 打印 Python 传递的字符串</span></span><br><span class="line"><span class="function"><span class="type">static</span> PyObject *<span class="title">pyHelloWorldMaya</span><span class="params">(PyObject *<span class="keyword">module</span>, PyObject *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *inputString;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">PyArg_ParseTuple</span>(args, <span class="string">&quot;s&quot;</span>, &amp;inputString))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PyGILState_STATE pyGILState = <span class="built_in">PyGILState_Ensure</span>();</span><br><span class="line"></span><br><span class="line">MGlobal::<span class="built_in">displayInfo</span>(inputString);</span><br><span class="line"></span><br><span class="line">PyObject *result = <span class="built_in">Py_BuildValue</span>(<span class="string">&quot;s&quot;</span>, inputString);</span><br><span class="line"></span><br><span class="line"><span class="built_in">PyGILState_Release</span>(pyGILState);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(timmyliang): 定义模块的函数列表</span></span><br><span class="line"><span class="type">static</span> PyMethodDef mayaPythonCExtMethods[] = &#123;</span><br><span class="line">&#123;<span class="string">&quot;hello_world_maya&quot;</span>, pyHelloWorldMaya, METH_VARARGS, HELLO_WORLD_MAYA_DOCSTRING&#125;,</span><br><span class="line">&#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>&#125; <span class="comment">// <span class="doctag">NOTE:</span> (sonictk) Sentinel value for Python</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(timmyliang): python2 初始化函数规范 init&lt;module_name&gt; </span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> PY_MAJOR_VERSION == 2</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">PyMODINIT_FUNC <span class="title">initpy_hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Py_InitModule3</span>(<span class="string">&quot;py_hello&quot;</span>,</span><br><span class="line">  mayaPythonCExtMethods,</span><br><span class="line">  MAYA_PYTHON_C_EXT_DOCSTRING);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NOTE(timmyliang): python3 初始化函数规范 PyInit_&lt;module_name&gt; </span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> PY_MAJOR_VERSION == 3</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">PyMODINIT_FUNC <span class="title">PyInit_py_hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> PyModuleDef hello_module = &#123;</span><br><span class="line">PyModuleDef_HEAD_INIT,</span><br><span class="line"><span class="string">&quot;py_hello&quot;</span>, <span class="comment">// Module name to use with Python import statements</span></span><br><span class="line">MAYA_PYTHON_C_EXT_DOCSTRING, <span class="comment">// Module description</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">mayaPythonCExtMethods <span class="comment">// Structure that defines the methods of the module</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">PyModule_Create</span>(&amp;hello_module);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的代码就是一个小案例，将 C++ 编译成 pyd 给 python 调用。<br>&emsp;&emsp;并且这里引用了 Maya 的 API ，因此只能使用 Maya 的 Python Interpreter (mayapy.exe) 进行加载。<br>&emsp;&emsp;如果使用其他 Python 导入这个模块会出现如下的错误</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent <span class="keyword">call</span> last):</span><br><span class="line">  File &quot;d:/Obsidian/Personal/<span class="number">2</span>_Area/📝Blog/CG/Maya/C++/test_load.py&quot;, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    import py_hello</span><br><span class="line"><span class="function">ImportError: <span class="title">DLL</span> <span class="title">load</span> <span class="title">failed</span> <span class="title">while</span> <span class="title">importing</span> <span class="title">py_hello</span>: 找不到指定的程序。</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;pyd 的 C++ 代码包含三个部分</p><ol><li>python 定义的函数</li><li>函数列表定义 (需要传入上面的 C++ 编写的 Python 函数)</li><li>模块定义 (传入上面的 函数列表)</li></ol></blockquote><blockquote><p>&emsp;&emsp;最后生成模块部分，Python2 和 Python3 暴露的 API 不一致，可以用宏来区分。</p></blockquote><blockquote><p>&emsp;&emsp;编译这个 cpp 需要加上 Maya include 目录的头文件，以及链接 Maya lib 的静态库文件。<br>&emsp;&emsp;另外编译 pyd 需要特别注意的是，它也需要想 mll 一样暴露出初始化的函数。<br>&emsp;&emsp;在 python2 下是 <code>init&lt;module_name&gt;</code> 开头，在 python3 下是 <code>PyInit_&lt;module_name&gt;</code> 开头。<br>&emsp;&emsp;在 cpp 里面配置编译环境是个相当让人头疼的问题。<br>&emsp;&emsp;我在自己的 <a href="https://github.com/FXTD-ODYSSEY/CMakeMaya">CMakeMaya</a> 库里面已经配置好了编译用的环境，<br>&emsp;&emsp;具体的使用方法可以看 readme 或者参考我的文章 <a href="./5875a169.html">Maya CMake 构建 C++ 插件编译环境</a> </p></blockquote><blockquote><p>&emsp;&emsp;在我提供的环境下执行 <code>doit c -p pyd -v 2020</code> 即可编译出 pyd 到 <code>plug-ins\Release\maya2022\pyd\py_hello.pyd</code><br>&emsp;&emsp;需要注意 pyd 在不同的平台不同Maya版本都需要单独编译。这里我提供了编译好给 Windows64 Maya2020 的 <a href="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/ce449c32/py_hello.pyd">pyd</a> </p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/ce449c32/ea63da79573f07279f606f9b77b16f21.jpeg" alt="image"></p><h3 id="导入-pyd-引入-Maya-C-节点"><a href="#导入-pyd-引入-Maya-C-节点" class="headerlink" title="导入 pyd 引入 Maya C++ 节点"></a>导入 pyd 引入 Maya C++ 节点</h3><blockquote><p>&emsp;&emsp;在相应的版本执行就可以看到如期触发了 maya API 的方法。<br>&emsp;&emsp;也可以用这个方式注册 Maya 的节点和 Mel 命令，具体可以看 <a href="https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/pyd/pyDeformer">pyDeformer</a> 的代码。<br>&emsp;&emsp;只是由于没有 <code>initializePlugin</code> 拿不到传进来的 <code>MObject</code> 实例化 <code>MFnPlugin</code>。<br>&emsp;&emsp;我测试的 py_deformer 用了 <code>MFnPlugin::findPlug</code> 拿到内置插件 <code>matrixNodes</code> 提供的 MObject 来注册节点。<br>&emsp;&emsp;答案是可以实现的，而且新加入的节点也会显示在 <code>matrixNodes</code> 上。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/ce449c32/877d402bb3650b6b9d965467d2811829.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;这种骚操作不建议使用，而且也不知道会不会有什么 BUG 导致 Maya 崩溃。<br>&emsp;&emsp;另外没有办法触发 <code>uninitializePlugin</code> 来注销这个节点的注册。</p></blockquote><h3 id="pyd-mll-缝合怪"><a href="#pyd-mll-缝合怪" class="headerlink" title="pyd mll 缝合怪"></a>pyd mll 缝合怪</h3><blockquote><p>&emsp;&emsp;基于上面的测试我发现还可以生成出既是 Maya 插件又是 Python 模块的 缝合怪文件。<br>&emsp;&emsp;因为 C++ 只要编译的时候 export 出对应的方法就可以加载。</p></blockquote><blockquote><p>&emsp;&emsp;只是 Python 加载二进制包要求文件后缀为 pyd ，Maya 加载二进制插件要求文件命名为 mll 才可以。<br>&emsp;&emsp;解决这个问题，可以用软连接或者拆分成两个文件来实现，经过测试是可以的，具体可以看 <a href="https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/pyd/pyCommand">pyCommand</a> 的 <a href="https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/pyd/scripts/test_py_deformer.py">测试代码</a> 。</p></blockquote><h2 id="使用-mll-嵌入-python-模块"><a href="#使用-mll-嵌入-python-模块" class="headerlink" title="使用 mll 嵌入 python 模块"></a>使用 mll 嵌入 python 模块</h2><blockquote><p>&emsp;&emsp;上面主要实现按照 python 的规范加载包的操作，<code>sonitck</code> 的文章还提供了一个方案，加载 mll 获取到 python 包的方式。<br>&emsp;&emsp;做法也不复杂，就是在 <code>initializePlugin</code> 的时候加上加上 C++ 的模块。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Python.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;maya/MFnPlugin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;maya/MGlobal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *kAUTHOR = <span class="string">&quot;TimmyLiang&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *kVERSION = <span class="string">&quot;1.0.0&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *kREQUIRED_API_VERSION = <span class="string">&quot;Any&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> HELLO_WORLD_MAYA_DOCSTRING[] = <span class="string">&quot;Says hello world!&quot;</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> MAYA_PYTHON_C_EXT_DOCSTRING[] = <span class="string">&quot;An example Python C extension that makes use of Maya functionality.&quot;</span>;</span><br><span class="line"></span><br><span class="line">PyObject *<span class="keyword">module</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> PyObject *<span class="title">pyHelloWorldMaya</span><span class="params">(PyObject *<span class="keyword">module</span>, PyObject *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *inputString;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">PyArg_ParseTuple</span>(args, <span class="string">&quot;s&quot;</span>, &amp;inputString)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">PyGILState_STATE pyGILState = <span class="built_in">PyGILState_Ensure</span>();</span><br><span class="line">MGlobal::<span class="built_in">displayInfo</span>(inputString);</span><br><span class="line">PyObject *result = <span class="built_in">Py_BuildValue</span>(<span class="string">&quot;s&quot;</span>, inputString);</span><br><span class="line"><span class="built_in">PyGILState_Release</span>(pyGILState);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> PyMethodDef mayaPythonCExtMethods[] = &#123;</span><br><span class="line">&#123;<span class="string">&quot;hello_world_maya&quot;</span>, pyHelloWorldMaya, METH_VARARGS, HELLO_WORLD_MAYA_DOCSTRING&#125;,</span><br><span class="line">&#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">MStatus <span class="title">initializePlugin</span><span class="params">(MObject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">MFnPlugin <span class="title">plugin</span><span class="params">(obj, kAUTHOR, kVERSION, kREQUIRED_API_VERSION)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Py_IsInitialized</span>())</span><br><span class="line"><span class="built_in">Py_Initialize</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Py_IsInitialized</span>())</span><br><span class="line">&#123;</span><br><span class="line">PyGILState_STATE pyGILState = <span class="built_in">PyGILState_Ensure</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(TimmyLiang): python2 直接初始化模块就不会变成 built-in 模块</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> PY_MAJOR_VERSION == 2</span></span><br><span class="line"><span class="keyword">module</span> = <span class="built_in">Py_InitModule3</span>(<span class="string">&quot;mll_py&quot;</span>,</span><br><span class="line">mayaPythonCExtMethods,</span><br><span class="line">MAYA_PYTHON_C_EXT_DOCSTRING);</span><br><span class="line"><span class="comment">// NOTE(TimmyLiang): python3 用官方的方式添加模块不行，可能是因为 Py_Initialize 已经执行了</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> PY_MAJOR_VERSION == 3</span></span><br><span class="line"><span class="comment">// NOTE(TimmyLiang): 参考 https://github.com/LinuxCNC/linuxcnc/issues/825 将模块加到 sys.modules 里面</span></span><br><span class="line"><span class="type">static</span> PyModuleDef hello_module = &#123;</span><br><span class="line">PyModuleDef_HEAD_INIT,</span><br><span class="line"><span class="string">&quot;mll_py&quot;</span>, <span class="comment">// Module name to use with Python import statements</span></span><br><span class="line">MAYA_PYTHON_C_EXT_DOCSTRING, <span class="comment">// Module description</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">mayaPythonCExtMethods <span class="comment">// Structure that defines the methods of the module</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> = <span class="built_in">PyModule_Create</span>(&amp;hello_module);</span><br><span class="line">PyObject *sys_modules = <span class="built_in">PyImport_GetModuleDict</span>();</span><br><span class="line"><span class="built_in">PyDict_SetItemString</span>(sys_modules, <span class="string">&quot;mll_py&quot;</span>, <span class="keyword">module</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">MGlobal::<span class="built_in">displayInfo</span>(<span class="string">&quot;Registered Python bindings!&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">module</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> MStatus::kFailure;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// NOTE(timmyliang): 增加引用计数(确保不会 gc)</span></span><br><span class="line"><span class="built_in">Py_INCREF</span>(<span class="keyword">module</span>);</span><br><span class="line"><span class="built_in">PyGILState_Release</span>(pyGILState);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MStatus::kSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">MStatus <span class="title">uninitializePlugin</span><span class="params">(MObject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MStatus status;</span><br><span class="line">  <span class="comment">// NOTE(timmyliang): 减少引用计数</span></span><br><span class="line"><span class="built_in">Py_DECREF</span>(<span class="keyword">module</span>);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的代码兼容 python2 python3 版本。<br>&emsp;&emsp;python2 直接用默认的 <code>Py_InitModule</code> 方法就可以添加，如果在 Python 打印模块会提示 <code>&lt;module &#39;mll_py&#39; (built-in)&gt;</code><br>&emsp;&emsp;但是 python3 下面不行，后来查找了 Github 的 <a href="https://github.com/LinuxCNC/linuxcnc/issues/825">issue</a> 通过将模块添加到 <code>sys.modules</code> 下面解决问题。<br>&emsp;&emsp;只是模块打印就是普通的模块。<br>&emsp;&emsp;那为什么将模块放到 sys.modules 就可以了，这 Python 的 import 机制有关。 <a href="./5e6e2bc7.html">Python - Import 机制</a></p></blockquote><blockquote><p>&emsp;&emsp;这个方式可以将一些 C++ 的 API 暴露给 Python，只是这个操作需要更多的说明。<br>&emsp;&emsp;否则没人知道这个 mll 居然添加一个 Python 模块。</p></blockquote><h2 id="pybind11-自动绑定"><a href="#pybind11-自动绑定" class="headerlink" title="pybind11 自动绑定"></a>pybind11 自动绑定</h2><blockquote><p>&emsp;&emsp;通过上面一顿操作，也可以深刻体会到如果跨版本兼容 C++ 需要做很多宏的判断，相当繁琐。<br>&emsp;&emsp;包括 Python2 和 Python3 暴露的方法名不一样，需要在 CMake 上进行判断。<br>&emsp;&emsp;使用 pybind11 进行转换相对方便许多</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Python.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;maya/MGlobal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pybind11/pybind11.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://zhuanlan.zhihu.com/p/80884925</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">displayInfo</span><span class="params">(<span class="type">char</span> *inputString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MGlobal::<span class="built_in">displayInfo</span>(inputString);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">PYBIND11_MODULE</span>( pybind11cpp, m )&#123;</span><br><span class="line">    m.<span class="built_in">doc</span>() = <span class="string">&quot;pybind11 example&quot;</span>;</span><br><span class="line">    m.<span class="built_in">def</span>(<span class="string">&quot;display_info&quot;</span>, &amp;displayInfo, <span class="string">&quot;Maya Display Info&quot;</span> ,pybind11::<span class="built_in">arg</span>(<span class="string">&quot;inputString&quot;</span>) = <span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;pybind11 会自动将 Python 的参数进行转换<br>&emsp;&emsp;这样只要将纯粹的 C++ 函数放入到 <code>PYBIND11_MODULE</code> 宏<br>&emsp;&emsp;并且 pybind11 的 2.9 版本支持 python2 python3 的 pyd 编译。<br>&emsp;&emsp;只要在 cmake 里面配置 <code>/export</code> 对应的方法即可。</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(Pybind11 REQUIRED) </span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(pybind11cpp) <span class="comment">#project name</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB SRCS <span class="string">&quot;pybind11/*.cpp&quot;</span> <span class="string">&quot;pybind11/*.h&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;MAYA_INCLUDE_DIR&#125;</span> <span class="variable">$&#123;MAYA_PYTHON_INCLUDE_DIR&#125;</span> <span class="variable">$&#123;PYBIND11_INCLUDE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;MAYA_LIBRARY_DIR&#125;</span>) <span class="comment">#specifies a directory where a linker should search for libraries</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> SHARED <span class="variable">$&#123;SRCS&#125;</span>) <span class="comment">#Add a dynamic library to the project using the specified source files</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pybind11_add_module($&#123;PROJECT_NAME&#125; $&#123;SRCS&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;MAYA_LIBRARIES&#125;</span>) <span class="comment">#specifies list of libraries to use when linking the terget and its dependents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$&#123;MAYA_VERSION&#125;</span> <span class="keyword">GREATER</span> <span class="number">2020</span>) </span><br><span class="line">    <span class="keyword">set</span>(PYBIND_LINK_FLAGS <span class="string">&quot;/export:PyInit_pybind11cpp&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>() </span><br><span class="line">    <span class="keyword">set</span>(PYBIND_LINK_FLAGS <span class="string">&quot;/export:initpybind11cpp&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">set_target_properties</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PROPERTIES</span><br><span class="line">    LINK_FLAGS <span class="variable">$&#123;PYBIND_LINK_FLAGS&#125;</span></span><br><span class="line">    SUFFIX <span class="string">&quot;.pyd&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;pybind11 可以使用 <code>pybind11_add_module</code> 来生成 pyd<br>&emsp;&emsp;但是它是自动查找 Python 环境，指定 Maya 的 Python 需要额外的配置。<br>&emsp;&emsp;所以我就不用这个，自己来配置好了。</p></blockquote><blockquote><p>&emsp;&emsp;通过上面的方式可以大大简化 C++ 的编写。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;以上就是 pyd 编译的各种折腾结果。<br>&emsp;&emsp;社区里面值得说道的有 <a href="https://github.com/mottosso/cmdc">cmdc</a> 基于 pybind11 编译的二次封装 C++ API 库。</p></blockquote><blockquote><p>&emsp;&emsp;Python 调用 C++ 还有利用 <code>ctypes</code> 库访问 dll 的方式<br>&emsp;&emsp;后续也可以实验一下在 Python 中从 dll 里面调用 function 实现 参考:<a href="https://github.com/Autodesk/animx">https://github.com/Autodesk/animx</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      Python C++ Extension
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/CG/Maya/C/"/>
    
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
  </entry>
  
  <entry>
    <title>Unreal C++ VScode 配置</title>
    <link href="https://blog.l0v0.com/posts/51c731db.html"/>
    <id>https://blog.l0v0.com/posts/51c731db.html</id>
    <published>2022-07-12T06:47:30.000Z</published>
    <updated>2022-12-14T02:54:16.861Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;这次尝试在 VScode 进行引擎编译。<br>&emsp;&emsp;网上一查发现，官方其实有做支持的，具体可以参考这篇文章 <a href="http://jollymonsterstudio.com/2018/11/02/unreal-c-with-visual-studio-code">链接</a><br>&emsp;&emsp;这篇文章传播甚广，可以参照和这个方式配置 VScode 编译。</p></blockquote><p><a href="https://www.youtube.com/watch?v=fydvKedIxKk">https://www.youtube.com/watch?v=fydvKedIxKk</a><br><a href="https://github.com/boocs/ue4-tellisense-fixes">https://github.com/boocs/ue4-tellisense-fixes</a></p><h2 id="C-编译过程"><a href="#C-编译过程" class="headerlink" title="C++ 编译过程"></a>C++ 编译过程</h2><p>深度参考学习这边文章 <a href="https://ericlemes.com/2018/11/21/compiling-c-code/">https://ericlemes.com/2018/11/21/compiling-c-code/</a><br>鉴于本人的 C++ 水平一般，建议阅读原文</p><h3 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h3><blockquote><p>&emsp;&emsp;C++ 编译可能会用到下面的文件。</p></blockquote><ul><li>.cpp 文件编译成 .obj</li><li>生成静态库 .lib</li><li>生成动态库 .dll </li><li>生成可执行文件 executable</li></ul><h3 id="VS-工具链"><a href="#VS-工具链" class="headerlink" title="VS 工具链"></a>VS 工具链</h3><blockquote><p>&emsp;&emsp;.sln 全称是 solution 解决方案，是 VS 的项目配置文件。 (整合了 .vcxproj .csproj)<br>&emsp;&emsp;他可以同时配置多个项目，最后通过 MSBuild 来构建<br>&emsp;&emsp;sln 包含了项目的各种头文件依赖，库引用等描述，执行顺序，通过这个 IDE 就知道怎么编译你的项目。</p></blockquote><blockquote><p>&emsp;&emsp;Xcode 的情况也是类似的。<br>&emsp;&emsp;其中比较特别的时 CMake ，通过 CMakeLists.txt 文件可以根据不同平台生成工程配置文件。</p></blockquote><h3 id="第一步-编译"><a href="#第一步-编译" class="headerlink" title="第一步 编译"></a>第一步 编译</h3><p>输入:</p><ul><li>Defines</li><li>Include 文件夹路径Include directories</li><li>预编译头文件 (如果有用到的话)</li><li>源代码</li></ul><p>输出:</p><ul><li>.obj 文件</li></ul><blockquote><p>&emsp;&emsp;MSBuild 使用 CL.exe 进行 C++ 编译。 可能的路径 <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\cl.exe</code><br>&emsp;&emsp;需要安装 VS 或者用 choco 来安装</p></blockquote><blockquote><p>&emsp;&emsp;编译的时候会根据 宏定义(比如 <code>#ifdef</code>)动态 改变编译行为<br>&emsp;&emsp;通过这个方式可以在不同的平台编译出不同的行为。<br>&emsp;&emsp;C++ 最终编译成对应平台的二进制，这个设计和 Java C# 都不同。</p></blockquote><blockquote><p>&emsp;&emsp;头文件最终会拼接到 C++ 里面进行编译，所以需要加上 <code>#pragma once</code> 或者 <code>#if</code> 来避免多次定义。<br>&emsp;&emsp;预编译头则可以生成 <code>.pch</code> 文件实现头文件复用。</p></blockquote><h3 id="第二步-链接"><a href="#第二步-链接" class="headerlink" title="第二步 链接"></a>第二步 链接</h3><p>输入:</p><ul><li>一些源码生成 .obj 文件</li><li>一些源码生成 .lib 文件</li><li>第三方的 lib 和 obj 文件</li></ul><p>输出:</p><ul><li>.dll 或者 .exe</li></ul><blockquote><p>&emsp;&emsp;这一步会将生成的中间文件合并成 dll 或者 exe<br>&emsp;&emsp;这个过程会完成很多优化的步骤，把不运行的部分清理掉。<br>&emsp;&emsp;最后会将一些平台的 lib 引入确保它在平台上可以运行，比如 wincrt (Windows C Runtime library) 等等<br>&emsp;&emsp;并且 lib 也有很多种类，有 release 版本和 debug 版本等等。</p></blockquote><h2 id="Unreal-Build-Tool"><a href="#Unreal-Build-Tool" class="headerlink" title="Unreal Build Tool"></a>Unreal Build Tool</h2><p><a href="https://ericlemes.com/2018/11/23/understanding-unreal-build-tool/">https://ericlemes.com/2018/11/23/understanding-unreal-build-tool/</a></p><h3 id="CS-配置文件说明"><a href="#CS-配置文件说明" class="headerlink" title="CS 配置文件说明"></a>CS 配置文件说明</h3><p><a href="https://www.bilibili.com/read/cv15297017/">https://www.bilibili.com/read/cv15297017/</a></p><blockquote><p>&emsp;&emsp;<code>Unreal</code> 使用自己开发的 <code>UnrealBuildTool</code> 来编译自己的 C++ 代码<br>&emsp;&emsp;与 <a href="http://tw.l0v0.com/#%F0%9F%92%BECMake">💾CMake</a> 类似的，<code>UnrealBuildTool</code> 会引用你需要在相应的模块添加 <code>.build.cs</code> 的代码文件来描述仓库链接的东西。<br>&emsp;&emsp;<code>.build.cs</code> 之上配套了 <code>Private</code> <code>Public</code> 文件夹分别放置暴露和不暴露的代码。<br>&emsp;&emsp;<code>.target.cs</code> 则可以用来定义输出的类型，有 <code>Game</code> <code>Editor</code> <code>Client</code> <code>Server</code> 几种类型。</p></blockquote><h3 id="生成工程文件"><a href="#生成工程文件" class="headerlink" title="生成工程文件"></a>生成工程文件</h3><blockquote><p>&emsp;&emsp;当我们对 <code>uproject</code> 文件右键生成 project 的时候背后执行就是 <code>UnrealBuildTool</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/51c731db/a897c17f0e8725cfdc7eef597edbc464.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/EpicGames/git/UnrealEngine-4.27/Engine/Binaries/DotNET/UnrealBuildTool.exe  -projectfiles -project=&quot;D:/EpicGames/test_plugin/test_plugin.uproject&quot; -game -engine -progress -log=&quot;D:\EpicGames\test_plugin/Saved/Logs/UnrealVersionSelector-2022.07.12-15.50.08.log&quot;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>UnrealBuildTool</code> 会根据 <code>.build.cs</code> 和 <code>.target.cs</code> 里面配置模块路径生成 sln 工程文件。</p></blockquote><h3 id="编译-C"><a href="#编译-C" class="headerlink" title="编译 C++"></a>编译 C++</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/51c731db/00ffce7125f34d3a93cc992f7d154c3c.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:/EpicGames/UE_4.27/Engine/Binaries/DotNET/UnrealBuildTool.exe Development Win64 -Project=&quot;D:/EpicGames/Unreal_Playground/Unreal_Playground.uproject&quot; -TargetType=Editor -Progress -NoEngineChanges -NoHotReloadFromIDE</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这个 <code>Build.bat</code> 背后还是调用 <code>UnrealBuildTool.exe</code> 通过它来编译 C++<br>&emsp;&emsp;上面生成工程时候 <code>.build.cs</code> 和 <code>.target.cs</code> 只是收集了路径。<br>&emsp;&emsp;现在会再次读取这两个文件来获取一些编译用的属性。<br>&emsp;&emsp;然根据配置解决各个模块的依赖关系。</p></blockquote><blockquote><p>&emsp;&emsp;最后会运行 <code>UnrealHeaderTool</code> 将 UObject 的一些特性注入到 UObject 的 cpp 文件当中。<br>&emsp;&emsp;这也说明了为什么需要引入 <code>.generated.h</code> 的头文件。<br>&emsp;&emsp;准备好了所有代码之后再调用相应的编译工具去构建 C++。</p></blockquote><h2 id="VScode-编译配置"><a href="#VScode-编译配置" class="headerlink" title="VScode 编译配置"></a>VScode 编译配置</h2><blockquote><p>&emsp;&emsp;了解了 C++ 编译和 Unreal 全家桶的编译逻辑之后。<br>&emsp;&emsp;我们终于可以回归到本篇文章的正题。</p></blockquote><p><a href="http://jollymonsterstudio.com/2018/11/02/unreal-c-with-visual-studio-code/">http://jollymonsterstudio.com/2018/11/02/unreal-c-with-visual-studio-code/</a></p><blockquote><p>&emsp;&emsp;按照这里提供的文章就可以用 Unreal 官方的方式配置好 <code>.vscode</code> 目录的编译配置。<br>&emsp;&emsp;后续只要 <code>Ctrl + shift + B</code> 就可以触发编译。<br>&emsp;&emsp;编译背后的逻辑就在上面解释了。</p></blockquote><blockquote><p>&emsp;&emsp;相应的我也可以用 python 脚本来触发编译。<br>&emsp;&emsp;sln 工程并不是必须的，不过 VS 有 VA 查找代码比较快。</p></blockquote>]]></content>
    
    <summary type="html">
    
      UnrealBuildTool 实现编译
    
    </summary>
    
      <category term="游戏开发" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unreal" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/C/"/>
    
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
      <category term="ࠃUnreal" scheme="https://blog.l0v0.com/tags/%E0%A0%83Unreal/"/>
    
  </entry>
  
  <entry>
    <title>Maya C++ mll hot reload 研究</title>
    <link href="https://blog.l0v0.com/posts/e6dc9087.html"/>
    <id>https://blog.l0v0.com/posts/e6dc9087.html</id>
    <published>2022-07-08T02:41:12.000Z</published>
    <updated>2022-12-14T02:54:16.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作者: <a href="http://tw.l0v0.com/#%F0%9F%91%A8%E2%80%8D%F0%9F%92%BBsonictk">👨‍💻sonictk</a></p><p><a href="https://sonictk.github.io/maya_hot_reload_example_public/">https://sonictk.github.io/maya_hot_reload_example_public/</a></p><blockquote><p>&emsp;&emsp;详细的说明 &amp; 教程在上面的链接。</p></blockquote><blockquote><p>&emsp;&emsp;Maya 用写 C++ 开发会比较痛苦，一方面是编译问题总是让人烦躁，另一方面加载了 mll 会导致占用，测试起来很不方便。<br>&emsp;&emsp;所以我之前推崇用 Python OpenMaya 做原型设计再转 C++<br>&emsp;&emsp;当然 sonictk 也提到 Fabric Engine 和 Maya Bifrost 使用的时 LLVM IR 的方案来实现 JIT 编译。<br>&emsp;&emsp;具体可以参考另一个项目 <a href="https://github.com/giordi91/babycpp">giordi91/babycpp</a></p></blockquote><h2 id="LLVM-热加载"><a href="#LLVM-热加载" class="headerlink" title="LLVM 热加载"></a>LLVM 热加载</h2><blockquote><p>&emsp;&emsp;<code>babycpp</code> 基于 LLVM 的解决方案我编译没有通过，代码报类型错误，因此也没有测试成功。<br>&emsp;&emsp;不过也了解了 LLVM 是怎么实现热更新的，运行逻辑和 Python 有点像，但是从本质上不一样。</p></blockquote><blockquote><p>&emsp;&emsp;传统的编译器需要有 前端 优化器 后端组成，一般前端是语言，通过 tokenize 和 AST 等方案将语言解析然后通过优化器生成后端的二进制文件。<br>&emsp;&emsp;LLVM 推出了 LLVM IR 中间语言，这样不管前端用什么语言开发，只要有对应的解析工具生成出 LLVM IR ，j就可以利用 LLVM IR 的优化生成 二进制机器语言高效运行。<br>&emsp;&emsp;<code>babycpp</code> 项目就基于 LLVM IR 的机制开发了一个自己的简化版 C++ 语言，通过 LLVM IR JIT 编译动态改变运行逻辑。</p></blockquote><blockquote><p>&emsp;&emsp;我目前个人理解来看，LLVM IR 模式和 Python 模式还是不一样的，Python 是调用自己编译好的模块来运行的，而 LLVM IR 是直接运行时(JIT)生成机器语言，JIT模式的运行效率有时候比 C++ 的静态编译还要高，因为 JIT 可以根据运行过程推断程序下一步的执行来优化非必要的运行逻辑，所以 LLVM IR 的性能要比 Python 好得多。其实我后面了解了一下 numba 提速 Python 的原理就是利用 LLVM 标准实现的。</p></blockquote><blockquote><p>&emsp;&emsp;不过也正如 sonictk 的文章所提到的，这个方案只能调用暴露的东西，无法对内存的细节进行处理。</p></blockquote><h2 id="基于-dll-加载"><a href="#基于-dll-加载" class="headerlink" title="基于 dll 加载"></a>基于 dll 加载</h2><p><a href="https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/hot_reload">https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/hot_reload</a></p><blockquote><p>&emsp;&emsp;如果使用作者提供的 github 仓库的代码编译会有问题，作者的 thirdparty 仓库编译不通过。<br>&emsp;&emsp;所以我后面是根据作者文章的代码稍微调整组装到一起实现的。</p></blockquote><blockquote><p>&emsp;&emsp;详细讲解之前，我先用最简单的话说明这个 hotreload 方案。</p><ol><li>编译一个变形器的 mll 插件 和 带逻辑的 dll 文件</li><li>mll 加载之后会调用 dll 的function进行计算</li><li>修改逻辑之后重新编译 dll</li><li>mll 会重新健在最新的 dll 实现热更新。</li></ol></blockquote><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p><a href="https://sonictk.github.io/maya_hot_reload_example_public/getting_started/">https://sonictk.github.io/maya_hot_reload_example_public/getting_started/</a></p><blockquote><p>&emsp;&emsp;这篇文章非常好，不仅仅讲解了作者 hot reload 的思路，还附带了 windows lib dll 之间的运行逻辑等知识。</p></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/90f7f29f4db2deb75e3cad0924734436.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;代码结构上需要将插件分成两个部分，一个是调用 logic 生成 dll<br>&emsp;&emsp;另一个是 deformer 的代码生成 mll<br>&emsp;&emsp;具体编译配置通过 cmake 配置两个 project 实现。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── logic</span><br><span class="line">│   ├── logic.cpp                  dll 代码逻辑</span><br><span class="line">│   └── logic.h</span><br><span class="line">├── maya_deformer</span><br><span class="line">│   ├── deformer_platform.cpp      调用 &lt;windows.h&gt; API 加载 dll</span><br><span class="line">│   ├── deformer_platform.h</span><br><span class="line">│   ├── deformer.cpp               Maya 变形器 deform 调用 deform_platform 提供的方法</span><br><span class="line">│   ├── deformer.h</span><br><span class="line">│   ├── plugin_main.cpp            Maya mll 插件初始化函数</span><br><span class="line">│   └── plugin_main.h</span><br><span class="line">├── scripts</span><br><span class="line">│   └── test_deformer.py           测试插件是否修改</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── readme.md</span><br></pre></td></tr></table></figure><h3 id="dll-加载方案"><a href="#dll-加载方案" class="headerlink" title="dll 加载方案"></a>dll 加载方案</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/f1b64e13564f1397cbfbe5c238e4f86a.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;上面三个函数调用了 window API 提供的 <code>LoadLibrary</code> <code>FreeLibrary</code> <code>GetProcAddress</code> 加载 dll </p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/0d97569dbeef6f0dac0f5d7a4f960fe4.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;然后将分装到 <code>loadDeformerLogicDLL</code> 和 <code>unloadDeformerLogicDLL</code> 方法里面。<br>&emsp;&emsp;deformer 在触发计算的时候调用加载 dll。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/3b60f5c6dd778aca372e3c8525a0561f.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;这样每次触发节点运算的时候会自动按照 dll 的路径进行加载。</p></blockquote><blockquote><p>&emsp;&emsp;问题是怎么在 C++ 动态获取到当前 dll 的路径呢？</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/38411b72f163aada48c813abf905b0d0.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;在插件加载的时候通过 <code>plugin.loadPath</code> 可以拿到当前 mll 加载的路径。<br>&emsp;&emsp;只要在同一个路径找 <code>logic.dll</code> 路径即可。</p></blockquote><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><h4 id="编译-dll-占用问题"><a href="#编译-dll-占用问题" class="headerlink" title="编译 dll 占用问题"></a>编译 dll 占用问题</h4><blockquote><p>&emsp;&emsp;需要注意的是，mll 被 Maya 加载会产生占用，mll 去加载 dll 也会造成占用。<br>&emsp;&emsp;只有执行 <code>unloadDeformerLogicDLL</code> 才会解除 dll 的占用<br>&emsp;&emsp;但是占用会造成编译失败。</p></blockquote><blockquote><p>&emsp;&emsp;于是我用 CMake 的 API 将旧的 <code>logic.dll</code> 改名叫 <code>logic_old.dll</code><br>&emsp;&emsp;windows 下被占用的文件还是可以改名的。<br>&emsp;&emsp;然后执行编译生成新的 <code>logic.dll</code><br>&emsp;&emsp;这时候需要手动触发 Maya 节点的更新，这样就会按照原来的路径加载新的 dll。</p></blockquote><blockquote><p>&emsp;&emsp;CMake 怎么判断 dll 是否占用，我也没有找到合适方法，于是我想到直接删除这个 dll 在判断 dll 是否存在的方法。</p></blockquote><h3 id="extern-问题"><a href="#extern-问题" class="headerlink" title="extern 问题"></a>extern 问题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> MString kPluginLogicLibraryPath;</span><br><span class="line"><span class="type">static</span> DeformerLogicLibrary kLogicLibrary;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;源码这两个变量用的是 static 静态变量。<br>&emsp;&emsp;但是不知道为什么在其他 cpp 文件里面调动得到的是不同的 内存 地址。</p></blockquote><p><a href="https://blog.csdn.net/sksukai/article/details/105612235">https://blog.csdn.net/sksukai/article/details/105612235</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> MString kPluginLogicLibraryPath;</span><br><span class="line"><span class="keyword">extern</span> DeformerLogicLibrary kLogicLibrary;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;后续是改成 extern<br>&emsp;&emsp;然后在 <code>plugin_main.cpp</code> 里面初始化变量解决问题。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;这个方法切实解决了 节点热加载的问题，不需要 <code>unloadPlugin</code> 清空场景之类的操作，测试起来方便了许多。</p></blockquote>]]></content>
    
    <summary type="html">
    
      C++ 变形器热更新方案
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/CG/Maya/C/"/>
    
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
  </entry>
  
  <entry>
    <title>Maya CMake 构建 C++ 插件编译环境</title>
    <link href="https://blog.l0v0.com/posts/5875a169.html"/>
    <id>https://blog.l0v0.com/posts/5875a169.html</id>
    <published>2022-07-01T06:21:00.000Z</published>
    <updated>2022-12-14T02:54:16.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;过去构建 Maya C++ 插件是按照 Autodesk 官方提供的流程，在 VS 里面配置项目工程。 <a href="https://blog.csdn.net/hp_cpp/article/details/80265856">参考链接</a><br>&emsp;&emsp;通过配置 devkit 的 pluginwizard 来构建项目。<br>&emsp;&emsp;但是使用 VS 配置 Maya 依赖的头文件和 lib 其实挺不方便的。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/dedb5d9005f1dff970148bf91c26311a.jpeg" alt="image"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/cfafe1377b6d4e6bb1382f53c76c91da.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;依赖和修改都在不同选项里面，配置起来要搞半天。<br>&emsp;&emsp;而且这个工程配置只能兼容 Windows ，如果我们要在 Linux 环境下编译，整个流程又完全不一样了。<br>&emsp;&emsp;其实解决这种问题，有专门的工具去做。<br>&emsp;&emsp;这就是 <a href="https://cmake.org/">CMake</a><br>&emsp;&emsp;通过 cmake 配置可以生成不同平台的工程文件，不需要打开 IDE 就可以调用 compiler 编译结果。</p></blockquote><p><a href="https://github.com/volodinroman/CMakeMaya">https://github.com/volodinroman/CMakeMaya</a></p><blockquote><p>&emsp;&emsp;这个仓库是别人配置好的基于 CMake 构建 Maya 插件的仓库。</p></blockquote><h2 id="Doit-自动构建环境"><a href="#Doit-自动构建环境" class="headerlink" title="Doit 自动构建环境"></a>Doit 自动构建环境</h2><blockquote><p>&emsp;&emsp;但是构建编译环境还是挺麻烦的，一方面需要下载 VS 和 CMake<br>&emsp;&emsp;另外还要配置好 Maya 提供的 SDK</p></blockquote><p><a href="https://github.com/FXTD-ODYSSEY/CMakeMaya">https://github.com/FXTD-ODYSSEY/CMakeMaya</a></p><blockquote><p>&emsp;&emsp;我这个仓库提供了懒人包环境，只需要配置有 Python 环境和poetry 库。<br>&emsp;&emsp;在仓库的目录，执行 <code>poetry install</code> 和 <code>poetry shell</code> 就可以进入开发虚拟环境。(注: 需要管理员权限)<br>&emsp;&emsp;poetry 会自动安装配置好的依赖，包括 <code>doit 框架</code><br>&emsp;&emsp;执行 <code>doit init</code> 会调用 <code>choco</code> 安装 VS 的依赖，以及 CMake<br>&emsp;&emsp;这个过程需要等待一段时间。</p></blockquote><blockquote><p>&emsp;&emsp;执行完之后 VS Build Tool 就添加到系统了。<br>&emsp;&emsp;但还是找不到 C++ compiler ，需要手动打开 installer 下载 C++ CMake 开发包。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/911e11826073a3058551680de9aba826.png" alt="image"></p><blockquote><p>&emsp;&emsp;使用 <code>doit SDK -v 2020</code> 会下载 Maya 官方的 devkit 到仓库的 SDK 目录。<br>&emsp;&emsp;准备好环境之后，还需要安装好 maya 2020<br>&emsp;&emsp;如此就是完备的编译环境，只需要用 <code>doit c</code> 执行 cmake 编译命令来编译 C++ 插件。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doit c -p weightDriver -v 2020</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用 -p 可以指定编译的项目，-v 可以指定编译的 Maya 版本，默认不指定会编译全部项目的 2020 版本<br>&emsp;&emsp;-p 支持完整的projects 相对路径或者最终目录指定</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doit c -p IngoClemens/weightDriver</span><br><span class="line">doit c -p weightDriver</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;执行 doit 的时候会用 python 识别将末端目录变成完整的相对目录</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/12a58e2b26c25afaa90321434254ccb4.png" alt="image"></p><hr><blockquote><p>&emsp;&emsp;下面是完整执行编译的流程</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/105b5139b33ef1c83e10c9a0e171243e.png" alt="image"></p><blockquote><p>&emsp;&emsp;doit 背后执行的是 拼接输入 执行 cmake 命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -Wno-dev -G &quot;Visual Studio 16 2019&quot; -DMAYA_VERSION=&#123;version&#125; -DMAYA_PROJECT=&#123;project&#125;. -B build</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;DMAYA_VERSION 指定 Maya 版本号<br>&emsp;&emsp;DMAYA_PROJECT 指定 Maya 项目，多个项目可以用 ; 分割。<br>&emsp;&emsp;这个命令会读取根目录的 CMakeLists.txt 根据 VS2019 的配置生成 sln 文件到 Build 目录。<br>&emsp;&emsp;windows 下如果需要 Debug 也可以用 VS 打开 sln 去配置 Debug 工具。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build build --config Release</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;后面会执行 build 命令根据配置编译输出到指定目录。</p></blockquote><h3 id="中文乱码坑"><a href="#中文乱码坑" class="headerlink" title="中文乱码坑"></a>中文乱码坑</h3><p><a href="http://tw.l0v0.com/#%F0%9F%92%A1Vscode%20terminal%20%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81">💡Vscode terminal 中文乱码</a></p><blockquote><p>&emsp;&emsp;Window Terminal 默认不支持 MSBuild 的字符输出。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/07a6a6d0ef789b42617075a90cb84b8f.png" alt="image"></p><blockquote><p>&emsp;&emsp;需要在 terminal 上执行 <code>chcp 65001</code> 切换字符集。</p></blockquote><h2 id="添加新工程"><a href="#添加新工程" class="headerlink" title="添加新工程"></a>添加新工程</h2><blockquote><p>&emsp;&emsp;如果需要添加自己的 mll 需要自己填充 CMakeLists.txt 配置<br>&emsp;&emsp;使用 <code>doit new</code> 可以快速生成 插件 编译模板</p></blockquote><h3 id="cmake-配置说明"><a href="#cmake-配置说明" class="headerlink" title="cmake 配置说明"></a>cmake 配置说明</h3><p><code>projects</code> 下每个项目目录都有对应的  <code>CMakeLists.txt</code> </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置输出目录</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE <span class="variable">$&#123;CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE&#125;</span>/maya<span class="variable">$&#123;MAYA_VERSION&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置项目名称 (一般编译的文件名取项目名)</span></span><br><span class="line"><span class="keyword">project</span>(&#123;&#123;cookiecutter.project_name&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加编译的文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SRCS <span class="string">&quot;*.cpp&quot;</span> <span class="string">&quot;*.h&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加头文件依赖</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;MAYA_INCLUDE_DIR&#125;</span>) </span><br><span class="line"><span class="comment"># 添加 lib 库目录</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;MAYA_LIBRARY_DIR&#125;</span>) </span><br><span class="line"><span class="comment"># 链接源码</span></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> SHARED <span class="variable">$&#123;SRCS&#125;</span>) </span><br><span class="line"><span class="comment"># 链接 lib</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;MAYA_LIBRARIES&#125;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># mll 输出配置</span></span><br><span class="line">MAYA_PLUGIN(<span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;大部分的结构如上图，默认模板如上。<br>&emsp;&emsp;我加上了注释说明。</p></blockquote><blockquote><p>&emsp;&emsp;<code>MAYA_PLUGIN</code>方法将 mll 的 <code>initializePlugin</code> <code>uninitializePlugin</code> 两个方法暴露出来(Maya 加载用)，并且将 dll 的后缀改为 mll。</p></blockquote><h2 id="用-CMake-编译-Devkit-的案例代码"><a href="#用-CMake-编译-Devkit-的案例代码" class="headerlink" title="用 CMake 编译 Devkit 的案例代码"></a>用 CMake 编译 Devkit 的案例代码</h2><blockquote><p>&emsp;&emsp;上面提到的 CMake 是基于 <a href="https://github.com/volodinroman/CMakeMaya">https://github.com/volodinroman/CMakeMaya</a> 的方案搭建的。<br>&emsp;&emsp;cmake 文件基本上是自己编写，可以控制每一处的细节。</p></blockquote><blockquote><p>&emsp;&emsp;其实 Maya 的 Devkit 也提供了一套 CMake 的方案。<br>&emsp;&emsp;每个插件都保留了 CMakeLists.txt 用于编译。<br>&emsp;&emsp;如何顺利编译 Maya C++ 的案例插件是一个好问题。<br>&emsp;&emsp;我过去看 Maya 的文档但是因为不会折腾这个编译(编译出错不知道怎么解决) ，导致无法深入学习 C++ 插件。<br>&emsp;&emsp;只能拿 Devkit 提供的 Python 文件进行学习。<br>&emsp;&emsp;通过上面的折腾与学习，自己也算是对 CMake 有了基础的入门，终于有能力搞定这个问题了~</p></blockquote><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_A_First_Plugin_HelloWorld_html">https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_A_First_Plugin_HelloWorld_html</a></p><blockquote><p>&emsp;&emsp;上面的链接是官方文档提供的一个 Maya 插件最简案例。<br>&emsp;&emsp;相应的代码在 <code>devkit\plug-ins\helloCmd</code> 找到</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/307f99197358b87b94dc4bb1629731b8.jpeg" alt="image"></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># include the project setting file</span></span><br><span class="line"><span class="keyword">include</span>($ENV&#123;DEVKIT_LOCATION&#125;/cmake/pluginEntry.cmake)</span><br><span class="line"></span><br><span class="line"><span class="comment"># specify project name</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_NAME helloCmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set SOURCE_FILES</span></span><br><span class="line"><span class="keyword">set</span>(SOURCE_FILES</span><br><span class="line">   helloCmd.cpp</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set linking libraries</span></span><br><span class="line"><span class="keyword">set</span>(LIBRARIES</span><br><span class="line">     OpenMaya</span><br><span class="line">     Foundation</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build plugin</span></span><br><span class="line">build_plugin()</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;构建插件的 cmake 代码如上，核心部分是 <code>$ENV&#123;DEVKIT_LOCATION&#125;</code> 通过环境变量获取 Devkit 的路径<br>&emsp;&emsp;所以执行 CMake 之前可以配置一下环境变量。</p></blockquote><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> DEVKIT_LOCATION=F:\maya_devkit\devkitBase</span><br><span class="line">cmake -G &quot;Visual Studio <span class="number">16</span> <span class="number">2019</span>&quot; . -B build</span><br><span class="line">cmake --build build --config Release</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/237ae7978ede1e82be485148ff36e526.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;如此操作，就可以编译出 mll 了。(前提是要配置好 VS 的环境)</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;这个环境我通过 虚拟机 测试过，在 win10 环境是没有问题。<br>&emsp;&emsp;通过 cmake 配置可以快速构建好 C++ 编译环境，比起以前折腾 VS 来方便太多了。<br>&emsp;&emsp;利用 <code>choco</code> 来安装依赖也解决了各种缺库导致起不来的问题。<br>&emsp;&emsp;通过这个人懒人包可以极大降低 Maya 写 C++ 的难度。</p></blockquote><!-- TODO多进程执行 choco自动添加管理员权限 --><h3 id="2022-7-8-补充说明"><a href="#2022-7-8-补充说明" class="headerlink" title="2022-7-8 补充说明"></a>2022-7-8 补充说明</h3><blockquote><p>&emsp;&emsp;最近利用 submodule 添加了很多社区的 C++ 库。<br>&emsp;&emsp;clone 仓库之后需要用执行 <code>git submodule update --init</code> 来拉取 submodule</p></blockquote><blockquote><p>&emsp;&emsp;一些注意事项请参阅 readme 文档</p></blockquote>]]></content>
    
    <summary type="html">
    
      CMake 编译
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/CG/Maya/C/"/>
    
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
  </entry>
  
  <entry>
    <title>Unreal Python 导出 MetaHuman 控制器关键帧</title>
    <link href="https://blog.l0v0.com/posts/1b238b83.html"/>
    <id>https://blog.l0v0.com/posts/1b238b83.html</id>
    <published>2022-06-24T08:57:06.000Z</published>
    <updated>2022-12-14T02:54:16.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;MetaHuman 已经在数字人领域里面相当成熟的解决方案。<br>&emsp;&emsp;并且 UE 官方开发了源码工程。<br>&emsp;&emsp;目前 github 上有不少人演示自己套用 MetaHuman 动画的效果。<br>&emsp;&emsp;于是我自己也尝试着想将它 UE 里面的控制器动画导出来。<br>&emsp;&emsp;然而却发现行不通。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1b238b83/01.png" alt="image.png"></p><blockquote><p>&emsp;&emsp;它的控制器关键帧是在 sequencer 里面。<br>&emsp;&emsp;最初是尝试将 sequencer 的资源全部导出成 FBX。<br>&emsp;&emsp;然而控制器的关键帧并没有跟随导入到 FBX 当中。</p></blockquote><blockquote><p>&emsp;&emsp;于是我想到可以用 unreal python 读取关键帧数据导出 json<br>&emsp;&emsp; Maya 再读取数据设置关键帧到控制器上。</p></blockquote><h2 id="unreal-python-导出关键帧"><a href="#unreal-python-导出关键帧" class="headerlink" title="unreal python 导出关键帧"></a>unreal python 导出关键帧</h2><blockquote><p>&emsp;&emsp;有思路之后就好办。<br>&emsp;&emsp;之前我也写过脚本来获取 sequencer 关键帧的。<br>&emsp;&emsp;需要注意如果想要使用 unreal python 的 API 需要开启相应的 C++ 插件。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1b238b83/02.png" alt="image.png"></p><blockquote><p>&emsp;&emsp;否则 python 会获取不到相应的 API 报错。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import built-in modules</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import local modules</span></span><br><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unreal_progress</span>(<span class="params">tasks, label=<span class="string">&quot;进度&quot;</span>, total=<span class="literal">None</span></span>):</span><br><span class="line">    total = total <span class="keyword">if</span> total <span class="keyword">else</span> <span class="built_in">len</span>(tasks)</span><br><span class="line">    <span class="keyword">with</span> unreal.ScopedSlowTask(total, label) <span class="keyword">as</span> task:</span><br><span class="line">        task.make_dialog(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(tasks):</span><br><span class="line">            <span class="keyword">if</span> task.should_cancel():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            task.enter_progress_frame(<span class="number">1</span>, <span class="string">&quot;%s %s/%s&quot;</span> % (label, i, total))</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> 读取 sequence</span></span><br><span class="line">    sequence = unreal.load_asset(<span class="string">&#x27;/Game/Sequencer/MetaHumanSample_Sequence.MetaHumanSample_Sequence&#x27;</span>)</span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> 收集 sequence 里面所有的 binding</span></span><br><span class="line">    binding_dict = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">    <span class="keyword">for</span> binding <span class="keyword">in</span> sequence.get_bindings():</span><br><span class="line">        binding_dict[binding.get_name()].append(binding)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> 遍历命名为 Face 的 binding</span></span><br><span class="line">    <span class="keyword">for</span> binding <span class="keyword">in</span> unreal_progress(binding_dict.get(<span class="string">&quot;Face&quot;</span>, []), <span class="string">&quot;导出 Face 数据&quot;</span>):</span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> 获取关键帧 channel 数据</span></span><br><span class="line">        keys_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> track <span class="keyword">in</span> binding.get_tracks():</span><br><span class="line">            <span class="keyword">for</span> section <span class="keyword">in</span> track.get_sections():</span><br><span class="line">                <span class="keyword">for</span> channel <span class="keyword">in</span> unreal_progress(section.get_channels(), <span class="string">&quot;导出关键帧&quot;</span>):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> channel.get_num_keys():</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    keys = []</span><br><span class="line">                    <span class="keyword">for</span> key <span class="keyword">in</span> channel.get_keys():</span><br><span class="line">                        frame_time = key.get_time()</span><br><span class="line">                        frame = frame_time.frame_number.value + frame_time.sub_frame</span><br><span class="line">                        keys.append(&#123;<span class="string">&quot;frame&quot;</span>: frame, <span class="string">&quot;value&quot;</span>: key.get_value()&#125;)</span><br><span class="line"></span><br><span class="line">                    keys_dict[channel.get_name()] = keys</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> 导出 json</span></span><br><span class="line">        name = binding.get_parent().get_name()</span><br><span class="line">        export_path = os.path.join(DIR, <span class="string">&quot;&#123;0&#125;.json&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(export_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> wf:</span><br><span class="line">            json.dump(keys_dict, wf, indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的脚本会定位 MetaHuman 的 sequence 资源，然后导出关键帧的信息为 json</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1b238b83/meta_export.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;导出会在脚本目录输出两个 json 文件。<br>&emsp;&emsp;Maya 可以解析这个这两个 json 将关键帧设置到 控制器上。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import built-in modules</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import third-party modules</span></span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line">DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">seq, status=<span class="string">&quot;&quot;</span>, title=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    pm.progressWindow(status=status, title=title, progress=<span class="number">0.0</span>, isInterruptable=<span class="literal">True</span>)</span><br><span class="line">    total = <span class="built_in">len</span>(seq)</span><br><span class="line">    <span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(seq):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> pm.progressWindow(query=<span class="literal">True</span>, isCancelled=<span class="literal">True</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            pm.progressWindow(e=<span class="literal">True</span>, progress=<span class="built_in">float</span>(i) / total * <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">yield</span> item  <span class="comment"># with body executes here</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            pm.progressWindow(ep=<span class="number">1</span>)</span><br><span class="line">    pm.progressWindow(ep=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> 读取数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(DIR, <span class="string">&quot;BP_metahuman_001.json&quot;</span>), <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> rf:</span><br><span class="line">        data = json.load(rf)</span><br><span class="line"></span><br><span class="line">    attr_map = &#123;<span class="string">&quot;location&quot;</span>: <span class="string">&quot;t&quot;</span>, <span class="string">&quot;rotation&quot;</span>: <span class="string">&quot;r&quot;</span>&#125;</span><br><span class="line">    status = <span class="string">&quot;Import Keyframe to metahuman controller&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> undo 支持</span></span><br><span class="line">    pm.undoInfo(ock=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> channel, frame_list <span class="keyword">in</span> progress(data.items(), status=status):</span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> 解析 channel_name</span></span><br><span class="line">        has_attr = channel.count(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> has_attr:</span><br><span class="line">            <span class="comment"># <span class="doctag">NOTE:</span> 处理 `CTRL_C_eye_parallelLook_4311` 格式</span></span><br><span class="line">            ctrl_name = channel.rsplit(<span class="string">&quot;_&quot;</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            attr = <span class="string">&quot;ty&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parts = <span class="built_in">iter</span>(channel.split(<span class="string">&quot;.&quot;</span>))</span><br><span class="line">            ctrl_name = <span class="built_in">next</span>(parts, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            param = <span class="built_in">next</span>(parts, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            axis = <span class="built_in">next</span>(parts, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> axis:</span><br><span class="line">                <span class="comment"># <span class="doctag">NOTE:</span> 处理 `CTRL_C_teethD.Y_4330` 格式</span></span><br><span class="line">                attr = <span class="string">&quot;t&quot;</span></span><br><span class="line">                axis = param</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># <span class="doctag">NOTE:</span> 处理 `CTRL_L_eyeAim.Rotation.Y_4387` 格式</span></span><br><span class="line">                attr = attr_map.get(param.lower())</span><br><span class="line">            attr += axis.split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>].lower()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> 解析出控制器属性设置关键帧</span></span><br><span class="line">        attribute = pm.PyNode(<span class="string">&quot;.&quot;</span>.join([ctrl_name, attr]))</span><br><span class="line">        <span class="keyword">for</span> frame_data <span class="keyword">in</span> frame_list:</span><br><span class="line">            frame = frame_data.get(<span class="string">&quot;frame&quot;</span>)</span><br><span class="line">            value = frame_data.get(<span class="string">&quot;value&quot;</span>)</span><br><span class="line">            attribute.setKey(t=frame, v=value)</span><br><span class="line"></span><br><span class="line">    pm.undoInfo(cck=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1b238b83/maya_load.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;加载 unreal 导出的数据。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;其实整个流程不复杂，有思路就很好处理。</p></blockquote>]]></content>
    
    <summary type="html">
    
      python 导出 sequencer 关键帧
    
    </summary>
    
      <category term="游戏开发" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unreal" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/"/>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/Python/"/>
    
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
      <category term="ࠃUnreal" scheme="https://blog.l0v0.com/tags/%E0%A0%83Unreal/"/>
    
  </entry>
  
  <entry>
    <title>TA 工具人知乎分享</title>
    <link href="https://blog.l0v0.com/posts/4831b5c7.html"/>
    <id>https://blog.l0v0.com/posts/4831b5c7.html</id>
    <published>2022-05-13T07:01:29.000Z</published>
    <updated>2022-12-14T02:54:16.931Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好, 这里需要密码. 提示(神秘号码 + 光子)</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="fb2a28db5cfcf9c9721b69dcf0363b14040b5af44b27fd3fff3b68c3375036b0"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      围绕一些主题的约稿
    
    </summary>
    
      <category term="光子" scheme="https://blog.l0v0.com/categories/%E5%85%89%E5%AD%90/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 代码规范</title>
    <link href="https://blog.l0v0.com/posts/1cd351e0.html"/>
    <id>https://blog.l0v0.com/posts/1cd351e0.html</id>
    <published>2022-05-09T03:16:02.000Z</published>
    <updated>2022-12-14T02:54:16.957Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Python-编程规范系列大纲"><a href="#Python-编程规范系列大纲" class="headerlink" title="Python 编程规范系列大纲"></a>Python 编程规范系列大纲</h2><ol><li><strong>Python 代码规范</strong><ol><li>flake8 代码检查工具</li><li>wemake python style</li></ol></li><li>Python poetry 包管理</li><li>Python 工具配置<ol><li>commitizen</li><li>isort</li><li>black</li><li>pylint</li><li>falkehell</li><li>pre-commit</li><li>tox &amp; nox 测试环境管理</li></ol></li><li>Python mkdocs 文档构建</li><li>Python pytest 单元测试</li><li>Python cookiecutter 项目模板生成工具</li><li>Python Github 开源项目维护流程<ol><li>Github Action</li><li>pull request</li><li>git rebase 说明</li></ol></li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;过去在项目组开发，需要快速迭代，通常都是面向美术编程，这个需要快准狠地解决问题，至于代码怎么写其实是没有任何要求的。<br>&emsp;&emsp;但是这对于长线维护来说简直是灾难，当这种代码越来越多之后，就会变成一堆没人敢碰的屎山代码。<br>&emsp;&emsp;那怎么才能写出可以长期维护的代码呢？<br>&emsp;&emsp;下面我会开一个 Python 编程规范 系列，整理出一整套 Python 的编程规范，以及配套的工具。<br>&emsp;&emsp;这个过程是这小半年来的一次总结，这里诚挚地感谢我的同事 <code>龙浩</code> ，它教会了很多~</p></blockquote><h2 id="Python-代码规范"><a href="#Python-代码规范" class="headerlink" title="Python 代码规范"></a>Python 代码规范</h2><ol><li>谷歌规范 <a href="https://google.github.io/styleguide/pyguide.html">styleguide | Style guides for Google-originated open-source projects</a></li><li>Maya Python 开发规范: <a href="https://www.chadvernon.com/python-scripting-for-maya-artists/#writing-clean-code">Python Scripting for Maya Artists | Chad Vernon</a></li><li>TA 101: <a href="https://github.com/theodox/ta_101">theodox/ta_101: a coding standards doc for technical artists (github.com)</a></li></ol><blockquote><p>&emsp;&emsp;其中我结合自身理解，翻译了 <a href="">Maya Python 开发规范</a> 和 <a href="">TA 101</a>，大家可以自行参阅。</p></blockquote><h2 id="文件头部统一写法"><a href="#文件头部统一写法" class="headerlink" title="文件头部统一写法"></a>文件头部统一写法</h2><blockquote><p>&emsp;&emsp;我们的代码优先采用 Python3 写法，因此根据谷歌规范，所有的代码文件需要加上下列规范<br>&emsp;&emsp;<code>__future__</code> 模块用来兼容 Python3 写法<br>&emsp;&emsp;<code>coding:utf-8</code> 兼容 utf-8 编码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">module docstring</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>from __future__ import division</code> 可以引入整数相除可以得到小数 (Python2的默认环境是得到整数)<br>&emsp;&emsp;<code>from __future__ import print_function</code> 可以让 print 关键字变为 Python3 的 print 方法，可以在 lambda 里面使用 <code>print</code><br>&emsp;&emsp;<em>**</em><code>from __future__ import absolute_import</code> 引入绝对导入</p></blockquote><blockquote><p>&emsp;&emsp;division 会导致 OpenMaya 一些类型的运算符失效</p></blockquote><p><a href="http://www.jp.square-enix.com/tech/library/pdf/BDSeminar20210518_sasaki.pdf">PowerPoint プレゼンテーション (square-enix.com)</a></p><blockquote><p>&emsp;&emsp;原因是引入 division 之后 除法 除法 __truediv__ 而不再是 __div__ 了</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cd351e0/01.png" alt="enter image description here"></p><h2 id="backport-兼容库"><a href="#backport-兼容库" class="headerlink" title="backport 兼容库"></a>backport 兼容库</h2><h3 id="six-py2-amp-py3-兼容"><a href="#six-py2-amp-py3-兼容" class="headerlink" title="six - py2 &amp; py3 兼容"></a>six - py2 &amp; py3 兼容</h3><p>Github: <a href="https://github.com/benjaminp/six">benjaminp/six: Python 2 and 3 compatibility library (github.com)</a></p><blockquote><p>&emsp;&emsp;six 库提供了统一的 API 解决了 Py2 Py3 不统一的问题。<br>&emsp;&emsp;比如加入 metaclass </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Python2</span></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">__metaclass__ = abc.ABCMeta</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Python3</span></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestClass</span>(metaclass=abc.ABCMeta):</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># py2 &amp; py3 兼容</span></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="keyword">import</span> six</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestClass</span>(six.with_metaclass(abc.ABCMeta, <span class="built_in">object</span>)):</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="future-模块"><a href="#future-模块" class="headerlink" title="future 模块"></a>future 模块</h3><p><a href="https://python-future.org/quickstart.html">Quick-start guide — Python-Future documentation</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> future.standard_library <span class="keyword">import</span> install_aliases</span><br><span class="line">install_aliases()</span><br><span class="line"><span class="keyword">import</span> queue</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;可以支持大部分名字迁移的库，比如 Python2 里面用 <code>Queue</code> 在 Python3 下用 <code>queue</code><br>&emsp;&emsp;使用 future 库就可以用 Python3 写法在 Python2 下运行。</p></blockquote><h3 id="Qt-py-Qt库兼容"><a href="#Qt-py-Qt库兼容" class="headerlink" title="Qt.py Qt库兼容"></a>Qt.py Qt库兼容</h3><p>Github : <a href="https://github.com/mottosso/Qt.py">mottosso/Qt.py: Minimal Python 2 &amp; 3 shim around all Qt bindings - PySide, PySide2, PyQt4 and PyQt5. (github.com)</a></p><p>Qt.py 的作者是 流程TD 因此影视行业多采用这个，Qt.py 是运行时 Resolve Qt 的库，因此不太兼容 pyinstaller 打包之类依赖静态分析的库，要解决这个问题可以用 <a href="https://github.com/spyder-ide/qtpy">qtpy</a> 库 (qtpy 是多文件 Qt.py 是单文件)</p><hr><p>Qt 的 Python Binding 因为一些历史瓜葛，导致拆分出了两个可用的库<br><strong>PyQt</strong> &amp; <strong>PySide</strong><br>PyQt 商用付费，PySide 商用免费</p><p>两者都是 Qt C++ 封装暴露到 Python 库，使用上大部分的代码都是能够兼容的。<br>需要注意的部分差异有信号槽区别<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</span><br><span class="line">signal = QtCore.pyqtSignal()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line">signal = QtCore.Signal()</span><br></pre></td></tr></table></figure></p><hr><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cd351e0/02.png" alt="enter image description here"></p><table><thead><tr><th>Maya</th><th>C++ Qt 版本</th><th>PyQt</th><th>PySide</th></tr></thead><tbody><tr><td>2014+ <a href="https://download.autodesk.com/global/docs/maya2014/en_us/index.html?url=files/GUID-AEAEAE08-96B2-47EC-BD0D-21A4D072C458.htm,topicNumber=d30e47245">信息源</a></td><td>Qt4</td><td>PyQt4</td><td>PySide</td></tr><tr><td>2017+  <a href="https://help.autodesk.com/view/MAYAUL/2017/ENU/?guid=GUID-955290A5-C27E-47AC-B930-A0430182EAA0">信息源</a></td><td>Qt5</td><td>PyQt5</td><td>PySide2</td></tr><tr><td>未支持</td><td>Qt6</td><td>PyQt6</td><td>PySide6</td></tr></tbody></table><p><a href="https://fredrikaverpil.github.io/2016/07/25/dealing-with-maya-2017-and-pyside2/">Dealing with Maya 2017 and PySide2 · Fredrik Averpil</a></p><p>需要注意 PySide 升级到 PySide2 的 API 由以前的两个模块拆分成了三个 (QtCore QtWidgets QtGui)<br>官方推荐下列的代码解决问题 <a href="https://help.autodesk.com/view/MAYAUL/2017/ENU/?guid=GUID-0617A132-1B57-474F-A656-6E71A002CA28">信息源</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> PySide2.QtCore <span class="keyword">import</span> * </span><br><span class="line">    <span class="keyword">from</span> PySide2.QtGui <span class="keyword">import</span> * </span><br><span class="line">    <span class="keyword">from</span> PySide2.QtWidgets <span class="keyword">import</span> *</span><br><span class="line">    <span class="keyword">from</span> PySide2 <span class="keyword">import</span> __version__</span><br><span class="line">    <span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance </span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> PySide.QtCore <span class="keyword">import</span> * </span><br><span class="line">    <span class="keyword">from</span> PySide.QtGui <span class="keyword">import</span> * </span><br><span class="line">    <span class="keyword">from</span> PySide <span class="keyword">import</span> __version__</span><br><span class="line">    <span class="keyword">from</span> shiboken <span class="keyword">import</span> wrapInstance </span><br></pre></td></tr></table></figure><p>但是上面的代码需要 <code>*</code> 导入，并不符合我们的代码规范<br>使用 Qt.py 就可以轻松解决问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> Qt.QtCompat <span class="keyword">import</span> wrapInstance</span><br></pre></td></tr></table></figure><p>老版本的 Maya 使用 PySide 也会被映射到 PySide2 的调用规范上。</p><h2 id="black-代码格式化"><a href="#black-代码格式化" class="headerlink" title="black 代码格式化"></a>black 代码格式化</h2><p>VScode 配置 black 工具<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cd351e0/03.png" alt="enter image description here"><br>使用的 Python 必须 <code>pip install black</code></p><h2 id="Pylint-代码提示"><a href="#Pylint-代码提示" class="headerlink" title="Pylint 代码提示"></a>Pylint 代码提示</h2><p>VScode 配置 Pylint 工具<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cd351e0/04.png" alt="enter image description here"></p><p>该选项默认是启用的<br>只要启用 Python 安装过 Pylint (<code>pip install pylint</code>)</p><h2 id="docstring-规范"><a href="#docstring-规范" class="headerlink" title="docstring 规范"></a>docstring 规范</h2><p>docstring有四种通用的标注规范</p><ul><li>Epytext</li><li>reST</li><li>Google</li><li>Numpy</li></ul><p><a href="https://www.chadvernon.com/python-scripting-for-maya-artists/#epytext">四种规范的样式</a></p><p><a href="https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html">sphinx.ext.napoleon 支持将 Google 和 Numpy 转换成 reST</a></p><p>建议做到所有的函数都进行 docstirng 注释</p><h3 id="VScode-自动生成-docstring"><a href="#VScode-自动生成-docstring" class="headerlink" title="VScode 自动生成 docstring"></a>VScode 自动生成 docstring</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cd351e0/05.png" alt="enter image description here"><br><a href="https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring">Python Docstring Generator - Visual Studio Marketplace</a><br>安装 VScode 插件</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cd351e0/06.png" alt="enter image description here"><br>设定可以修改 Docstring 的生成格式。<br>默认生成快捷键为 ctrl+shift+2</p><h2 id="代码-review"><a href="#代码-review" class="headerlink" title="代码 review"></a>代码 review</h2><p>仓库设置必须经过 review 才能合并<br>review 代码可以大家共同成长，统一代码规范。</p><h2 id="tox"><a href="#tox" class="headerlink" title="tox"></a>tox</h2><p><a href="https://iwiki.woa.com/pages/viewpage.action?pageId=758823139">THM中的tox命令行大全 - 腾讯iWiki (woa.com)</a></p><p>龙浩提供的 thm 仓库会提供 <code>open-dev-shell.cmd</code> 脚本，需要本机安装 thm<br>启动可以进入 thm 的命令行开发环境，配备了多个中心化部署的工具</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cd351e0/07.png" alt="enter image description here"></p><p>利用上面的 <code>tox -a</code> 可以查看龙浩提供的 tox 配置命令。<br>使用 <code>tox -e pkg-py</code> 可以初始化当前仓库，生成 package.py 和 setup.py 等一系列配置文件。<br>可以使用 <code>tox -e ide-code</code> 使用中心化的 vscode 打开当前仓库</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cd351e0/08.png" alt="enter image description here"></p><p>默认 package.py 已经配置好 docs 和 单元测试 等诸多环境。<br>环境变量利用 rez 的规则添加到 commands 函数里面。</p><hr><p>日常上传代码前使用 <code>tox -e preflight</code><br>会运行 <a href="https://pre-commit.com/">pre-commit</a>,<a href="https://github.com/psf/black">black</a>和<a href="https://pycqa.github.io/isort/">isort</a> 标准化所有的代码，也能提前发现一些文件错误。</p><p>后续使用 <code>git add &lt;文件&gt;</code> 命令将要提交的文件添加到 git 记录里。<br>commit 步骤 <code>tox -e commit</code>添加提交信息。(这样提交信息有统一规范)</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1cd351e0/09.png" alt="enter image description here"><br><a href="https://iwiki.woa.com/pages/viewpage.action?pageId=768400271">参考链接</a></p><hr><p>发布前可以使用 <code>tox -e build-test &lt;版本号&gt;</code> 测试是否可以正常发布 thm packages<br>如果 build-test 通过可以使用 <code>tox -e build &lt;版本号&gt;</code> 来发布到 thm 中心化云端上</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p><a href="https://www.chadvernon.com/blog/unit-testing-in-maya/">Unit Testing in Maya | Chad Vernon</a><br><a href="https://www.chadvernon.com/blog/unit-testing-in-maya-part-2/">Unit Testing in Maya (Part 2) | Chad Vernon</a></p><p>可以使用 龙浩 配置好的 tox 进行单元测试</p><h3 id="Qt-单元测试"><a href="#Qt-单元测试" class="headerlink" title="Qt 单元测试"></a>Qt 单元测试</h3><p><a href="https://pytest-qt.readthedocs.io/en/latest/">pytest-qt — pytest-qt documentation</a></p><h2 id="sphinx-文档生成"><a href="#sphinx-文档生成" class="headerlink" title="sphinx 文档生成"></a>sphinx 文档生成</h2><p><a href="https://www.jianshu.com/p/d38573785b66">使用 Sphinx 撰写技术文档并生成 PDF 总结 - 简书 (jianshu.com)</a></p><p><a href="https://www.sphinx-doc.org/en/master/usage/markdown.html">使用 Markdown 编写 Sphinx 文档</a></p><p>使用 龙浩 的 _build_docs 命令可以自动生成文档。</p><h2 id="Poetry-依赖管理"><a href="#Poetry-依赖管理" class="headerlink" title="Poetry 依赖管理"></a>Poetry 依赖管理</h2><p><a href="https://mp.weixin.qq.com/s/0tHCKnEpdFOmk8yKM7iDCQ">Poetry | PYTHON 打包和依赖管理变得简单 (qq.com)</a><br>基于 龙浩 提供的 thm(rez) 流程，不是十分需要 poetry。</p><h2 id="Sentry-错误追踪"><a href="#Sentry-错误追踪" class="headerlink" title="Sentry 错误追踪"></a>Sentry 错误追踪</h2><p><a href="https://mp.weixin.qq.com/s/PoBwVvREoeKQmGzcxK5LXQ">Sentry | 应用程序监控和错误跟踪 (qq.com)</a></p><h2 id="typing-静态类型检测"><a href="#typing-静态类型检测" class="headerlink" title="typing 静态类型检测"></a>typing 静态类型检测</h2><p><a href="https://github.com/python/mypy">python/mypy: Optional static typing for Python 3 and 2 (PEP 484) (github.com)</a></p>]]></content>
    
    <summary type="html">
    
      PEP8 规范 | Google Python Style Guide
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
      <category term="Python 编程规范" scheme="https://blog.l0v0.com/categories/Python/Python-%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
      <category term="࠴编程/编程规范" scheme="https://blog.l0v0.com/tags/%E0%A0%B4%E7%BC%96%E7%A8%8B-%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Python - Import 机制</title>
    <link href="https://blog.l0v0.com/posts/5e6e2bc7.html"/>
    <id>https://blog.l0v0.com/posts/5e6e2bc7.html</id>
    <published>2022-04-15T01:23:50.000Z</published>
    <updated>2022-12-14T02:54:16.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;你是否也会为 reload Python 的模块干到烦恼。<br>&emsp;&emsp;需要在不同的脚本加上 reload 导入的模块确保可以看到代码的更新。<br>&emsp;&emsp;Python 是怎么缓存 import 的模块的。</p></blockquote><p>TLDR;</p><blockquote><p>&emsp;&emsp;我后来了解了 Python 的加载机制之后弄了一个函数，只要将我们开发的包命名加上，就可以实现整个开发包 reload 。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">module_cleanup</span>(<span class="params">module_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Cleanup module_name in sys.modules cache.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        module_name (str): Module Name</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> module_name <span class="keyword">in</span> sys.builtin_module_names:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    packages = [mod <span class="keyword">for</span> mod <span class="keyword">in</span> sys.modules <span class="keyword">if</span> mod.startswith(<span class="string">&quot;%s.&quot;</span> % module_name)]</span><br><span class="line">    <span class="keyword">for</span> package <span class="keyword">in</span> packages + [module_name]:</span><br><span class="line">        module = sys.modules.get(package)</span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">del</span> sys.modules[package]  <span class="comment"># noqa:WPS420</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTES(timmyliang): 这个操作等同于对 test_module 下所有的 module 进行 reload</span></span><br><span class="line">module_cleanup(<span class="string">&quot;test_module&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;如果我们的 test_module 下有众多脚本就不需要逐个去添加 reload 了。<br>&emsp;&emsp;万一不小心把 reload 发布出去了也会稍微降低脚本运行的性能。</p></blockquote><h2 id="Python-Import"><a href="#Python-Import" class="headerlink" title="Python Import"></a>Python Import</h2><p><a href="https://docs.python.org/3/reference/import.html">https://docs.python.org/3/reference/import.html</a></p><!-- https://docs.python.org/3/library/sys.html#sys.modules --><blockquote><p>&emsp;&emsp;上面是 Python 的官方文档讲述 Python的 import 的时候背后的运行机理，也可以切换成中文进行阅读。<br>&emsp;&emsp;这里我将上面的文章结合自己的实践总结一番。</p></blockquote><blockquote><p>&emsp;&emsp;Python import 模块可以用关键字 <code>import</code> 或者 <code>importlib.import_module()</code><br>备注: 关键字调用无法放到 lambda 函数里面，这也是为什么 Python2 下默认 <code>print</code> 无法放入 lambda 里面， python3 <code>print</code> 不再是关键字可以放入 lambda<br>&emsp;&emsp;使用 <code>import</code> 关键字其实背后执行的是 <code>__import__()</code> 内置方法。<br>&emsp;&emsp;import 触发之后会从 <code>sys.modules</code> 查找缓存，找不到就从 <code>sys.path</code> 里面匹配模块 (这个过程也会触发 meta_path 等触发自定义的 import 行为)<br>&emsp;&emsp;找到匹配的模块就会创建模块 否则 <code>raise ModuleNotFoundError</code><br>&emsp;&emsp;生成的模块会放入到 <code>sys.modules</code> 进行缓存。</p></blockquote><p>import 执行操作(不考虑自定义 import 情况)</p><ol><li>从 <code>sys.modules</code> 查找模块缓存</li><li>从 <code>sys.path</code> 匹配脚本 生成模块 放入  <code>sys.modules</code> 缓存</li></ol><h3 id="sys-modules"><a href="#sys-modules" class="headerlink" title="sys.modules"></a>sys.modules</h3><blockquote><p>&emsp;&emsp;由于 <code>sys.modules</code> 的缓存机制，Python 下次导入就从已经加载的缓存中获取模块，导致模块用的还是旧的代码逻辑。<br>&emsp;&emsp;相应的也可以修改 sys.modules 的字典实现骚操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> a</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 打印 1</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;当然这种骚操作不推荐使用就是了。<br>&emsp;&emsp;另外还有一些危险的操作，比如 <code>del sys.modules[&quot;builtins&quot;]</code> 会让 Python 变得不正常<em>(:з」∠)</em></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> sys.modules[<span class="string">&quot;builtins&quot;</span>]  </span><br><span class="line"><span class="built_in">map</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment"># RuntimeError: lost builtins module</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;基于这个原理，如果将缓存清理了，下次 Python import 就会重新加载这个模块，实现 reload 的效果。<br>&emsp;&emsp;我最初也是在 mGear 的代码里面学习它们的 reload 方法学习到的。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5e6e2bc7/f00532dcd9c19a47bf2caf9012f31df4.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;它背后实现的代码就是 <code>del sys.modules[&quot;mgear&quot;]</code> 等相关的模块</p></blockquote><p><a href="https://docs.python.org/3/reference/import.html#the-module-cache">https://docs.python.org/3/reference/import.html#the-module-cache</a></p><blockquote><p>&emsp;&emsp;根据官方文档的说明，如果一个大模块下有很多子模块，都是单独键值缓存的。<br>&emsp;&emsp;所以要 reload 所有的子模块需要编译键值将匹配的都删除掉。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">module_cleanup</span>(<span class="params">module_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Cleanup module_name in sys.modules cache.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        module_name (str): Module Name</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> module_name <span class="keyword">in</span> sys.builtin_module_names:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    packages = [mod <span class="keyword">for</span> mod <span class="keyword">in</span> sys.modules <span class="keyword">if</span> mod.startswith(<span class="string">&quot;%s.&quot;</span> % module_name)]</span><br><span class="line">    <span class="keyword">for</span> package <span class="keyword">in</span> packages + [module_name]:</span><br><span class="line">        module = sys.modules.get(package)</span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">del</span> sys.modules[package]  <span class="comment"># noqa:WPS420</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTES(timmyliang): 这个操作等同于对 test_module 下所有的 module 进行 reload</span></span><br><span class="line">module_cleanup(<span class="string">&quot;test_module&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这个就是我整理的遍历所有匹配的模块进行缓存删除的函数，<code>sys.builtin_module_names</code> 通过规避对内置模块的清理。<br>&emsp;&emsp;这样源代码不需要添加 reload ，我们只在开发用的调试脚本添加这个函数执行 reload 即可。<br>&emsp;&emsp;另外有一个小小注意点，用这个删除缓存的方式 reload 会将之前的 module 删除生成新的 module 对象，但是如果用 <code>reload</code> 的话是沿用之前的 module 对象。<br>&emsp;&emsp;目前我实践上还没遇到过因为这个导致出现问题的情况。</p></blockquote><h2 id="packages-命名空间包"><a href="#packages-命名空间包" class="headerlink" title="packages 命名空间包"></a>packages 命名空间包</h2><p><a href="https://packaging.python.org/en/latest/guides/packaging-namespace-packages/">https://packaging.python.org/en/latest/guides/packaging-namespace-packages/</a></p><blockquote><p>&emsp;&emsp;按照上面链接提供的目录结构</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mynamespace-subpackage-a/</span><br><span class="line">    setup.py</span><br><span class="line">    mynamespace/</span><br><span class="line">        subpackage_a/</span><br><span class="line">            __init__.py</span><br><span class="line"></span><br><span class="line">mynamespace-subpackage-b/</span><br><span class="line">    setup.py</span><br><span class="line">    mynamespace/</span><br><span class="line">        subpackage_b/</span><br><span class="line">            __init__.py</span><br><span class="line">        module_b.py</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;然后就可以 <code>from mynamespace import subpackage_b</code> <code>from mynamespace import subpackage_a</code><br>&emsp;&emsp;用同一个 <code>mynamespace</code> 包导入两个不同路径的模块。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5e6e2bc7/db4d5d1b1d1d7fe61a561b13a9c00e2d.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;但是上面的链接也提到 命名空间包并不适用所有的情况，反而是用前缀包会更好。</p></blockquote><h3 id="模块遍历查找"><a href="#模块遍历查找" class="headerlink" title="模块遍历查找"></a>模块遍历查找</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pkgutil</span><br><span class="line"><span class="keyword">import</span> xml</span><br><span class="line"><span class="keyword">for</span> finder,name,ispkg <span class="keyword">in</span> pkgutil.walk_packages(xml.__path__,xml.__name__+<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(finder,name,ispkg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml&#x27;) xml.dom True</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.NodeFilter False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.domreg False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.expatbuilder False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.minicompat False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.minidom False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.pulldom False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.xmlbuilder False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml&#x27;) xml.etree True</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\etree&#x27;) xml.etree.ElementInclude False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\etree&#x27;) xml.etree.ElementPath False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\etree&#x27;) xml.etree.ElementTree False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\etree&#x27;) xml.etree.cElementTree False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml&#x27;) xml.parsers True</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\parsers&#x27;) xml.parsers.expat False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml&#x27;) xml.sax True</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\sax&#x27;) xml.sax._exceptions False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\sax&#x27;) xml.sax.expatreader False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\sax&#x27;) xml.sax.handler False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\sax&#x27;) xml.sax.saxutils False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\sax&#x27;) xml.sax.xmlreader False</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 <code>pkgutil.walk_packages</code> 可以遍历一个模块所有的子模块。<br>&emsp;&emsp;<code>from setuptools import find_packages</code> 也可以实现类似的功能<br>&emsp;&emsp;但是 <code>find_packages</code> 面对命名空间模块不好使，但是 <code>walk_packages</code> 好使。(原因是 <code>find_packages</code> 通过 <code>os.walk</code> 去查找路径的)<br>&emsp;&emsp;也可以通过这个方式将对应模块的缓存进行删除~</p></blockquote><h3 id="判断模块是否存在"><a href="#判断模块是否存在" class="headerlink" title="判断模块是否存在"></a>判断模块是否存在</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">importable</span>(<span class="params">module_name</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">__import__</span>(module_name)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;过去判断一模块是否可以 import 通常使用异常进行处理。<br>&emsp;&emsp;其实 <code>pkgutil.find_loader</code> 也可以返回模块是否可以 import</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pkgutil</span><br><span class="line">loader = pkgutil.find_loader(<span class="string">&quot;maya&quot;</span>)</span><br><span class="line">has_maya = loader <span class="keyword">and</span> loader.load_module(<span class="string">&quot;maya&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(has_maya) <span class="comment"># 如果存在返回 maya 库，不存在返回 None</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的方式就不需要用 exception 进行处理。(find_loader 的源码已经有 exception 的逻辑)</p></blockquote><blockquote><p>&emsp;&emsp;如果模块可以导入会返回对应的 <code>loader</code>，使用 <code>load_module</code> 可以进行加载。<br>注: py2 的 <code>load_module</code> 必须要传参。</p></blockquote><h2 id="自定义-import-行为"><a href="#自定义-import-行为" class="headerlink" title="自定义 import 行为"></a>自定义 import 行为</h2><blockquote><p>&emsp;&emsp;除了 <code>sys.path</code> 通过系统路径查找 python 包进行加载之外。<br>&emsp;&emsp;Python 还有 <code>sys.meta_path</code> 存储一系列 Finder 类 (Py3还需要 <code>Loader</code> 类) 来自定义 import 逻辑。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomFinder</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.submodule_search_locations = []</span><br><span class="line">        self.has_location = <span class="literal">False</span></span><br><span class="line">        self.origin = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_module</span>(<span class="params">self, spec</span>):</span><br><span class="line">        <span class="keyword">return</span> self.load_module(spec.name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exec_module</span>(<span class="params">self, module</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Execute the given module in its own namespace</span></span><br><span class="line"><span class="string">        This method is required to be present by importlib.abc.Loader,</span></span><br><span class="line"><span class="string">        but since we know our module object is already fully-formed,</span></span><br><span class="line"><span class="string">        this method merely no-ops.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_spec</span>(<span class="params">self, fullname,*args</span>):</span><br><span class="line">        self.name = fullname</span><br><span class="line">        self.loader = self</span><br><span class="line">        <span class="keyword">return</span> self.find_module()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># NOTES(timmyliang): compat with Python2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_module</span>(<span class="params">self,*args</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_module</span>(<span class="params">self, fullname</span>):</span><br><span class="line">        module = sys.modules.get(fullname)</span><br><span class="line">        <span class="keyword">if</span> module:</span><br><span class="line">            <span class="keyword">return</span> module</span><br><span class="line">        </span><br><span class="line">        new_module = types.ModuleType(fullname)</span><br><span class="line">        sys.modules[fullname] = new_module</span><br><span class="line">        new_module.__name__ = fullname</span><br><span class="line">        new_module.__loader__ = self</span><br><span class="line">        <span class="keyword">return</span> new_module</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sys.meta_path.append(CustomFinder())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">import</span> myapp</span><br><span class="line">    <span class="built_in">print</span>(myapp)  </span><br><span class="line">    <span class="comment"># Py3: &lt;module &#x27;myapp&#x27; (&lt;__main__.CustomFinder object at 0x000002A2A2904808&gt;)&gt;</span></span><br><span class="line">    <span class="comment"># Py2: &lt;module &#x27;myapp&#x27; (built-in)&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的代码实现了 py2 py3 的 Finder 兼容。<br>&emsp;&emsp;可以实现加载任意名称的模块都能成功返回而不会引发 ImportError<br>&emsp;&emsp;当然这种操作如果用到项目里面，肯定会被人打死 😄</p></blockquote><blockquote><p>&emsp;&emsp;在 Py2 环境下 Finder 需要实现 <code>find_module</code> 和 <code>load_module</code> 方法<br>&emsp;&emsp;Py3 环境可以参考下面的链接。</p></blockquote><p><a href="https://stackoverflow.com/a/58275573/13452951">https://stackoverflow.com/a/58275573/13452951</a></p><blockquote><p>&emsp;&emsp;需要有 Finder 需要实现 <code>find_spec</code> 返回 <code>ModuleSpec</code> 类，这个类需要有 <code>Loader</code> 进行加载逻辑</p></blockquote><blockquote><p>&emsp;&emsp;官方提供的 <code>zipimport.zipimporter</code> 在 Py2 下是 Finder ，在 Py3 下是 Loader。<br>&emsp;&emsp;可以从下面官方文档的类方法中看出来。</p></blockquote><p><a href="https://docs.python.org/2.7/library/zipimport.html?highlight=zip#module-zipimport">https://docs.python.org/2.7/library/zipimport.html?highlight=zip#module-zipimport</a><br><a href="https://docs.python.org/3.10/library/zipimport.html?highlight=zip#module-zipimport">https://docs.python.org/3.10/library/zipimport.html?highlight=zip#module-zipimport</a></p><blockquote><p>&emsp;&emsp;通过需改 import 机制，可以实现很多黑科技，但是推荐使用侵入性较小的使用方式。<br>&emsp;&emsp;这个机制可以让某个模块虚空导入而不报错，这不符合正常使用 Python 的逻辑，可能会让团队其他人很懵逼的。<br>&emsp;&emsp;如果某个 BUG 是因为这个机制导致的，其他人又不熟悉这块的话，那这问题查半天也不一定有结果 😢</p></blockquote><blockquote><p>&emsp;&emsp;这种黑科技的方式无法支持 mypy 类型检测和回溯，倒是可以做一些代码桩来实现提示，但不是很推荐。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;本次深入浅出地学习了 Python Import 的各种底层逻辑。<br>&emsp;&emsp;以后有机会的话也想好好学习一下 CPython 的底层实现。</p></blockquote>]]></content>
    
    <summary type="html">
    
      自动 unload 模块 &amp; meta import 学习
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
      <category term="工具开发" scheme="https://blog.l0v0.com/categories/Python/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python doit 库</title>
    <link href="https://blog.l0v0.com/posts/b552c0c3.html"/>
    <id>https://blog.l0v0.com/posts/b552c0c3.html</id>
    <published>2022-03-28T07:50:36.000Z</published>
    <updated>2022-12-14T02:54:16.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;代码开发的过程中可能遇到一些情况想要通过 代码 来自动执行命令行生成一些东西的情况。<br>&emsp;&emsp;如果不使用框架进行管理，这些代码脚本就很零碎地散落在各个地方。<br>&emsp;&emsp;因此就找到这个框架可以很方便管理多个任务，实现</p></blockquote><p><a href="https://github.com/pydoit/doit">Github 地址</a><br><a href="https://pydoit.org/">官方说明文档</a></p><h2 id="doit-的基本用法"><a href="#doit-的基本用法" class="headerlink" title="doit 的基本用法"></a>doit 的基本用法</h2><blockquote><p>&emsp;&emsp;在 doit 执行命令的地方添加一个 <code>dodo.py</code> 的脚本<br>&emsp;&emsp;doit 会去读取 <code>dodo.py</code> 里面命名开头为 <code>task_</code> 的方法作为执行的命令。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">task_hello</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;hello&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">python_hello</span>(<span class="params">targets</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(targets[<span class="number">0</span>], <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> output:</span><br><span class="line">            output.write(<span class="string">&quot;Python says Hello World!!!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;actions&#x27;</span>: [python_hello],</span><br><span class="line">        <span class="string">&#x27;targets&#x27;</span>: [<span class="string">&quot;hello.txt&quot;</span>],</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;比如添加上面的方法到 <code>dodo.py</code> 里面<br>&emsp;&emsp;执行 <code>doit list</code> 可以罗列出当前的可执行的命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F:\thm_git\adam_pose_editor&gt;doit list</span><br><span class="line">hello   hello</span><br><span class="line">F:\thm_git\adam_pose_editor&gt;doit hello</span><br><span class="line">.  hello</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;执行 <code>doit hello</code> 就会在 <code>dodo.py</code> 缩在目录下输出一个 hello.txt 的文件。<br>&emsp;&emsp;这个就是 doit 的基本用法。</p></blockquote><h3 id="dodo-py-配置"><a href="#dodo-py-配置" class="headerlink" title="dodo.py 配置"></a>dodo.py 配置</h3><p><a href="https://pydoit.org/configuration.html">https://pydoit.org/configuration.html</a></p><blockquote><p>&emsp;&emsp;可以使用 <code>doit -f xxx/dodo.py</code> 配置 <code>dodo.py</code> 的路径<br>&emsp;&emsp;也可以使用 <code>pyproject.toml</code> 进行配置</p></blockquote><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.doit]</span></span><br><span class="line"><span class="attr">dodoFile</span> = <span class="string">&quot;scripts/dodo.py&quot;</span></span><br></pre></td></tr></table></figure><h3 id="task-配置"><a href="#task-配置" class="headerlink" title="task 配置"></a>task 配置</h3><blockquote><p>&emsp;&emsp;<code>dodo.py</code> 的 task 支持导入<br>&emsp;&emsp;只要是 <code>task_</code> 前缀的方法就会自动识别。<br>&emsp;&emsp;也可以给函数添加 <code>create_doit_tasks</code> 属性，这样就可以自动生成了。 <a href="https://pydoit.org/task-creation.html#custom-task-definition">文档链接</a></p></blockquote><blockquote><p>&emsp;&emsp;利用这些机制，我搞了一个装饰器可以给 task 添加一个短名的方案。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_short_name</span>(<span class="params">short_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Doit for short decorator.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        short_name (str): short alias name.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        callable: decoartor function.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="built_in">globals</span>()[<span class="string">&quot;task_&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(short_name)] = func  <span class="comment"># noqa: WPS421</span></span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_short_name(<span class="params"><span class="string">&quot;pf&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_preflight</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run pre commit for all files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    command = [<span class="string">&quot;poetry&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;pre-commit&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;-a&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;actions&quot;</span>: [command], <span class="string">&quot;verbosity&quot;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这样运行 doit 会识别到两个 task ，可以分别通过 <code>doit pf</code> 或者 <code>doit preflight</code> 触发指令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;doit list </span><br><span class="line">pf          Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">preflight   Run pre commit <span class="keyword">for</span> all files.</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;但是默认排序是按命名来的，如果命令很多就会混在一起</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;doit list </span><br><span class="line">b             Run black format all python files.</span><br><span class="line">black         Run black format all python files.</span><br><span class="line">d             Run mkdocs serve.</span><br><span class="line"><span class="built_in">dd</span>            Run mike to deploy docs.</span><br><span class="line">docs          Run mkdocs serve.</span><br><span class="line">docs_deploy   Run mike to deploy docs.</span><br><span class="line">f             Run `black` `isort`.</span><br><span class="line">format        Run `black` `isort`.</span><br><span class="line">i             Run isort format all python files.</span><br><span class="line">isort         Run isort format all python files.</span><br><span class="line">l             Run flakehell lint <span class="keyword">for</span> all python files.</span><br><span class="line">lint          Run flakehell lint <span class="keyword">for</span> all python files.</span><br><span class="line">m             Run mike serve.</span><br><span class="line">mike          Run mike serve.</span><br><span class="line">pf            Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">preflight     Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">pt            Run pytest.</span><br><span class="line">pytest        Run pytest.</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;可以使用 doit list –sort=definition 的方式让排序变成创建顺序。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;doit list --<span class="built_in">sort</span>=definition</span><br><span class="line">f             Run `black` `isort`.</span><br><span class="line">format        Run `black` `isort`.</span><br><span class="line">pf            Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">preflight     Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">b             Run black format all python files.</span><br><span class="line">black         Run black format all python files.</span><br><span class="line">i             Run isort format all python files.</span><br><span class="line">isort         Run isort format all python files.</span><br><span class="line">l             Run flakehell lint <span class="keyword">for</span> all python files.</span><br><span class="line">lint          Run flakehell lint <span class="keyword">for</span> all python files.</span><br><span class="line">pt            Run pytest.</span><br><span class="line">pytest        Run pytest.</span><br><span class="line">d             Run mkdocs serve.</span><br><span class="line">docs          Run mkdocs serve.</span><br><span class="line">m             Run mike serve.</span><br><span class="line">mike          Run mike serve.</span><br><span class="line"><span class="built_in">dd</span>            Run mike to deploy docs.</span><br><span class="line">docs_deploy   Run mike to deploy docs.</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;但是每次使用都要加一个参数配置，那是相当的麻烦。<br>&emsp;&emsp;我们可以利用 <code>DOIT_CONFIG</code> 进行配置 <a href="https://pydoit.org/configuration.html#configuration-at-dodo-py">文档链接</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DOIT_CONFIG = &#123;</span><br><span class="line">    <span class="string">&quot;sort&quot;</span>: <span class="string">&quot;definition&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="task-group"><a href="#task-group" class="headerlink" title="task group"></a>task group</h3><blockquote><p>&emsp;&emsp;可以使用 <code>task_dep</code> 的方式执行多个定义好的 task <a href="https://pydoit.org/task-creation.html#custom-task-definition">文档链接</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">DIR = os.path.dirname(__file__)</span><br><span class="line">PY_FILES = glob.glob(os.path.join(DIR, <span class="string">&quot;**/*.py&quot;</span>), recursive=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">@add_short_name(<span class="params"><span class="string">&quot;f&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_format</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run `black` `isort`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;actions&quot;</span>: <span class="literal">None</span>, <span class="string">&quot;task_dep&quot;</span>: [<span class="string">&quot;black&quot;</span>, <span class="string">&quot;isort&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_short_name(<span class="params"><span class="string">&quot;b&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_black</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run black format all python files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    command = [<span class="string">&quot;poetry&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;black&quot;</span>] + PY_FILES</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;actions&quot;</span>: [command], <span class="string">&quot;verbosity&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@add_short_name(<span class="params"><span class="string">&quot;i&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_isort</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run isort format all python files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    command = [<span class="string">&quot;poetry&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;isort&quot;</span>] + PY_FILES</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;actions&quot;</span>: [command], <span class="string">&quot;verbosity&quot;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过上面的配置就可以快速给所有的 python 脚本运行 black 和 isort </p></blockquote><h3 id="task-传参"><a href="#task-传参" class="headerlink" title="task 传参"></a>task 传参</h3><p><a href="https://pydoit.org/task-args.html#task-action-parameters">文档链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen_api</span>(<span class="params">api</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate API docs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        api (bool): flag to generate docs</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        str: running command</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># NOTES(timmyliang): remove reference api</span></span><br><span class="line">    rmtree(os.path.join(DIR, <span class="string">&quot;docs&quot;</span>, <span class="string">&quot;reference&quot;</span>), ignore_errors=<span class="literal">True</span>)</span><br><span class="line">    script_path = os.path.join(DIR, <span class="string">&quot;docs&quot;</span>, <span class="string">&quot;gen_api_nav.py&quot;</span>)</span><br><span class="line">    api_command = <span class="string">&quot; &quot;</span>.join([<span class="string">&quot;poetry&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;python&quot;</span>, script_path])</span><br><span class="line">    serve_command = <span class="string">&quot; &quot;</span>.join([<span class="string">&quot;poetry&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;mkdocs&quot;</span>, <span class="string">&quot;serve&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;api_command&#125;</span> &amp; <span class="subst">&#123;serve_command&#125;</span>&quot;</span> <span class="keyword">if</span> api <span class="keyword">else</span> serve_command</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@add_short_name(<span class="params"><span class="string">&quot;d&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_docs</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run mkdocs serve.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;actions&quot;</span>: [CmdAction(gen_api)],</span><br><span class="line">        <span class="string">&quot;params&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;api&quot;</span>,</span><br><span class="line">                <span class="string">&quot;short&quot;</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="built_in">bool</span>,</span><br><span class="line">                <span class="string">&quot;default&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;inverse&quot;</span>: <span class="string">&quot;flagoff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;help&quot;</span>: <span class="string">&quot;generate api docs&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;verbosity&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 <code>params</code> 定义传入的参数，就可以控制 mkdocs 是否自动生成 api 的 markdown 脚本。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;目前我使用上面的写法已经很够用了，其实它还有很多其他的配置可以用来做 C 编译。<br>&emsp;&emsp;还可以定义 task 依赖 和 文件依赖，确保 task 的执行顺序。<br>&emsp;&emsp;整体而言，doit 是个非常简单而是用的框架，配置 tox 等工具可谓是锦上添花。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Python 任务管理命令行
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python dependencies 库</title>
    <link href="https://blog.l0v0.com/posts/7aa50252.html"/>
    <id>https://blog.l0v0.com/posts/7aa50252.html</id>
    <published>2022-03-28T01:50:26.000Z</published>
    <updated>2022-12-14T02:54:16.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;在 Java Spring Boot 等等的后端领域，会大量使用依赖注入的方式来简化复杂的设计模式。<br>&emsp;&emsp;实现参数的自动化注入。<br>&emsp;&emsp;这些设计方式在 Python 的世界里使用不多，因为 Python 语言足够灵活。<br>&emsp;&emsp;倘若需要开发复杂的框架，使用 依赖注入 框架可以简化很多代码。</p></blockquote><p><a href="https://github.com/proofit404/dependencies">Github 地址</a><br><a href="https://proofit404.github.io/dependencies/">官方说明文档</a></p><h2 id="依赖注入解决的问题"><a href="#依赖注入解决的问题" class="headerlink" title="依赖注入解决的问题"></a>依赖注入解决的问题</h2><p><a href="https://sobolevn.me/2020/02/typed-functional-dependency-injection">参考文章</a></p><blockquote><p>&emsp;&emsp;在日常开发中，我们的方法调用可能会越来越深。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot</span>(<span class="params">robot_name</span>):</span><br><span class="line">    create_robot_hand()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot_hand</span>():</span><br><span class="line">    create_robot_finger()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot_finger</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;create_robot_finger&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面是一个简单的机器人创建调用函数。<br>&emsp;&emsp;调用方式会伴随则系统的复杂程度逐层深入。<br>&emsp;&emsp;到了 <code>create_robot_finger</code> 深度的时候，可能会需要在上层传入参数控制 finger 的数量</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot</span>(<span class="params">robot_name,finger_num=<span class="number">10</span></span>):</span><br><span class="line">    create_robot_hand(finger_num=finger_num)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot_hand</span>(<span class="params">finger_num=<span class="number">10</span></span>):</span><br><span class="line">    create_robot_finger(finger_num=finger_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot_finger</span>(<span class="params">finger_num=<span class="number">10</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;create_robot_finger finder_number:&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(finger_num))</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这需要将参数补充到 调用链条 的每一个函数当中。<br>&emsp;&emsp;如果只是上面的 三层 调用深度，那可能手动修改维护还不是什么问题。<br>&emsp;&emsp;但倘若调用深度很深，那这个代码修改量就会非常庞大。<br>&emsp;&emsp;不利于代码的扩展和维护。</p></blockquote><hr><blockquote><p>&emsp;&emsp;在 Python 的世界里，解决这个问题的方法有很多。</p><ol><li>导入 配置 模块，外部获取参数配置</li><li>面向对象 注入依赖，从实例化中获取参数配置</li></ol></blockquote><h3 id="方案一-导入模块"><a href="#方案一-导入模块" class="headerlink" title="方案一 导入模块"></a>方案一 导入模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;settings.py&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"></span><br><span class="line">ROBOT_FINGER_NUM = <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot</span>(<span class="params">robot_name</span>):</span><br><span class="line">    create_robot_hand()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot_hand</span>():</span><br><span class="line">    create_robot_finger()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot_finger</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;create_robot_finger finder_number:&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(settings.ROBOT_FINGER_NUM))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过模块的方式将参数转移到外部，进行配置。<br>&emsp;&emsp;这个做法可以解决参数传递的问题。</p></blockquote><blockquote><p>&emsp;&emsp;缺点就是参数管理会比较麻烦，通常是将全局配置的参数都放到一个文件方便集中管理。<br>&emsp;&emsp;但是这样会导致不同的逻辑调用的参数都会塞到一个文件里面，并不是十分整洁。</p></blockquote><h3 id="方案二-注入依赖"><a href="#方案二-注入依赖" class="headerlink" title="方案二 注入依赖"></a>方案二 注入依赖</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dependencies <span class="keyword">import</span> Injector</span><br><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Robot</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    finger_num = attr.ib(default=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_robot</span>(<span class="params">self,robot_name</span>):</span><br><span class="line">        self.create_robot_hand()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_robot_hand</span>(<span class="params">self</span>):</span><br><span class="line">        self.create_robot_finger()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_robot_finger</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;create_robot_finger finder_number:&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(self.finger_num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span>(<span class="title class_ inherited__">Injector</span>):</span><br><span class="line">    finger_num = <span class="number">10</span></span><br><span class="line">    robot = Robot</span><br><span class="line">Container.robot.create_robot(<span class="string">&quot;robot name&quot;</span>)</span><br><span class="line"><span class="comment"># 打印 create_robot_finger finder_number:10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `dependencies` 的实现等价于下面的代码</span></span><br><span class="line">robot = Robot(finger_num=<span class="number">10</span>)</span><br><span class="line">robot.create_robot(<span class="string">&quot;robot name&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用 <code>dependencies</code> 库实现依赖注入，自动将容器内的数据填充到 类的实例化过程中。<br>&emsp;&emsp;通过类的属性实现参数传递。</p></blockquote><h2 id="dependencies-介绍"><a href="#dependencies-介绍" class="headerlink" title="dependencies 介绍"></a>dependencies 介绍</h2><blockquote><p>&emsp;&emsp;通过上面的案例可以看到。<br>&emsp;&emsp;<code>dependencies</code> 可以自动实例化类，填充类初始化需要的参数。<br>&emsp;&emsp;但它的功能还远不止这么简单。<br>&emsp;&emsp;它还可以实现多个类实例化的自动填充，只要参数变量名命名配置好即可。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dependencies <span class="keyword">import</span> Injector</span><br><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Robot</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    servo = attr.ib()</span><br><span class="line">    controller = attr.ib()</span><br><span class="line">    settings = attr.ib()</span><br><span class="line">    di_environment = attr.ib()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;controller di_environment&quot;</span>,self.controller.di_environment)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;self di_environment&quot;</span>,self.di_environment)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;settings threshold&quot;</span>,self.settings.threshold)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;servo threshold&quot;</span>,self.servo.threshold)</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Servo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    threshold = attr.ib()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Controller</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    di_environment = attr.ib()</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Settings</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    threshold = attr.ib()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span>(<span class="title class_ inherited__">Injector</span>):</span><br><span class="line">    threshold = <span class="number">1</span></span><br><span class="line">    di_environment = <span class="string">&quot;production&quot;</span></span><br><span class="line">    </span><br><span class="line">    robot = Robot</span><br><span class="line">    servo = Servo</span><br><span class="line">    settings = Settings</span><br><span class="line">    controller = Controller</span><br><span class="line"></span><br><span class="line">Container.robot.run()</span><br><span class="line"><span class="comment"># 打印: </span></span><br><span class="line"><span class="comment"># controller di_environment production</span></span><br><span class="line"><span class="comment"># self di_environment production</span></span><br><span class="line"><span class="comment"># settings threshold 1</span></span><br><span class="line"><span class="comment"># servo threshold 1</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 <code>dependencies</code> 可以根据属性命名自动填充多个类的参数数据。<br>&emsp;&emsp;container 的逻辑等价于下面的代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">threshold = <span class="number">1</span></span><br><span class="line">di_environment = <span class="string">&quot;production&quot;</span></span><br><span class="line">servo = Servo(threshold)</span><br><span class="line">settings = Settings(threshold)</span><br><span class="line">controller = Controller(di_environment)</span><br><span class="line">robot = Robot(servo,controller,settings,di_environment)</span><br><span class="line">robot.run()</span><br><span class="line"><span class="comment"># 打印: </span></span><br><span class="line"><span class="comment"># controller di_environment production</span></span><br><span class="line"><span class="comment"># self di_environment production</span></span><br><span class="line"><span class="comment"># settings threshold 1</span></span><br><span class="line"><span class="comment"># servo threshold 1</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;但是 <code>dependencies</code> 库根据参数的命名自动实例化对象，参数的调整变得简单可控。</p></blockquote><h2 id="dependencies-实现-caller-方法"><a href="#dependencies-实现-caller-方法" class="headerlink" title="dependencies 实现 caller 方法"></a>dependencies 实现 caller 方法</h2><p><a href="https://sobolevn.me/2019/03/enforcing-srp">参考文章</a></p><blockquote><p>&emsp;&emsp;利用 依赖注入 可以分离 依赖 和 业务 逻辑</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">from</span> dependencies <span class="keyword">import</span> Injector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Editor</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">install_language</span>(<span class="params">self,lang</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;install language:&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(lang))</span><br><span class="line"></span><br><span class="line">editor = Editor()</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s(<span class="params">frozen=<span class="literal">True</span>, slots=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangeLanguage</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    editor = attr.ib()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self,lang</span>):</span><br><span class="line">        self.editor.install_language(lang)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span>(<span class="title class_ inherited__">Injector</span>):</span><br><span class="line">    editor = editor</span><br><span class="line">    change_language = ChangeLanguage</span><br><span class="line"></span><br><span class="line">Container.change_language(<span class="string">&quot;en_US&quot;</span>)</span><br><span class="line"><span class="comment"># 打印: install language:en_US</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;利用 dependencies 可以构建出 caller 对象。<br>&emsp;&emsp;caller 虽然用类构建，但是调用方式和方法一致，可以方法需要用到的依赖用类实例化的方式进行注入。<br>&emsp;&emsp;实现依赖和传参的分离。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;依赖注入可以很好解决函数调用过深的问题，让代码结构更加清晰。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Python 依赖注入实现
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python blinker 库</title>
    <link href="https://blog.l0v0.com/posts/9ad5ab39.html"/>
    <id>https://blog.l0v0.com/posts/9ad5ab39.html</id>
    <published>2022-02-28T12:47:25.000Z</published>
    <updated>2022-12-14T02:54:16.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;Qt 内置了非常棒的 信号槽的函数。<br>&emsp;&emsp;可以让 UI 进行异步调用。<br>&emsp;&emsp;但是有些时候，并不想依赖 Qt 框架同时又能实现信号槽的功能。<br>&emsp;&emsp;这里可以使用 <code>blinker</code> 库来完成。</p></blockquote><p><a href="https://pythonhosted.org/blinker/">Github 地址</a><br><a href="https://github.com/jek/blinker">官方说明文档</a></p><h2 id="blinker-基本用法"><a href="#blinker-基本用法" class="headerlink" title="blinker 基本用法"></a>blinker 基本用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> signal,Signal</span><br><span class="line"></span><br><span class="line">initialized = signal(<span class="string">&#x27;initialized&#x27;</span>)</span><br><span class="line">initialized <span class="keyword">is</span> signal(<span class="string">&#x27;initialized&#x27;</span>)</span><br><span class="line">sig = Signal()</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;可以使用匿名信号槽，也可以使用带名称的信号槽。</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> signal</span><br><span class="line">send_data = signal(<span class="string">&#x27;send-data&#x27;</span>)</span><br><span class="line"><span class="meta">@send_data.connect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_data</span>(<span class="params">sender, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Caught signal from %r, data %r&quot;</span> % (sender, kw))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;received!&#x27;</span></span><br><span class="line">result = send_data.send(<span class="string">&#x27;anonymous&#x27;</span>, abc=<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 打印 [(&lt;function receive_data at 0x000002A3328D4DC8&gt;, &#x27;received!&#x27;)]</span></span><br><span class="line"><span class="comment"># 打印 Caught signal from &#x27;anonymous&#x27;, data &#123;&#x27;abc&#x27;: 123&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;可以用装饰器的方式连接信号槽<br>&emsp;&emsp;触发信号槽使用 send 方法<br>&emsp;&emsp;并且信号槽执行完可以拿到函数触发的返回值。</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line">dice_roll = signal(<span class="string">&#x27;dice_roll&#x27;</span>)</span><br><span class="line"><span class="meta">@dice_roll.connect_via(<span class="params"><span class="number">1</span></span>)</span></span><br><span class="line"><span class="meta">@dice_roll.connect_via(<span class="params"><span class="number">3</span></span>)</span></span><br><span class="line"><span class="meta">@dice_roll.connect_via(<span class="params"><span class="number">5</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">odd_subscriber</span>(<span class="params">sender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Observed dice roll %r.&quot;</span> % sender)</span><br><span class="line">result = dice_roll.send(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;另外一个特点就是可以根据触发的参数去触发相应注册的函数。<br>&emsp;&emsp;Qt 因为要使用 C++，这种注册方式会非常麻烦。</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line">initialized = signal(<span class="string">&quot;initialized&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@initialized.connect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize_call1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;initialize_call1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@initialized.connect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize_call2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;initialize_call2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@initialized.connect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize_call3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;initialize_call3&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, weakref <span class="keyword">in</span> initialized.receivers.items():</span><br><span class="line">    func = weakref()</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印: </span></span><br><span class="line"><span class="comment"># initialize_call1</span></span><br><span class="line"><span class="comment"># initialize_call2</span></span><br><span class="line"><span class="comment"># initialize_call3</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过信号槽的 <code>receivers</code> 方法可以获取到注册到信号槽的所有函数。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;这个库可以摆脱 Qt 的依赖实现函数的异步调用。<br>&emsp;&emsp;如果是 Qt 的环境建议还是使用 Qt 内置的 信号槽，这样可以支持 Qt 的多线程等处理。<br>&emsp;&emsp;但如果是 Python 环境下想要摆脱 Qt 的依赖，则推荐 blinker 来完成信号触发。<br>&emsp;&emsp;blinker 还有个好处是可以获取到注册的函数列表，而 Qt 基于 C++ 的并没有提供这个功能，只能通过 Meta 对象来判断这个信号槽是否有函数连接。 <a href="https://github.com/PyQt5/PyQt/blob/0c8e7d33d7a1da7a53a6b6d15869095f1626faf0/Demo/IsSignalConnected.py">参考实现</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      纯 Python 信号槽库
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python marshmallow 库</title>
    <link href="https://blog.l0v0.com/posts/2c8022e3.html"/>
    <id>https://blog.l0v0.com/posts/2c8022e3.html</id>
    <published>2022-02-28T07:37:44.000Z</published>
    <updated>2022-12-14T02:54:16.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;使用 Python 经常需要将一些数据序列化存储到本地<br>&emsp;&emsp;同时又想要反序列化将本地的 json 数据转换为对象。<br>&emsp;&emsp;通常的解决方案是使用数据库的 orm 方案，用 orm 对象来同步数据库。<br>&emsp;&emsp;数据全部附着在 orm 上，当 orm 上的数据改变时直接修改到数据库上。</p></blockquote><blockquote><p>&emsp;&emsp;但是在我的工作使用场景中，Data Centric 的流程更为推崇，因此输出一个 json 文件会更好一点。<br>&emsp;&emsp;那么 marshmallow 库就是一个很不错的选项。</p></blockquote><blockquote><p>&emsp;&emsp;另外这个库可以和 之前提到的 attrs 库可以结合使用。 <a href="./1f4cc7d1.html">文章</a></p></blockquote><p><a href="https://github.com/marshmallow-code/marshmallow">Github 地址</a><br><a href="https://marshmallow.readthedocs.io/en/stable/">官方说明文档</a></p><h2 id="什么是序列化-什么是-orm"><a href="#什么是序列化-什么是-orm" class="headerlink" title="什么是序列化 什么是 orm"></a>什么是序列化 什么是 orm</h2><blockquote><p>&emsp;&emsp;序列化就是将代码对象转换为纯数据进行存储<br>&emsp;&emsp;反序列化就是将纯数据重新转换为 代码对象<br>&emsp;&emsp;代码对象可以拥有特定的方法，可以直接触发对数据的处理。</p></blockquote><blockquote><p>&emsp;&emsp;orm 全称是 Object-relational Mappers<br>&emsp;&emsp;通常是一个定义了对象实例化规则的类。<br>&emsp;&emsp;通过操作这个类的实例就可以用代码的方式将数据进行互相转换。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/2c8022e3/01.png" alt="alt"></p><blockquote><p>&emsp;&emsp;上面的图片就是传统 orm 实现的效果，可以用 orm 对象来执行 sql 语句从而简化数据库同步的操作，同时也增加了代码的安全性。<br>&emsp;&emsp;这个操作实现了内存到硬盘桥梁，管理更加清晰方便。</p></blockquote><h2 id="marshmallow-介绍"><a href="#marshmallow-介绍" class="headerlink" title="marshmallow 介绍"></a>marshmallow 介绍</h2><h3 id="marshmallow-基本用法"><a href="#marshmallow-基本用法" class="headerlink" title="marshmallow 基本用法"></a>marshmallow 基本用法</h3><blockquote><p>&emsp;&emsp;和其他 orm 库一样，marshmallow 需要定义 Schema 类作为数据约束。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Album</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    title = attr.ib()</span><br><span class="line">    artist = attr.ib()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Artist</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    name = attr.ib()</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE 生成 Python 对象</span></span><br><span class="line">bowie = Artist(name=<span class="string">&quot;David Bowie&quot;</span>)</span><br><span class="line">album = Album(artist=bowie, title=<span class="string">&quot;Hunky Dory&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE 定义 Schema 来约束数据转换</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArtistSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.Str()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title = fields.Str()</span><br><span class="line">    artist = fields.Nested(ArtistSchema())</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE 通过 Schema 将对象转换为字典</span></span><br><span class="line">schema = AlbumSchema()</span><br><span class="line">result = schema.dump(album)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># &#123;&#x27;artist&#x27;: &#123;&#x27;name&#x27;: &#x27;David Bowie&#x27;&#125;, &#x27;title&#x27;: &#x27;Hunky Dory&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">result = schema.dumps(album)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment"># &#x27;&#123;&quot;artist&quot;: &#123;&quot;name&quot;: &quot;David Bowie&quot;&#125;, &quot;title&quot;: &quot;Hunky Dory&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">album = schema.loads(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(album))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(album)  <span class="comment"># &#123;&#x27;artist&#x27;: &#123;&#x27;name&#x27;: &#x27;David Bowie&#x27;&#125;, &#x27;title&#x27;: &#x27;Hunky Dory&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 Schema 定义好数据对象的转换方式。<br>&emsp;&emsp;<code>dump</code> 可以将对象数据转换为字典，<code>dumps</code> 则是转换为 字符串<br>&emsp;&emsp;<code>load</code> 可以将字典转换为对象(默认是字典，需要额外的处理才可以)，<code>loads</code> 可以将字符串转换为对象。</p></blockquote><h3 id="反序列化为对象"><a href="#反序列化为对象" class="headerlink" title="反序列化为对象"></a>反序列化为对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, post_load</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Album</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    title = attr.ib()</span><br><span class="line">    artist = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Artist</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    name = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArtistSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.Str()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArtistSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.Str()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_artist</span>(<span class="params">self, data, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Artist(**data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title = fields.Str()</span><br><span class="line">    artist = fields.Nested(ArtistSchema())</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_album</span>(<span class="params">self, data, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Album(**data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bowie = Artist(name=<span class="string">&quot;David Bowie&quot;</span>)</span><br><span class="line">album = Album(artist=bowie, title=<span class="string">&quot;Hunky Dory&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE 通过 Schema 将对象转换为字典</span></span><br><span class="line">schema = AlbumSchema()</span><br><span class="line">result = schema.dumps(album)</span><br><span class="line">album = schema.loads(result)</span><br><span class="line"><span class="built_in">print</span>(album)  <span class="comment"># Album(title=&#x27;Hunky Dory&#x27;, artist=Artist(name=&#x27;David Bowie&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(album.title)  <span class="comment"># Hunky Dory</span></span><br><span class="line"><span class="built_in">print</span>(album.artist)  <span class="comment"># Artist(name=&#x27;David Bowie&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(album.artist.name)  <span class="comment"># David Bowie</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过加入 <code>post_load</code> 装饰器可以将字典数据做进一步的转换。<br>&emsp;&emsp;使用 attrs 库就不需要在 <code>__init__</code> 函数中写入大量传参和初始化数据的信息了。</p></blockquote><h3 id="嵌套-Schema"><a href="#嵌套-Schema" class="headerlink" title="嵌套 Schema"></a>嵌套 Schema</h3><p><a href="https://marshmallow.readthedocs.io/en/stable/nesting.html">官方文档</a></p><blockquote><p>&emsp;&emsp;通过 <code>fields.Nested</code> 的方法定义嵌套的对象，从而序列化和反序列化可以复用 Schema。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(<span class="title class_ inherited__">Dict</span>):</span><br><span class="line">    title = attr.ib()</span><br><span class="line">    author = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(<span class="title class_ inherited__">Dict</span>):</span><br><span class="line">    name = attr.ib()</span><br><span class="line">    books = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">potter = Book(<span class="string">&quot;potter&quot;</span>, <span class="string">&quot;JK&quot;</span>)</span><br><span class="line">JK = Author(<span class="string">&quot;JK&quot;</span>, [potter])</span><br><span class="line">potter.author = JK</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title = fields.Str()</span><br><span class="line">    author = fields.Nested(<span class="string">&quot;AuthorSchema&quot;</span>, only=(<span class="string">&quot;name&quot;</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.Str()</span><br><span class="line">    books = fields.<span class="type">List</span>(fields.Nested(<span class="string">&quot;BookSchema&quot;</span>, exclude=(<span class="string">&quot;author&quot;</span>,)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">schema = BookSchema()</span><br><span class="line">res = schema.dump(potter)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># &#123;&#x27;title&#x27;: &#x27;potter&#x27;, &#x27;author&#x27;: &#123;&#x27;name&#x27;: &#x27;JK&#x27;&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="自定义-Field"><a href="#自定义-Field" class="headerlink" title="自定义 Field"></a>自定义 Field</h3><p><a href="https://marshmallow.readthedocs.io/en/stable/custom_fields.html">官方文档</a></p><blockquote><p>&emsp;&emsp;默认提供的 field 可能不能满足需求。<br>&emsp;&emsp;有些库的 field 需要自定义复杂的 序列化 和 反序列化操作。<br>&emsp;&emsp;这个时候就可以定义自己的 field 来解决问题。</p></blockquote><blockquote><p>&emsp;&emsp;简单的情况可以使用 <code>Method</code> 和 <code>Function</code> 来解决问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.String()</span><br><span class="line">    created_at = fields.DateTime()</span><br><span class="line">    since_created = fields.Method(<span class="string">&quot;get_days_since_created&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_days_since_created</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> dt.datetime.now().day - obj.created_at.day</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.String()</span><br><span class="line">    created_at = fields.DateTime()</span><br><span class="line">    uppername = fields.Function(<span class="keyword">lambda</span> obj: obj.name.upper())</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;默认情况下是 serialize 函数，如果要自定义 deserialize 可以使用  <code>Method</code> 和 <code>Function</code> 传入 deserialize 参数进行指定。</p></blockquote><blockquote><p>&emsp;&emsp;复杂的情况就需要 <code>fields.Field</code> 类。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> fields, ValidationError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PinCode</span>(fields.Field):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Field that serializes to a string of numbers and deserializes</span></span><br><span class="line"><span class="string">    to a list of numbers.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_serialize</span>(<span class="params">self, value, attr, obj, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(d) <span class="keyword">for</span> d <span class="keyword">in</span> value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_deserialize</span>(<span class="params">self, value, attr, data, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="built_in">int</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> value]</span><br><span class="line">        <span class="keyword">except</span> ValueError <span class="keyword">as</span> error:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&quot;Pin codes must contain only digits.&quot;</span>) <span class="keyword">from</span> error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.String()</span><br><span class="line">    created_at = fields.DateTime()</span><br><span class="line">    pin_code = PinCode()</span><br></pre></td></tr></table></figure><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="双向嵌套数据"><a href="#双向嵌套数据" class="headerlink" title="双向嵌套数据"></a>双向嵌套数据</h3><blockquote><p>&emsp;&emsp;如果数据存在相互嵌套引用的关系，是无法通过原生的 json 内置库进行序列化的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> addict <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(<span class="title class_ inherited__">Dict</span>):</span><br><span class="line">    title = attr.ib()</span><br><span class="line">    author = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(<span class="title class_ inherited__">Dict</span>):</span><br><span class="line">    name = attr.ib()</span><br><span class="line">    books = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">potter = Book(<span class="string">&quot;potter&quot;</span>, <span class="string">&quot;JK&quot;</span>)</span><br><span class="line">JK = Author(<span class="string">&quot;JK&quot;</span>, [potter])</span><br><span class="line">potter.author = JK</span><br><span class="line"><span class="built_in">print</span>(json.dumps(potter))</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;f:/repo/_blog/source/_posts/Python/pacakge/02_marshmallow.py&quot;, line 22, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     print(json.dumps(potter))</span></span><br><span class="line"><span class="comment">#   File &quot;C:\tools\Anaconda3\lib\json\__init__.py&quot;, line 231, in dumps</span></span><br><span class="line"><span class="comment">#     return _default_encoder.encode(obj)</span></span><br><span class="line"><span class="comment">#   File &quot;C:\tools\Anaconda3\lib\json\encoder.py&quot;, line 199, in encode</span></span><br><span class="line"><span class="comment">#     chunks = self.iterencode(o, _one_shot=True)</span></span><br><span class="line"><span class="comment">#   File &quot;C:\tools\Anaconda3\lib\json\encoder.py&quot;, line 257, in iterencode</span></span><br><span class="line"><span class="comment">#     return _iterencode(o, 0)</span></span><br><span class="line"><span class="comment"># ValueError: Circular reference detected</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;marshmallow 则需要通过 Schema 的定义过滤掉特定的嵌套键值才可用。<br>&emsp;&emsp;并且加载数据的时候并不能还原它们原有的关联关系。<br>&emsp;&emsp;需要自己的手动去定义反序列化之后的操作。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> addict <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields,post_load</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(<span class="title class_ inherited__">Dict</span>):</span><br><span class="line">    title = attr.ib()</span><br><span class="line">    author = attr.ib(default=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(<span class="title class_ inherited__">Dict</span>):</span><br><span class="line">    name = attr.ib()</span><br><span class="line">    books = attr.ib(factory=<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">potter = Book(<span class="string">&quot;potter&quot;</span>, <span class="string">&quot;JK&quot;</span>)</span><br><span class="line">JK = Author(<span class="string">&quot;JK&quot;</span>, [potter])</span><br><span class="line">potter.author = JK</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title = fields.Str()</span><br><span class="line">    author = fields.Nested(<span class="string">&quot;AuthorSchema&quot;</span>, only=(<span class="string">&quot;name&quot;</span>,))</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_object</span>(<span class="params">self, data, **kwargs</span>):</span><br><span class="line">        book = Book(**data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;author&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">            books = book.author.books</span><br><span class="line">            <span class="keyword">if</span> book <span class="keyword">not</span> <span class="keyword">in</span> books:</span><br><span class="line">                books.append(book)</span><br><span class="line">        <span class="keyword">return</span> book</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.Str()</span><br><span class="line">    books = fields.<span class="type">List</span>(fields.Nested(<span class="string">&quot;BookSchema&quot;</span>, exclude=(<span class="string">&quot;author&quot;</span>,)))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_object</span>(<span class="params">self, data, **kwargs</span>):</span><br><span class="line">        author = Author(**data)</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> author.books:</span><br><span class="line">            book.author = author</span><br><span class="line">        <span class="keyword">return</span> author</span><br><span class="line"></span><br><span class="line">schema = BookSchema()</span><br><span class="line">res = schema.dumps(potter).data</span><br><span class="line"></span><br><span class="line">new_potter = schema.loads(res).data</span><br><span class="line"><span class="built_in">print</span>(potter)  <span class="comment"># Book(title=&#x27;potter&#x27;, author=Author(name=&#x27;JK&#x27;, books=[...]))</span></span><br><span class="line"><span class="built_in">print</span>(new_potter)  <span class="comment"># Book(title=&#x27;potter&#x27;, author=Author(name=&#x27;JK&#x27;, books=[...]))</span></span><br><span class="line"></span><br><span class="line">schema = AuthorSchema()</span><br><span class="line">res = schema.dumps(JK).data</span><br><span class="line">new_JK = schema.loads(res).data</span><br><span class="line"><span class="built_in">print</span>(JK)  <span class="comment"># Author(name=&#x27;JK&#x27;, books=[Book(title=&#x27;potter&#x27;, author=...)])</span></span><br><span class="line"><span class="built_in">print</span>(new_JK)  <span class="comment"># Author(name=&#x27;JK&#x27;, books=[Book(title=&#x27;potter&#x27;, author=...)])</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;关系重建需要手动处理。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;使用 marshmallow 可以很方便实现数据序列化。<br>&emsp;&emsp;使用的时候可以配合 <code>addict</code> 以及下一篇文章要介绍的 <code>cerberus</code> 结合使用。<br>&emsp;&emsp;可以让使用体验更上一层楼。</p></blockquote>]]></content>
    
    <summary type="html">
    
      序列化 orm 工具
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
</feed>
