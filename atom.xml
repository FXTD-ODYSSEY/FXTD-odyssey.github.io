<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>智伤帝的个人博客</title>
  
  <subtitle>岁月不饶人，我亦未曾饶过岁月。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.l0v0.com/"/>
  <updated>2022-07-21T06:37:45.583Z</updated>
  <id>https://blog.l0v0.com/</id>
  
  <author>
    <name>智伤帝</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unreal C++ 工具开发最小实践</title>
    <link href="https://blog.l0v0.com/posts/cab0d099.html"/>
    <id>https://blog.l0v0.com/posts/cab0d099.html</id>
    <published>2022-07-15T08:00:58.000Z</published>
    <updated>2022-07-21T06:37:45.583Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;Unreal 的学习浩瀚且博杂，有时候一个最小 Demo 就是很好的学习起点。<br>&emsp;&emsp;想起我以前翻阅 UE 的源码一大堆的文件，看得我是无比头疼。<br>&emsp;&emsp;偶然间发现 CSDN YakSue 写了好多篇 Unreal 工具开发的 介绍。<br>&emsp;&emsp;虽然没有配上 Github 链接，但是源码都在文章里面体现了。<br>&emsp;&emsp;对于工具开发的不同模块都大有裨益。<br>&emsp;&emsp;于是我将这些内容整合到一起，并且详细讲解其中实现的核心点。</p></blockquote><h2 id="Custom-Asset"><a href="#Custom-Asset" class="headerlink" title="Custom Asset"></a>Custom Asset</h2><p><a href="https://yaksue.blog.csdn.net/article/details/107646900" target="_blank" rel="noopener">https://yaksue.blog.csdn.net/article/details/107646900</a><br><a href="https://github.com/FXTD-ODYSSEY/Unreal-Playground/tree/main/Plugins/Yaksue/TestAssetEditorPlg" target="_blank" rel="noopener">https://github.com/FXTD-ODYSSEY/Unreal-Playground/tree/main/Plugins/Yaksue/TestAssetEditorPlg</a></p><blockquote><p>&emsp;&emsp;创建一个自定义的 Asset 需要有三个类</p><ol><li>Asset (UObject)</li><li>AssetFactory (UFactory)</li><li>AssetTypeActions (FAssetTypeActions_Base)</li></ol></blockquote><blockquote><p>&emsp;&emsp;Asset 描述对象本身的数据<br>&emsp;&emsp;AssetFactory 描述如何创建对象<br>&emsp;&emsp;AssetTypeActions 返回对象显示的信息</p></blockquote><blockquote><p>&emsp;&emsp;<code>AssetTypeActions</code> 包含方法 <code>GetName</code> <code>GetTypeColor</code> <code>GetSupportedClass</code> <code>GetCategories</code> 用来描述对应的信息。<br>&emsp;&emsp;<code>GetCategories</code> 会分配 Asset 所属的位置。</p></blockquote><blockquote><p>&emsp;&emsp;这个方式默认打开的窗口是 Details Panel.<br>&emsp;&emsp;如果想要自定义打开的窗口需要添加 <code>FAssetEditorToolkit</code> 类<br>&emsp;&emsp;<code>AssetTypeActions</code> 添加 <code>OpenAssetEditor</code> 方法将 Toolkit 生成并初始化。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FAssetEditorToolkit</span><br><span class="line">  GetToolkitFName</span><br><span class="line">  GetBaseToolkitName</span><br><span class="line">  GetWorldCentricTabPrefix</span><br><span class="line">  GetWorldCentricTabColorScale</span><br><span class="line">  Initialize</span><br><span class="line">  RegisterTabSpawners</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>RegisterTabSpawners</code> 通过这个方法注册生产 Tab 的 ID<br>&emsp;&emsp;后续通过 <code>Initialize</code> 方法调用 AddTab 将 Register 的 Tab 生成。<br>&emsp;&emsp;最后通过 <code>FAssetEditorToolkit::InitAssetEditor</code> 完成 Toolkit 的初始化</p></blockquote><hr><blockquote><p>&emsp;&emsp;如果不想将 Asset 放到 <code>EAssetTypeCategories::Misc</code> 的分类中。<br>&emsp;&emsp;也可以构建一个新的标签附上去。<br>&emsp;&emsp;只是需要将 factory 相关的 <code>GetMenuCategories</code> 放入去掉。<br>&emsp;&emsp;我之前没有去掉，一直很疑惑为啥自定义菜单没有生效。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FYaksueTestAssetTypeActions::FYaksueTestAssetTypeActions()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> 注册新的分类</span></span><br><span class="line">IAssetTools &amp;AssetTools = FModuleManager::LoadModuleChecked&lt;FAssetToolsModule&gt;(<span class="string">"AssetTools"</span>).Get();</span><br><span class="line">    AssetCategory = AssetTools.RegisterAdvancedAssetCategory(FName(TEXT(<span class="string">"Custom Assets"</span>)), LOCTEXT(<span class="string">"CustomAssetCategory"</span>, <span class="string">"Custom Assets"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">uint32 <span class="title">FYaksueTestAssetTypeActions::GetCategories</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> AssetCategory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;构造函数注册新的分类，头文件需要添加上定义 <code>FYaksueTestAssetTypeActions();</code> <code>EAssetTypeCategories::Type AssetCategory;</code></p></blockquote><h2 id="Custom-Filter"><a href="#Custom-Filter" class="headerlink" title="Custom Filter"></a>Custom Filter</h2><p><a href="https://yaksue.blog.csdn.net/article/details/120929455" target="_blank" rel="noopener">https://yaksue.blog.csdn.net/article/details/120929455</a><br><a href="https://github.com/FXTD-ODYSSEY/Unreal-Playground/tree/main/Plugins/Yaksue/TestCustomFilter" target="_blank" rel="noopener">https://github.com/FXTD-ODYSSEY/Unreal-Playground/tree/main/Plugins/Yaksue/TestCustomFilter</a></p><blockquote><p>&emsp;&emsp;继承 <code>UContentBrowserFrontEndFilterExtension</code> 可以通过 override <code>AddFrontEndFilterExtensions</code> 方法扩展 filter。<br>&emsp;&emsp;生成一个 <code>FFrontendFilter</code> 子类，然后通过 <code>AddFrontEndFilterExtensions</code> 将过滤对象添加到过滤列表里面。<br>&emsp;&emsp;<code>FFrontendFilter</code> 最核心的方法就是 <code>PassesFilter</code> 它会将每个 item 传到这个函数返回 bool 来决定是否显示。</p></blockquote><!-- TODO PassesFilter item wrong --><h2 id="Slate"><a href="#Slate" class="headerlink" title="Slate"></a>Slate</h2><p><a href="https://yaksue.blog.csdn.net/article/details/110084013" target="_blank" rel="noopener">https://yaksue.blog.csdn.net/article/details/110084013</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Put your tab content here!</span></span><br><span class="line">SNew(SOverlay)</span><br><span class="line">+ SOverlay::Slot()<span class="comment">//底层</span></span><br><span class="line">[</span><br><span class="line">SNew(SHorizontalBox)</span><br><span class="line">+ SHorizontalBox::Slot().FillWidth(<span class="number">0.3f</span>)<span class="comment">//占30%</span></span><br><span class="line">[</span><br><span class="line">SNew(SButton)<span class="number">1</span></span><br><span class="line">]</span><br><span class="line">+ SHorizontalBox::Slot().FillWidth(<span class="number">0.7f</span>)<span class="comment">//占70%</span></span><br><span class="line">[</span><br><span class="line">SNew(SVerticalBox)</span><br><span class="line">+ SVerticalBox::Slot().FillHeight(<span class="number">0.5f</span>)<span class="comment">//占50%</span></span><br><span class="line">[</span><br><span class="line">SNew(SButton)</span><br><span class="line">]</span><br><span class="line">+ SVerticalBox::Slot().FillHeight(<span class="number">0.5f</span>)<span class="comment">//占50%</span></span><br><span class="line">[</span><br><span class="line">SNew(SButton)</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">+ SOverlay::Slot()<span class="comment">//顶层</span></span><br><span class="line">[</span><br><span class="line">SNew(SHorizontalBox)</span><br><span class="line">+ SHorizontalBox::Slot().FillWidth(<span class="number">1.0f</span>)<span class="comment">//占满剩余空间</span></span><br><span class="line">+ SHorizontalBox::Slot().AutoWidth()</span><br><span class="line">[</span><br><span class="line">SNew(SVerticalBox)</span><br><span class="line">+ SVerticalBox::Slot().FillHeight(<span class="number">1.0f</span>)<span class="comment">//占满剩余空间</span></span><br><span class="line">+ SVerticalBox::Slot().AutoHeight()</span><br><span class="line">[</span><br><span class="line">SNew(SBox)</span><br><span class="line">.HeightOverride(<span class="number">128</span>)</span><br><span class="line">.WidthOverride(<span class="number">128</span>)</span><br><span class="line">[</span><br><span class="line">SNew(SButton)</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">+ SVerticalBox::Slot().FillHeight(<span class="number">1.0f</span>)<span class="comment">//占满剩余空间</span></span><br><span class="line">]</span><br><span class="line">+ SHorizontalBox::Slot().FillWidth(<span class="number">1.0f</span>)<span class="comment">//占满剩余空间</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用 Unreal Slate 构建窗口，通过代码的属性结构来描述 UI 的构成和配置。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201124215104568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM0MTIzOTE=,size_16,color_FFFFFF,t_70#pic_center" alt="alt"></p><h2 id="DockTab-Layout"><a href="#DockTab-Layout" class="headerlink" title="DockTab Layout"></a>DockTab Layout</h2><p><a href="https://yaksue.blog.csdn.net/article/details/109321869" target="_blank" rel="noopener">https://yaksue.blog.csdn.net/article/details/109321869</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FTestLayoutWindowModule::StartupModule</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module</span></span><br><span class="line"></span><br><span class="line">FTestLayoutWindowStyle::Initialize();</span><br><span class="line">FTestLayoutWindowStyle::ReloadTextures();</span><br><span class="line"></span><br><span class="line">FTestLayoutWindowCommands::Register();</span><br><span class="line"></span><br><span class="line">PluginCommands = MakeShareable(<span class="keyword">new</span> FUICommandList);</span><br><span class="line"></span><br><span class="line">PluginCommands-&gt;MapAction(</span><br><span class="line">FTestLayoutWindowCommands::Get().OpenLayoutWindow,</span><br><span class="line">FExecuteAction::CreateRaw(<span class="keyword">this</span>, &amp;FTestLayoutWindowModule::PluginButtonClicked),</span><br><span class="line">FCanExecuteAction());</span><br><span class="line"></span><br><span class="line">FLevelEditorModule&amp; LevelEditorModule = FModuleManager::LoadModuleChecked&lt;FLevelEditorModule&gt;(<span class="string">"LevelEditor"</span>);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">TSharedPtr&lt;FExtender&gt; MenuExtender = MakeShareable(<span class="keyword">new</span> FExtender());</span><br><span class="line">MenuExtender-&gt;AddMenuExtension(<span class="string">"WindowLayout"</span>, EExtensionHook::After, PluginCommands, FMenuExtensionDelegate::CreateRaw(<span class="keyword">this</span>, &amp;FTestLayoutWindowModule::AddMenuExtension));</span><br><span class="line"></span><br><span class="line">LevelEditorModule.GetMenuExtensibilityManager()-&gt;AddExtender(MenuExtender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">TSharedPtr&lt;FExtender&gt; ToolbarExtender = MakeShareable(<span class="keyword">new</span> FExtender);</span><br><span class="line">ToolbarExtender-&gt;AddToolBarExtension(<span class="string">"Settings"</span>, EExtensionHook::After, PluginCommands, FToolBarExtensionDelegate::CreateRaw(<span class="keyword">this</span>, &amp;FTestLayoutWindowModule::AddToolbarExtension));</span><br><span class="line"></span><br><span class="line">LevelEditorModule.GetToolBarExtensibilityManager()-&gt;AddExtender(ToolbarExtender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FGlobalTabmanager::Get()-&gt;RegisterNomadTabSpawner(TestLayoutWindowTabName, FOnSpawnTab::CreateRaw(<span class="keyword">this</span>, &amp;FTestLayoutWindowModule::OnSpawnPluginTab))</span><br><span class="line">.SetDisplayName(LOCTEXT(<span class="string">"FTestLayoutWindowTabTitle"</span>, <span class="string">"TestLayoutWindow"</span>))</span><br><span class="line">.SetMenuType(ETabSpawnerMenuType::Hidden);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ! InnerTab的内容：</span></span><br><span class="line">FGlobalTabmanager::Get()-&gt;RegisterNomadTabSpawner(InnerTabName, FOnSpawnTab::CreateLambda([](<span class="keyword">const</span> FSpawnTabArgs&amp; SpawnTabArgs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">SNew(SDockTab)</span><br><span class="line">.TabRole(ETabRole::NomadTab)</span><br><span class="line">[</span><br><span class="line">SNew(STextBlock)</span><br><span class="line">.Text(FText::FromString(<span class="string">"InnerTab"</span>))</span><br><span class="line">];</span><br><span class="line">&#125;))</span><br><span class="line">.SetDisplayName(LOCTEXT(<span class="string">"InnerTab"</span>, <span class="string">"InnerTab"</span>))</span><br><span class="line">.SetMenuType(ETabSpawnerMenuType::Hidden);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ! InnerTab2的内容：</span></span><br><span class="line">FGlobalTabmanager::Get()-&gt;RegisterNomadTabSpawner(InnerTabName2, FOnSpawnTab::CreateLambda([](<span class="keyword">const</span> FSpawnTabArgs&amp; SpawnTabArgs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">SNew(SDockTab)</span><br><span class="line">.TabRole(ETabRole::NomadTab)</span><br><span class="line">[</span><br><span class="line">SNew(STextBlock)</span><br><span class="line">.Text(FText::FromString(<span class="string">"InnerTab2"</span>))</span><br><span class="line">];</span><br><span class="line">&#125;))</span><br><span class="line">.SetDisplayName(LOCTEXT(<span class="string">"InnerTab2"</span>, <span class="string">"InnerTab2"</span>))</span><br><span class="line">.SetMenuType(ETabSpawnerMenuType::Hidden);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;核心处理是在插件加载的时候 <code>StartupModule</code> 调用 <code>RegisterNomadTabSpawner</code> 注册 Tab</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FTestLayoutWindowModule::PluginButtonClicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FGlobalTabmanager::Get()-&gt;InvokeTab(TestLayoutWindowTabName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;点击 GUI 会触发 Tab 生成，调用 <code>OnSpawnPluginTab</code> 方法</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedRef&lt;SDockTab&gt; <span class="title">FTestLayoutWindowModule::OnSpawnPluginTab</span><span class="params">(<span class="keyword">const</span> FSpawnTabArgs&amp; SpawnTabArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//原来的分页：</span></span><br><span class="line"><span class="keyword">const</span> TSharedRef&lt;SDockTab&gt; NomadTab = SNew(SDockTab)</span><br><span class="line">.TabRole(ETabRole::NomadTab);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建TabManager</span></span><br><span class="line"><span class="keyword">if</span> (!TabManager.IsValid())</span><br><span class="line">&#123;</span><br><span class="line">TabManager = FGlobalTabmanager::Get()-&gt;NewTabManager(NomadTab);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建布局：</span></span><br><span class="line"><span class="keyword">if</span> (!TabManagerLayout.IsValid())</span><br><span class="line">&#123;</span><br><span class="line">TabManagerLayout = FTabManager::NewLayout(<span class="string">"TestLayoutWindow"</span>)</span><br><span class="line">-&gt;AddArea</span><br><span class="line">(</span><br><span class="line">FTabManager::NewPrimaryArea()</span><br><span class="line">-&gt;SetOrientation(Orient_Vertical)</span><br><span class="line">-&gt;Split</span><br><span class="line">(</span><br><span class="line">FTabManager::NewStack()</span><br><span class="line">-&gt;SetSizeCoefficient(<span class="number">.4</span>f)</span><br><span class="line">-&gt;AddTab(InnerTabName, ETabState::OpenedTab)</span><br><span class="line">)</span><br><span class="line">-&gt;Split</span><br><span class="line">(</span><br><span class="line">FTabManager::NewStack()</span><br><span class="line">-&gt;SetSizeCoefficient(<span class="number">.4</span>f)</span><br><span class="line">-&gt;AddTab(InnerTabName2, ETabState::OpenedTab)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从布局中恢复得到控件</span></span><br><span class="line">TSharedRef&lt;SWidget&gt; TabContents = TabManager-&gt;RestoreFrom(TabManagerLayout.ToSharedRef(), TSharedPtr&lt;SWindow&gt;()).ToSharedRef();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置内容控件</span></span><br><span class="line">NomadTab-&gt;SetContent(</span><br><span class="line">TabContents</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NomadTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这里将之前注册的 Tab 唤起。</p></blockquote><h2 id="Viewport"><a href="#Viewport" class="headerlink" title="Viewport"></a>Viewport</h2><p><a href="https://yaksue.blog.csdn.net/article/details/109258860" target="_blank" rel="noopener">https://yaksue.blog.csdn.net/article/details/109258860</a></p><blockquote><p>&emsp;&emsp;引入默认的 <code>SEditorViewport</code> 类<br>&emsp;&emsp;然后 override 方法 <code>MakeEditorViewportClient</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedRef&lt;FEditorViewportClient&gt; <span class="title">STestLevelEditorViewport::MakeEditorViewportClient</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TSharedPtr&lt;FEditorViewportClient&gt; EditorViewportClient = MakeShareable(<span class="keyword">new</span> FEditorViewportClient(<span class="literal">nullptr</span>));</span><br><span class="line"><span class="keyword">return</span> EditorViewportClient.ToSharedRef();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;然后Slate 代码直接使用 <code>SNew(STestLevelEditorViewport)</code> 初始化界面即可。<br>&emsp;&emsp;不过这个方式沿用了 Viewport ，如何构建一个自定义 Viewport 呢？</p></blockquote><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedRef&lt;FEditorViewportClient&gt; <span class="title">STestEditorViewport::MakeEditorViewportClient</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PreviewScene = MakeShareable(<span class="keyword">new</span> FPreviewScene());</span><br><span class="line"></span><br><span class="line"><span class="comment">//向预览场景中加一个测试模型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//读取模型</span></span><br><span class="line">UStaticMesh* SM = LoadObject&lt;UStaticMesh&gt;(<span class="literal">NULL</span>, TEXT(<span class="string">"StaticMesh'/Engine/EngineMeshes/Cube.Cube'"</span>), <span class="literal">NULL</span>, LOAD_None, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line">UStaticMeshComponent* SMC = NewObject&lt;UStaticMeshComponent&gt;();</span><br><span class="line">SMC-&gt;SetStaticMesh(SM);</span><br><span class="line"><span class="comment">//向预览场景中增加组件</span></span><br><span class="line">PreviewScene-&gt;AddComponent(SMC, FTransform::Identity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TSharedPtr&lt;FEditorViewportClient&gt; EditorViewportClient = MakeShareable(<span class="keyword">new</span> FEditorViewportClient(<span class="literal">nullptr</span>, PreviewScene.Get()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EditorViewportClient.ToSharedRef();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;新建一个自定义的 <code>FPreviewScene</code> ，可以将物体实例化添加到场景当中。<br>&emsp;&emsp;将 <code>PreviewScene</code> 传入到  <code>FEditorViewportClient</code> 中，这样 Viewport 就显示独立的场景。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedPtr&lt;SWidget&gt; <span class="title">STestEditorViewport::MakeViewportToolbar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> SNew(SCommonEditorViewportToolbarBase, SharedThis(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用上面的代码可以构建出默认 Viewport 的 Toolbar。</p></blockquote><h2 id="GraphEditor"><a href="#GraphEditor" class="headerlink" title="GraphEditor"></a>GraphEditor</h2><p><a href="https://yaksue.blog.csdn.net/article/details/107945507" target="_blank" rel="noopener">https://yaksue.blog.csdn.net/article/details/107945507</a><br><a href="https://yaksue.blog.csdn.net/article/details/108020797" target="_blank" rel="noopener">https://yaksue.blog.csdn.net/article/details/108020797</a><br><a href="https://yaksue.blog.csdn.net/article/details/108227439" target="_blank" rel="noopener">https://yaksue.blog.csdn.net/article/details/108227439</a><br><a href="https://yaksue.blog.csdn.net/article/details/109347063" target="_blank" rel="noopener">https://yaksue.blog.csdn.net/article/details/109347063</a></p><h2 id="EditorMode"><a href="#EditorMode" class="headerlink" title="EditorMode"></a>EditorMode</h2><!-- TODO -->]]></content>
    
    <summary type="html">
    
      YakSue 工具开发文章学习
    
    </summary>
    
      <category term="游戏开发" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unreal" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/C/"/>
    
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
      <category term="ࠃUnreal" scheme="https://blog.l0v0.com/tags/%E0%A0%83Unreal/"/>
    
  </entry>
  
  <entry>
    <title>Maya C++ pyd 模块开发</title>
    <link href="https://blog.l0v0.com/posts/ce449c32.html"/>
    <id>https://blog.l0v0.com/posts/ce449c32.html</id>
    <published>2022-07-14T02:52:30.000Z</published>
    <updated>2022-07-21T06:37:45.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作者: [[👨‍💻sonictk]]</p><p><a href="https://github.com/sonictk/maya_python_c_extension" target="_blank" rel="noopener">https://github.com/sonictk/maya_python_c_extension</a></p><blockquote><p>&emsp;&emsp;这篇文章也是参考 sonictk 大佬的提供的 pyd 开发文章。<br>&emsp;&emsp;文章也提到之前的 hot reload 方案已经解决了很多 C++ 开发困难的问题。<br>&emsp;&emsp;然而还是有很多情况需要开发一个 python 的 C++ 模块实现 Maya C++ API 的 调用。<br>&emsp;&emsp;这个情况有点像是 Unreal 暴露 C++ API 到 Python 一样。</p></blockquote><p>[[17_Maya 编译 c 相关 Python 库 &amp; pyd 编译]]</p><blockquote><p>&emsp;&emsp;之前我也写过关于 Maya pyd 编译的文章，但是这个文章是用 Cython 自动生成 C 代码编译实现的，这次是手写 pyd。</p></blockquote><h2 id="什么是-pyd"><a href="#什么是-pyd" class="headerlink" title="什么是 pyd"></a>什么是 pyd</h2><blockquote><p>&emsp;&emsp;pyd 本质上也是一个 dll 文件，就像 Maya 插件的 mll 一样。<br>&emsp;&emsp;只是 pyd 规定了一些暴露规则，从而让 python 解释器可以读取。<br>&emsp;&emsp;这也是 Python 称之为胶水语言的一大特点，它可以无缝和 C++ 编译的模块进行交互。<br>&emsp;&emsp;因此很多 C++ 的包 比如 Qt 等可以暴露接口到 Python 实现调用。</p></blockquote><h2 id="pyd-hello-world-案例"><a href="#pyd-hello-world-案例" class="headerlink" title="pyd hello world 案例"></a>pyd hello world 案例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Python.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;maya/MGlobal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> MAYA_PYTHON_C_EXT_DOCSTRING[] = <span class="string">"An example Python C extension that makes use of Maya functionality."</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> HELLO_WORLD_MAYA_DOCSTRING[] = <span class="string">"Says hello world!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(timmyliang): 调用 MGlobal API 打印 Python 传递的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> PyObject *<span class="title">pyHelloWorldMaya</span><span class="params">(PyObject *<span class="keyword">module</span>, PyObject *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *inputString;</span><br><span class="line"><span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">"s"</span>, &amp;inputString))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PyGILState_STATE pyGILState = PyGILState_Ensure();</span><br><span class="line"></span><br><span class="line">MGlobal::displayInfo(inputString);</span><br><span class="line"></span><br><span class="line">PyObject *result = Py_BuildValue(<span class="string">"s"</span>, inputString);</span><br><span class="line"></span><br><span class="line">PyGILState_Release(pyGILState);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(timmyliang): 定义模块的函数列表</span></span><br><span class="line"><span class="keyword">static</span> PyMethodDef mayaPythonCExtMethods[] = &#123;</span><br><span class="line">&#123;<span class="string">"hello_world_maya"</span>, pyHelloWorldMaya, METH_VARARGS, HELLO_WORLD_MAYA_DOCSTRING&#125;,</span><br><span class="line">&#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>&#125; <span class="comment">// <span class="doctag">NOTE:</span> (sonictk) Sentinel value for Python</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(timmyliang): python2 初始化函数规范 init&lt;module_name&gt; </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PY_MAJOR_VERSION == 2</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">PyMODINIT_FUNC <span class="title">initpy_hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Py_InitModule3(<span class="string">"py_hello"</span>,</span><br><span class="line">  mayaPythonCExtMethods,</span><br><span class="line">  MAYA_PYTHON_C_EXT_DOCSTRING);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NOTE(timmyliang): python3 初始化函数规范 PyInit_&lt;module_name&gt; </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> PY_MAJOR_VERSION == 3</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">PyMODINIT_FUNC <span class="title">PyInit_py_hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> PyModuleDef hello_module = &#123;</span><br><span class="line">PyModuleDef_HEAD_INIT,</span><br><span class="line"><span class="string">"py_hello"</span>, <span class="comment">// Module name to use with Python import statements</span></span><br><span class="line">MAYA_PYTHON_C_EXT_DOCSTRING, <span class="comment">// Module description</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">mayaPythonCExtMethods <span class="comment">// Structure that defines the methods of the module</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> PyModule_Create(&amp;hello_module);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的代码就是一个小案例，将 C++ 编译成 pyd 给 python 调用。<br>&emsp;&emsp;并且这里引用了 Maya 的 API ，因此只能使用 Maya 的 Python Interpreter (mayapy.exe) 进行加载。<br>&emsp;&emsp;如果使用其他 Python 导入这个模块会出现如下的错误</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent <span class="keyword">call</span> last):</span><br><span class="line">  File "d:/Obsidian/Personal/<span class="number">2</span>_Area/📝Blog/CG/Maya/C++/test_load.py", line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    import py_hello</span><br><span class="line"><span class="function">ImportError: <span class="title">DLL</span> <span class="title">load</span> <span class="title">failed</span> <span class="title">while</span> <span class="title">importing</span> <span class="title">py_hello</span>: 找不到指定的程序。</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;pyd 的 C++ 代码包含三个部分</p><ol><li>python 定义的函数</li><li>函数列表定义 (需要传入上面的 C++ 编写的 Python 函数)</li><li>模块定义 (传入上面的 函数列表)</li></ol></blockquote><blockquote><p>&emsp;&emsp;最后生成模块部分，Python2 和 Python3 暴露的 API 不一致，可以用宏来区分。</p></blockquote><blockquote><p>&emsp;&emsp;编译这个 cpp 需要加上 Maya include 目录的头文件，以及链接 Maya lib 的静态库文件。<br>&emsp;&emsp;另外编译 pyd 需要特别注意的是，它也需要想 mll 一样暴露出初始化的函数。<br>&emsp;&emsp;在 python2 下是 <code>init&lt;module_name&gt;</code> 开头，在 python3 下是 <code>PyInit_&lt;module_name&gt;</code> 开头。<br>&emsp;&emsp;在 cpp 里面配置编译环境是个相当让人头疼的问题。<br>&emsp;&emsp;我在自己的 <a href="https://github.com/FXTD-ODYSSEY/CMakeMaya" target="_blank" rel="noopener">CMakeMaya</a> 库里面已经配置好了编译用的环境，<br>&emsp;&emsp;具体的使用方法可以看 readme 或者参考我的文章 [[01_Maya CMake 构建 C++ 插件编译环境]] </p></blockquote><blockquote><p>&emsp;&emsp;在我提供的环境下执行 <code>doit c -p pyd -v 2020</code> 即可编译出 pyd 到 <code>plug-ins\Release\maya2022\pyd\py_hello.pyd</code><br>&emsp;&emsp;需要注意 pyd 在不同的平台不同Maya版本都需要单独编译。这里我提供了编译好给 Windows64 Maya2020 的 <a href="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/ce449c32/py_hello.pyd" target="_blank" rel="noopener">pyd</a> </p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/ce449c32/ea63da79573f07279f606f9b77b16f21.jpeg" alt="image"></p><h3 id="导入-pyd-引入-Maya-C-节点"><a href="#导入-pyd-引入-Maya-C-节点" class="headerlink" title="导入 pyd 引入 Maya C++ 节点"></a>导入 pyd 引入 Maya C++ 节点</h3><blockquote><p>&emsp;&emsp;在相应的版本执行就可以看到如期触发了 maya API 的方法。<br>&emsp;&emsp;也可以用这个方式注册 Maya 的节点和 Mel 命令，具体可以看 <a href="https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/pyd/pyDeformer" target="_blank" rel="noopener">pyDeformer</a> 的代码。<br>&emsp;&emsp;只是由于没有 <code>initializePlugin</code> 拿不到传进来的 <code>MObject</code> 实例化 <code>MFnPlugin</code>。<br>&emsp;&emsp;我测试的 py_deformer 用了 <code>MFnPlugin::findPlug</code> 拿到内置插件 <code>matrixNodes</code> 提供的 MObject 来注册节点。<br>&emsp;&emsp;答案是可以实现的，而且新加入的节点也会显示在 <code>matrixNodes</code> 上。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/ce449c32/877d402bb3650b6b9d965467d2811829.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;这种骚操作不建议使用，而且也不知道会不会有什么 BUG 导致 Maya 崩溃。<br>&emsp;&emsp;另外没有办法触发 <code>uninitializePlugin</code> 来注销这个节点的注册。</p></blockquote><h3 id="pyd-mll-缝合怪"><a href="#pyd-mll-缝合怪" class="headerlink" title="pyd mll 缝合怪"></a>pyd mll 缝合怪</h3><blockquote><p>&emsp;&emsp;基于上面的测试我发现还可以生成出既是 Maya 插件又是 Python 模块的 缝合怪文件。<br>&emsp;&emsp;因为 C++ 只要编译的时候 export 出对应的方法就可以加载。</p></blockquote><blockquote><p>&emsp;&emsp;只是 Python 加载二进制包要求文件后缀为 pyd ，Maya 加载二进制插件要求文件命名为 mll 才可以。<br>&emsp;&emsp;解决这个问题，可以用软连接或者拆分成两个文件来实现，经过测试是可以的，具体可以看 <a href="https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/pyd/pyCommand" target="_blank" rel="noopener">pyCommand</a> 的 <a href="https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/pyd/scripts/test_py_deformer.py" target="_blank" rel="noopener">测试代码</a> 。</p></blockquote><h2 id="使用-mll-嵌入-python-模块"><a href="#使用-mll-嵌入-python-模块" class="headerlink" title="使用 mll 嵌入 python 模块"></a>使用 mll 嵌入 python 模块</h2><blockquote><p>&emsp;&emsp;上面主要实现按照 python 的规范加载包的操作，<code>sonitck</code> 的文章还提供了一个方案，加载 mll 获取到 python 包的方式。<br>&emsp;&emsp;做法也不复杂，就是在 <code>initializePlugin</code> 的时候加上加上 C++ 的模块。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Python.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;maya/MFnPlugin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;maya/MGlobal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *kAUTHOR = <span class="string">"TimmyLiang"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *kVERSION = <span class="string">"1.0.0"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *kREQUIRED_API_VERSION = <span class="string">"Any"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> HELLO_WORLD_MAYA_DOCSTRING[] = <span class="string">"Says hello world!"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> MAYA_PYTHON_C_EXT_DOCSTRING[] = <span class="string">"An example Python C extension that makes use of Maya functionality."</span>;</span><br><span class="line"></span><br><span class="line">PyObject *<span class="keyword">module</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> PyObject *<span class="title">pyHelloWorldMaya</span><span class="params">(PyObject *<span class="keyword">module</span>, PyObject *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *inputString;</span><br><span class="line"><span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">"s"</span>, &amp;inputString)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">PyGILState_STATE pyGILState = PyGILState_Ensure();</span><br><span class="line">MGlobal::displayInfo(inputString);</span><br><span class="line">PyObject *result = Py_BuildValue(<span class="string">"s"</span>, inputString);</span><br><span class="line">PyGILState_Release(pyGILState);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PyMethodDef mayaPythonCExtMethods[] = &#123;</span><br><span class="line">&#123;<span class="string">"hello_world_maya"</span>, pyHelloWorldMaya, METH_VARARGS, HELLO_WORLD_MAYA_DOCSTRING&#125;,</span><br><span class="line">&#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">MStatus <span class="title">initializePlugin</span><span class="params">(MObject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">MFnPlugin <span class="title">plugin</span><span class="params">(obj, kAUTHOR, kVERSION, kREQUIRED_API_VERSION)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!Py_IsInitialized())</span><br><span class="line">Py_Initialize();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Py_IsInitialized())</span><br><span class="line">&#123;</span><br><span class="line">PyGILState_STATE pyGILState = PyGILState_Ensure();</span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(TimmyLiang): python2 直接初始化模块就不会变成 built-in 模块</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PY_MAJOR_VERSION == 2</span></span><br><span class="line"><span class="keyword">module</span> = Py_InitModule3(<span class="string">"mll_py"</span>,</span><br><span class="line">mayaPythonCExtMethods,</span><br><span class="line">MAYA_PYTHON_C_EXT_DOCSTRING);</span><br><span class="line"><span class="comment">// NOTE(TimmyLiang): python3 用官方的方式添加模块不行，可能是因为 Py_Initialize 已经执行了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> PY_MAJOR_VERSION == 3</span></span><br><span class="line"><span class="comment">// NOTE(TimmyLiang): 参考 https://github.com/LinuxCNC/linuxcnc/issues/825 将模块加到 sys.modules 里面</span></span><br><span class="line"><span class="keyword">static</span> PyModuleDef hello_module = &#123;</span><br><span class="line">PyModuleDef_HEAD_INIT,</span><br><span class="line"><span class="string">"mll_py"</span>, <span class="comment">// Module name to use with Python import statements</span></span><br><span class="line">MAYA_PYTHON_C_EXT_DOCSTRING, <span class="comment">// Module description</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">mayaPythonCExtMethods <span class="comment">// Structure that defines the methods of the module</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> = PyModule_Create(&amp;hello_module);</span><br><span class="line">PyObject *sys_modules = PyImport_GetModuleDict();</span><br><span class="line">PyDict_SetItemString(sys_modules, <span class="string">"mll_py"</span>, <span class="keyword">module</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">MGlobal::displayInfo(<span class="string">"Registered Python bindings!"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">module</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> MStatus::kFailure;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// NOTE(timmyliang): 增加引用计数(确保不会 gc)</span></span><br><span class="line">Py_INCREF(<span class="keyword">module</span>);</span><br><span class="line">PyGILState_Release(pyGILState);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MStatus::kSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">MStatus <span class="title">uninitializePlugin</span><span class="params">(MObject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MStatus status;</span><br><span class="line">  <span class="comment">// NOTE(timmyliang): 减少引用计数</span></span><br><span class="line">Py_DECREF(<span class="keyword">module</span>);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的代码兼容 python2 python3 版本。<br>&emsp;&emsp;python2 直接用默认的 <code>Py_InitModule</code> 方法就可以添加，如果在 Python 打印模块会提示 <code>&lt;module &#39;mll_py&#39; (built-in)&gt;</code><br>&emsp;&emsp;但是 python3 下面不行，后来查找了 Github 的 <a href="https://github.com/LinuxCNC/linuxcnc/issues/825" target="_blank" rel="noopener">issue</a> 通过将模块添加到 <code>sys.modules</code> 下面解决问题。<br>&emsp;&emsp;只是模块打印就是普通的模块。<br>&emsp;&emsp;那为什么将模块放到 sys.modules 就可以了，这 Python 的 import 机制有关。 [[01_Python Import 模块机制]]</p></blockquote><blockquote><p>&emsp;&emsp;这个方式可以将一些 C++ 的 API 暴露给 Python，只是这个操作需要更多的说明。<br>&emsp;&emsp;否则没人知道这个 mll 居然添加一个 Python 模块。</p></blockquote><!-- ## pybind11 自动绑定> &emsp;&emsp;通过上面一顿操作，也可以深刻体会到如果跨版本兼容 C++ 需要做很多宏的判断，相当繁琐。> &emsp;&emsp;包括 Python2 和 Python3 暴露的方法名不一样，需要在 CMake 上进行判断。> &emsp;&emsp;使用 pybind11 进行转换相对方便些许。 --><!-- > &emsp;&emsp;后续也可以实验一下在 Python 中从 dll 里面调用 function 实现 https://github.com/Autodesk/animx --><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;以上就是 pyd 编译的各种折腾结果。<br>&emsp;&emsp;社区里面值得说道的有 <a href="https://github.com/mottosso/cmdc" target="_blank" rel="noopener">cmdc</a> 基于 pybind11 编译的二次封装 C++ API 库。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Python C++ Extension
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/CG/Maya/C/"/>
    
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Unreal C++ VScode 配置</title>
    <link href="https://blog.l0v0.com/posts/51c731db.html"/>
    <id>https://blog.l0v0.com/posts/51c731db.html</id>
    <published>2022-07-12T06:47:30.000Z</published>
    <updated>2022-07-21T06:37:45.581Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;这次尝试在 VScode 进行引擎编译。<br>&emsp;&emsp;网上一查发现，官方其实有做支持的，具体可以参考这篇文章 <a href="http://jollymonsterstudio.com/2018/11/02/unreal-c-with-visual-studio-code" target="_blank" rel="noopener">链接</a><br>&emsp;&emsp;这篇文章传播甚广，可以参照和这个方式配置 VScode 编译。</p></blockquote><p><a href="https://www.youtube.com/watch?v=fydvKedIxKk" target="_blank" rel="noopener">https://www.youtube.com/watch?v=fydvKedIxKk</a><br><a href="https://github.com/boocs/ue4-tellisense-fixes" target="_blank" rel="noopener">https://github.com/boocs/ue4-tellisense-fixes</a></p><h2 id="C-编译过程"><a href="#C-编译过程" class="headerlink" title="C++ 编译过程"></a>C++ 编译过程</h2><p>深度参考学习这边文章 <a href="https://ericlemes.com/2018/11/21/compiling-c-code/" target="_blank" rel="noopener">https://ericlemes.com/2018/11/21/compiling-c-code/</a><br>鉴于本人的 C++ 水平一般，建议阅读原文</p><h3 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h3><blockquote><p>&emsp;&emsp;C++ 编译可能会用到下面的文件。</p></blockquote><ul><li>.cpp 文件编译成 .obj</li><li>生成静态库 .lib</li><li>生成动态库 .dll </li><li>生成可执行文件 executable</li></ul><h3 id="VS-工具链"><a href="#VS-工具链" class="headerlink" title="VS 工具链"></a>VS 工具链</h3><blockquote><p>&emsp;&emsp;.sln 全称是 solution 解决方案，是 VS 的项目配置文件。 (整合了 .vcxproj .csproj)<br>&emsp;&emsp;他可以同时配置多个项目，最后通过 MSBuild 来构建<br>&emsp;&emsp;sln 包含了项目的各种头文件依赖，库引用等描述，执行顺序，通过这个 IDE 就知道怎么编译你的项目。</p></blockquote><blockquote><p>&emsp;&emsp;Xcode 的情况也是类似的。<br>&emsp;&emsp;其中比较特别的时 CMake ，通过 CMakeLists.txt 文件可以根据不同平台生成工程配置文件。</p></blockquote><h3 id="第一步-编译"><a href="#第一步-编译" class="headerlink" title="第一步 编译"></a>第一步 编译</h3><p>输入:</p><ul><li>Defines</li><li>Include 文件夹路径Include directories</li><li>预编译头文件 (如果有用到的话)</li><li>源代码</li></ul><p>输出:</p><ul><li>.obj 文件</li></ul><blockquote><p>&emsp;&emsp;MSBuild 使用 CL.exe 进行 C++ 编译。 可能的路径 <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\cl.exe</code><br>&emsp;&emsp;需要安装 VS 或者用 choco 来安装</p></blockquote><blockquote><p>&emsp;&emsp;编译的时候会根据 宏定义(比如 <code>#ifdef</code>)动态 改变编译行为<br>&emsp;&emsp;通过这个方式可以在不同的平台编译出不同的行为。<br>&emsp;&emsp;C++ 最终编译成对应平台的二进制，这个设计和 Java C# 都不同。</p></blockquote><blockquote><p>&emsp;&emsp;头文件最终会拼接到 C++ 里面进行编译，所以需要加上 <code>#pragma once</code> 或者 <code>#if</code> 来避免多次定义。<br>&emsp;&emsp;预编译头则可以生成 <code>.pch</code> 文件实现头文件复用。</p></blockquote><h3 id="第二步-链接"><a href="#第二步-链接" class="headerlink" title="第二步 链接"></a>第二步 链接</h3><p>输入:</p><ul><li>一些源码生成 .obj 文件</li><li>一些源码生成 .lib 文件</li><li>第三方的 lib 和 obj 文件</li></ul><p>输出:</p><ul><li>.dll 或者 .exe</li></ul><blockquote><p>&emsp;&emsp;这一步会将生成的中间文件合并成 dll 或者 exe<br>&emsp;&emsp;这个过程会完成很多优化的步骤，把不运行的部分清理掉。<br>&emsp;&emsp;最后会将一些平台的 lib 引入确保它在平台上可以运行，比如 wincrt (Windows C Runtime library) 等等<br>&emsp;&emsp;并且 lib 也有很多种类，有 release 版本和 debug 版本等等。</p></blockquote><h2 id="Unreal-Build-Tool"><a href="#Unreal-Build-Tool" class="headerlink" title="Unreal Build Tool"></a>Unreal Build Tool</h2><p><a href="https://ericlemes.com/2018/11/23/understanding-unreal-build-tool/" target="_blank" rel="noopener">https://ericlemes.com/2018/11/23/understanding-unreal-build-tool/</a></p><h3 id="CS-配置文件说明"><a href="#CS-配置文件说明" class="headerlink" title="CS 配置文件说明"></a>CS 配置文件说明</h3><p><a href="https://www.bilibili.com/read/cv15297017/" target="_blank" rel="noopener">https://www.bilibili.com/read/cv15297017/</a></p><blockquote><p>&emsp;&emsp;<code>Unreal</code> 使用自己开发的 <code>UnrealBuildTool</code> 来编译自己的 C++ 代码<br>&emsp;&emsp;与 [[💾CMake]] 类似的，<code>UnrealBuildTool</code> 会引用你需要在相应的模块添加 <code>.build.cs</code> 的代码文件来描述仓库链接的东西。<br>&emsp;&emsp;<code>.build.cs</code> 之上配套了 <code>Private</code> <code>Public</code> 文件夹分别放置暴露和不暴露的代码。<br>&emsp;&emsp;<code>.target.cs</code> 则可以用来定义输出的类型，有 <code>Game</code> <code>Editor</code> <code>Client</code> <code>Server</code> 几种类型。</p></blockquote><h3 id="生成工程文件"><a href="#生成工程文件" class="headerlink" title="生成工程文件"></a>生成工程文件</h3><blockquote><p>&emsp;&emsp;当我们对 <code>uproject</code> 文件右键生成 project 的时候背后执行就是 <code>UnrealBuildTool</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/51c731db/a897c17f0e8725cfdc7eef597edbc464.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:&#x2F;EpicGames&#x2F;git&#x2F;UnrealEngine-4.27&#x2F;Engine&#x2F;Binaries&#x2F;DotNET&#x2F;UnrealBuildTool.exe  -projectfiles -project&#x3D;&quot;D:&#x2F;EpicGames&#x2F;test_plugin&#x2F;test_plugin.uproject&quot; -game -engine -progress -log&#x3D;&quot;D:\EpicGames\test_plugin&#x2F;Saved&#x2F;Logs&#x2F;UnrealVersionSelector-2022.07.12-15.50.08.log&quot;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>UnrealBuildTool</code> 会根据 <code>.build.cs</code> 和 <code>.target.cs</code> 里面配置模块路径生成 sln 工程文件。</p></blockquote><h3 id="编译-C"><a href="#编译-C" class="headerlink" title="编译 C++"></a>编译 C++</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/51c731db/00ffce7125f34d3a93cc992f7d154c3c.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:&#x2F;EpicGames&#x2F;UE_4.27&#x2F;Engine&#x2F;Binaries&#x2F;DotNET&#x2F;UnrealBuildTool.exe Development Win64 -Project&#x3D;&quot;D:&#x2F;EpicGames&#x2F;Unreal_Playground&#x2F;Unreal_Playground.uproject&quot; -TargetType&#x3D;Editor -Progress -NoEngineChanges -NoHotReloadFromIDE</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这个 <code>Build.bat</code> 背后还是调用 <code>UnrealBuildTool.exe</code> 通过它来编译 C++<br>&emsp;&emsp;上面生成工程时候 <code>.build.cs</code> 和 <code>.target.cs</code> 只是收集了路径。<br>&emsp;&emsp;现在会再次读取这两个文件来获取一些编译用的属性。<br>&emsp;&emsp;然根据配置解决各个模块的依赖关系。</p></blockquote><blockquote><p>&emsp;&emsp;最后会运行 <code>UnrealHeaderTool</code> 将 UObject 的一些特性注入到 UObject 的 cpp 文件当中。<br>&emsp;&emsp;这也说明了为什么需要引入 <code>.generated.h</code> 的头文件。<br>&emsp;&emsp;准备好了所有代码之后再调用相应的编译工具去构建 C++。</p></blockquote><h2 id="VScode-编译配置"><a href="#VScode-编译配置" class="headerlink" title="VScode 编译配置"></a>VScode 编译配置</h2><blockquote><p>&emsp;&emsp;了解了 C++ 编译和 Unreal 全家桶的编译逻辑之后。<br>&emsp;&emsp;我们终于可以回归到本篇文章的正题。</p></blockquote><p><a href="http://jollymonsterstudio.com/2018/11/02/unreal-c-with-visual-studio-code/" target="_blank" rel="noopener">http://jollymonsterstudio.com/2018/11/02/unreal-c-with-visual-studio-code/</a></p><blockquote><p>&emsp;&emsp;按照这里提供的文章就可以用 Unreal 官方的方式配置好 <code>.vscode</code> 目录的编译配置。<br>&emsp;&emsp;后续只要 <code>Ctrl + shift + B</code> 就可以触发编译。<br>&emsp;&emsp;编译背后的逻辑就在上面解释了。</p></blockquote><blockquote><p>&emsp;&emsp;相应的我也可以用 python 脚本来触发编译。<br>&emsp;&emsp;sln 工程并不是必须的，不过 VS 有 VA 查找代码比较快。</p></blockquote>]]></content>
    
    <summary type="html">
    
      UnrealBuildTool 实现编译
    
    </summary>
    
      <category term="游戏开发" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unreal" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/C/"/>
    
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
      <category term="ࠃUnreal" scheme="https://blog.l0v0.com/tags/%E0%A0%83Unreal/"/>
    
  </entry>
  
  <entry>
    <title>Maya C++ mll hot reload 研究</title>
    <link href="https://blog.l0v0.com/posts/e6dc9087.html"/>
    <id>https://blog.l0v0.com/posts/e6dc9087.html</id>
    <published>2022-07-08T02:41:12.000Z</published>
    <updated>2022-07-21T06:37:45.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作者: [[👨‍💻sonictk]]</p><p><a href="https://sonictk.github.io/maya_hot_reload_example_public/" target="_blank" rel="noopener">https://sonictk.github.io/maya_hot_reload_example_public/</a></p><blockquote><p>&emsp;&emsp;详细的说明 &amp; 教程在上面的链接。</p></blockquote><blockquote><p>&emsp;&emsp;Maya 用写 C++ 开发会比较痛苦，一方面是编译问题总是让人烦躁，另一方面加载了 mll 会导致占用，测试起来很不方便。<br>&emsp;&emsp;所以我之前推崇用 Python OpenMaya 做原型设计再转 C++<br>&emsp;&emsp;当然 sonictk 也提到 Fabric Engine 和 Maya Bifrost 使用的时 LLVM IR 的方案来实现 JIT 编译。<br>&emsp;&emsp;具体可以参考另一个项目 <a href="https://github.com/giordi91/babycpp" target="_blank" rel="noopener">giordi91/babycpp</a></p></blockquote><h2 id="LLVM-热加载"><a href="#LLVM-热加载" class="headerlink" title="LLVM 热加载"></a>LLVM 热加载</h2><blockquote><p>&emsp;&emsp;<code>babycpp</code> 基于 LLVM 的解决方案我编译没有通过，代码报类型错误，因此也没有测试成功。<br>&emsp;&emsp;不过也了解了 LLVM 是怎么实现热更新的，运行逻辑和 Python 有点像，但是从本质上不一样。</p></blockquote><blockquote><p>&emsp;&emsp;传统的编译器需要有 前端 优化器 后端组成，一般前端是语言，通过 tokenize 和 AST 等方案将语言解析然后通过优化器生成后端的二进制文件。<br>&emsp;&emsp;LLVM 推出了 LLVM IR 中间语言，这样不管前端用什么语言开发，只要有对应的解析工具生成出 LLVM IR ，j就可以利用 LLVM IR 的优化生成 二进制机器语言高效运行。<br>&emsp;&emsp;<code>babycpp</code> 项目就基于 LLVM IR 的机制开发了一个自己的简化版 C++ 语言，通过 LLVM IR JIT 编译动态改变运行逻辑。</p></blockquote><blockquote><p>&emsp;&emsp;我目前个人理解来看，LLVM IR 模式和 Python 模式还是不一样的，Python 是调用自己编译好的模块来运行的，而 LLVM IR 是直接运行时(JIT)生成机器语言，JIT模式的运行效率有时候比 C++ 的静态编译还要高，因为 JIT 可以根据运行过程推断程序下一步的执行来优化非必要的运行逻辑，所以 LLVM IR 的性能要比 Python 好得多。其实我后面了解了一下 numba 提速 Python 的原理就是利用 LLVM 标准实现的。</p></blockquote><blockquote><p>&emsp;&emsp;不过也正如 sonictk 的文章所提到的，这个方案只能调用暴露的东西，无法对内存的细节进行处理。</p></blockquote><h2 id="基于-dll-加载"><a href="#基于-dll-加载" class="headerlink" title="基于 dll 加载"></a>基于 dll 加载</h2><p><a href="https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/hot_reload" target="_blank" rel="noopener">https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/hot_reload</a></p><blockquote><p>&emsp;&emsp;如果使用作者提供的 github 仓库的代码编译会有问题，作者的 thirdparty 仓库编译不通过。<br>&emsp;&emsp;所以我后面是根据作者文章的代码稍微调整组装到一起实现的。</p></blockquote><blockquote><p>&emsp;&emsp;详细讲解之前，我先用最简单的话说明这个 hotreload 方案。</p><ol><li>编译一个变形器的 mll 插件 和 带逻辑的 dll 文件</li><li>mll 加载之后会调用 dll 的function进行计算</li><li>修改逻辑之后重新编译 dll</li><li>mll 会重新健在最新的 dll 实现热更新。</li></ol></blockquote><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p><a href="https://sonictk.github.io/maya_hot_reload_example_public/getting_started/" target="_blank" rel="noopener">https://sonictk.github.io/maya_hot_reload_example_public/getting_started/</a></p><blockquote><p>&emsp;&emsp;这篇文章非常好，不仅仅讲解了作者 hot reload 的思路，还附带了 windows lib dll 之间的运行逻辑等知识。</p></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/90f7f29f4db2deb75e3cad0924734436.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;代码结构上需要将插件分成两个部分，一个是调用 logic 生成 dll<br>&emsp;&emsp;另一个是 deformer 的代码生成 mll<br>&emsp;&emsp;具体编译配置通过 cmake 配置两个 project 实现。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── logic</span><br><span class="line">│   ├── logic.cpp                  dll 代码逻辑</span><br><span class="line">│   └── logic.h</span><br><span class="line">├── maya_deformer</span><br><span class="line">│   ├── deformer_platform.cpp      调用 &lt;windows.h&gt; API 加载 dll</span><br><span class="line">│   ├── deformer_platform.h</span><br><span class="line">│   ├── deformer.cpp               Maya 变形器 deform 调用 deform_platform 提供的方法</span><br><span class="line">│   ├── deformer.h</span><br><span class="line">│   ├── plugin_main.cpp            Maya mll 插件初始化函数</span><br><span class="line">│   └── plugin_main.h</span><br><span class="line">├── scripts</span><br><span class="line">│   └── test_deformer.py           测试插件是否修改</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── readme.md</span><br></pre></td></tr></table></figure><h3 id="dll-加载方案"><a href="#dll-加载方案" class="headerlink" title="dll 加载方案"></a>dll 加载方案</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/f1b64e13564f1397cbfbe5c238e4f86a.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;上面三个函数调用了 window API 提供的 <code>LoadLibrary</code> <code>FreeLibrary</code> <code>GetProcAddress</code> 加载 dll </p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/0d97569dbeef6f0dac0f5d7a4f960fe4.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;然后将分装到 <code>loadDeformerLogicDLL</code> 和 <code>unloadDeformerLogicDLL</code> 方法里面。<br>&emsp;&emsp;deformer 在触发计算的时候调用加载 dll。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/3b60f5c6dd778aca372e3c8525a0561f.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;这样每次触发节点运算的时候会自动按照 dll 的路径进行加载。</p></blockquote><blockquote><p>&emsp;&emsp;问题是怎么在 C++ 动态获取到当前 dll 的路径呢？</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/38411b72f163aada48c813abf905b0d0.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;在插件加载的时候通过 <code>plugin.loadPath</code> 可以拿到当前 mll 加载的路径。<br>&emsp;&emsp;只要在同一个路径找 <code>logic.dll</code> 路径即可。</p></blockquote><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><h4 id="编译-dll-占用问题"><a href="#编译-dll-占用问题" class="headerlink" title="编译 dll 占用问题"></a>编译 dll 占用问题</h4><blockquote><p>&emsp;&emsp;需要注意的是，mll 被 Maya 加载会产生占用，mll 去加载 dll 也会造成占用。<br>&emsp;&emsp;只有执行 <code>unloadDeformerLogicDLL</code> 才会解除 dll 的占用<br>&emsp;&emsp;但是占用会造成编译失败。</p></blockquote><blockquote><p>&emsp;&emsp;于是我用 CMake 的 API 将旧的 <code>logic.dll</code> 改名叫 <code>logic_old.dll</code><br>&emsp;&emsp;windows 下被占用的文件还是可以改名的。<br>&emsp;&emsp;然后执行编译生成新的 <code>logic.dll</code><br>&emsp;&emsp;这时候需要手动触发 Maya 节点的更新，这样就会按照原来的路径加载新的 dll。</p></blockquote><blockquote><p>&emsp;&emsp;CMake 怎么判断 dll 是否占用，我也没有找到合适方法，于是我想到直接删除这个 dll 在判断 dll 是否存在的方法。</p></blockquote><h3 id="extern-问题"><a href="#extern-问题" class="headerlink" title="extern 问题"></a>extern 问题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> MString kPluginLogicLibraryPath;</span><br><span class="line"><span class="keyword">static</span> DeformerLogicLibrary kLogicLibrary;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;源码这两个变量用的是 static 静态变量。<br>&emsp;&emsp;但是不知道为什么在其他 cpp 文件里面调动得到的是不同的 内存 地址。</p></blockquote><p><a href="https://blog.csdn.net/sksukai/article/details/105612235" target="_blank" rel="noopener">https://blog.csdn.net/sksukai/article/details/105612235</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> MString kPluginLogicLibraryPath;</span><br><span class="line"><span class="keyword">extern</span> DeformerLogicLibrary kLogicLibrary;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;后续是改成 extern<br>&emsp;&emsp;然后在 <code>plugin_main.cpp</code> 里面初始化变量解决问题。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;这个方法切实解决了 节点热加载的问题，不需要 <code>unloadPlugin</code> 清空场景之类的操作，测试起来方便了许多。</p></blockquote>]]></content>
    
    <summary type="html">
    
      C++ 变形器热更新方案
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/CG/Maya/C/"/>
    
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Maya CMake 构建 C++ 插件编译环境</title>
    <link href="https://blog.l0v0.com/posts/5875a169.html"/>
    <id>https://blog.l0v0.com/posts/5875a169.html</id>
    <published>2022-07-01T06:21:00.000Z</published>
    <updated>2022-07-21T06:37:45.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;过去构建 Maya C++ 插件是按照 Autodesk 官方提供的流程，在 VS 里面配置项目工程。 <a href="https://blog.csdn.net/hp_cpp/article/details/80265856" target="_blank" rel="noopener">参考链接</a><br>&emsp;&emsp;通过配置 devkit 的 pluginwizard 来构建项目。<br>&emsp;&emsp;但是使用 VS 配置 Maya 依赖的头文件和 lib 其实挺不方便的。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/dedb5d9005f1dff970148bf91c26311a.jpeg" alt="image"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/cfafe1377b6d4e6bb1382f53c76c91da.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;依赖和修改都在不同选项里面，配置起来要搞半天。<br>&emsp;&emsp;而且这个工程配置只能兼容 Windows ，如果我们要在 Linux 环境下编译，整个流程又完全不一样了。<br>&emsp;&emsp;其实解决这种问题，有专门的工具去做。<br>&emsp;&emsp;这就是 <a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a><br>&emsp;&emsp;通过 cmake 配置可以生成不同平台的工程文件，不需要打开 IDE 就可以调用 compiler 编译结果。</p></blockquote><p><a href="https://github.com/volodinroman/CMakeMaya" target="_blank" rel="noopener">https://github.com/volodinroman/CMakeMaya</a></p><blockquote><p>&emsp;&emsp;这个仓库是别人配置好的基于 CMake 构建 Maya 插件的仓库。</p></blockquote><h2 id="Doit-自动构建环境"><a href="#Doit-自动构建环境" class="headerlink" title="Doit 自动构建环境"></a>Doit 自动构建环境</h2><blockquote><p>&emsp;&emsp;但是构建编译环境还是挺麻烦的，一方面需要下载 VS 和 CMake<br>&emsp;&emsp;另外还要配置好 Maya 提供的 SDK</p></blockquote><p><a href="https://github.com/FXTD-ODYSSEY/CMakeMaya" target="_blank" rel="noopener">https://github.com/FXTD-ODYSSEY/CMakeMaya</a></p><blockquote><p>&emsp;&emsp;我这个仓库提供了懒人包环境，只需要配置有 Python 环境和poetry 库。<br>&emsp;&emsp;在仓库的目录，执行 <code>poetry install</code> 和 <code>poetry shell</code> 就可以进入开发虚拟环境。(注: 需要管理员权限)<br>&emsp;&emsp;poetry 会自动安装配置好的依赖，包括 <code>doit 框架</code><br>&emsp;&emsp;执行 <code>doit init</code> 会调用 <code>choco</code> 安装 VS 的依赖，以及 CMake<br>&emsp;&emsp;这个过程需要等待一段时间。</p></blockquote><blockquote><p>&emsp;&emsp;执行完之后 VS Build Tool 就添加到系统了。<br>&emsp;&emsp;但还是找不到 C++ compiler ，需要手动打开 installer 下载 C++ CMake 开发包。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/911e11826073a3058551680de9aba826.png" alt="image"></p><blockquote><p>&emsp;&emsp;使用 <code>doit SDK -v 2020</code> 会下载 Maya 官方的 devkit 到仓库的 SDK 目录。<br>&emsp;&emsp;准备好环境之后，还需要安装好 maya 2020<br>&emsp;&emsp;如此就是完备的编译环境，只需要用 <code>doit c</code> 执行 cmake 编译命令来编译 C++ 插件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doit c -p weightDriver -v 2020</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用 -p 可以指定编译的项目，-v 可以指定编译的 Maya 版本，默认不指定会编译全部项目的 2020 版本<br>&emsp;&emsp;-p 支持完整的projects 相对路径或者最终目录指定</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doit c -p IngoClemens&#x2F;weightDriver</span><br><span class="line">doit c -p weightDriver</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;执行 doit 的时候会用 python 识别将末端目录变成完整的相对目录</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/12a58e2b26c25afaa90321434254ccb4.png" alt="image"></p><hr><blockquote><p>&emsp;&emsp;下面是完整执行编译的流程</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/105b5139b33ef1c83e10c9a0e171243e.png" alt="image"></p><blockquote><p>&emsp;&emsp;doit 背后执行的是 拼接输入 执行 cmake 命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -Wno-dev -G &quot;Visual Studio 16 2019&quot; -DMAYA_VERSION&#x3D;&#123;version&#125; -DMAYA_PROJECT&#x3D;&#123;project&#125;. -B build</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;DMAYA_VERSION 指定 Maya 版本号<br>&emsp;&emsp;DMAYA_PROJECT 指定 Maya 项目，多个项目可以用 ; 分割。<br>&emsp;&emsp;这个命令会读取根目录的 CMakeLists.txt 根据 VS2019 的配置生成 sln 文件到 Build 目录。<br>&emsp;&emsp;windows 下如果需要 Debug 也可以用 VS 打开 sln 去配置 Debug 工具。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build build --config Release</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;后面会执行 build 命令根据配置编译输出到指定目录。</p></blockquote><h3 id="中文乱码坑"><a href="#中文乱码坑" class="headerlink" title="中文乱码坑"></a>中文乱码坑</h3><p>[[💡Vscode terminal 中文乱码]]</p><blockquote><p>&emsp;&emsp;Window Terminal 默认不支持 MSBuild 的字符输出。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/07a6a6d0ef789b42617075a90cb84b8f.png" alt="image"></p><blockquote><p>&emsp;&emsp;需要在 terminal 上执行 <code>chcp 65001</code> 切换字符集。</p></blockquote><h2 id="添加新工程"><a href="#添加新工程" class="headerlink" title="添加新工程"></a>添加新工程</h2><blockquote><p>&emsp;&emsp;如果需要添加自己的 mll 需要自己填充 CMakeLists.txt 配置<br>&emsp;&emsp;使用 <code>doit new</code> 可以快速生成 插件 编译模板</p></blockquote><h3 id="cmake-配置说明"><a href="#cmake-配置说明" class="headerlink" title="cmake 配置说明"></a>cmake 配置说明</h3><p><code>projects</code> 下每个项目目录都有对应的  <code>CMakeLists.txt</code> </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置输出目录</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE <span class="variable">$&#123;CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE&#125;</span>/maya<span class="variable">$&#123;MAYA_VERSION&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置项目名称 (一般编译的文件名取项目名)</span></span><br><span class="line"><span class="keyword">project</span>(&#123;&#123;cookiecutter.project_name&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加编译的文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SRCS <span class="string">"*.cpp"</span> <span class="string">"*.h"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加头文件依赖</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;MAYA_INCLUDE_DIR&#125;</span>) </span><br><span class="line"><span class="comment"># 添加 lib 库目录</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;MAYA_LIBRARY_DIR&#125;</span>) </span><br><span class="line"><span class="comment"># 链接源码</span></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> SHARED <span class="variable">$&#123;SRCS&#125;</span>) </span><br><span class="line"><span class="comment"># 链接 lib</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;MAYA_LIBRARIES&#125;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># mll 输出配置</span></span><br><span class="line">MAYA_PLUGIN(<span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;大部分的结构如上图，默认模板如上。<br>&emsp;&emsp;我加上了注释说明。</p></blockquote><blockquote><p>&emsp;&emsp;<code>MAYA_PLUGIN</code>方法将 mll 的 <code>initializePlugin</code> <code>uninitializePlugin</code> 两个方法暴露出来(Maya 加载用)，并且将 dll 的后缀改为 mll。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;这个环境我通过 虚拟机 测试过，在 win10 环境是没有问题。<br>&emsp;&emsp;通过 cmake 配置可以快速构建好 C++ 编译环境，比起以前折腾 VS 来方便太多了。<br>&emsp;&emsp;利用 <code>choco</code> 来安装依赖也解决了各种缺库导致起不来的问题。<br>&emsp;&emsp;通过这个人懒人包可以极大降低 Maya 写 C++ 的难度。</p></blockquote><!-- TODO多进程执行 choco自动添加管理员权限 --><h3 id="2022-7-8-补充说明"><a href="#2022-7-8-补充说明" class="headerlink" title="2022-7-8 补充说明"></a>2022-7-8 补充说明</h3><blockquote><p>&emsp;&emsp;最近利用 submodule 添加了很多社区的 C++ 库。<br>&emsp;&emsp;clone 仓库之后需要用执行 <code>git submodule update --init</code> 来拉取 submodule</p></blockquote><blockquote><p>&emsp;&emsp;一些注意事项请参阅 readme 文档</p></blockquote>]]></content>
    
    <summary type="html">
    
      CMake 编译
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/CG/Maya/C/"/>
    
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Unreal Python 导出 MetaHuman 控制器关键帧</title>
    <link href="https://blog.l0v0.com/posts/1b238b83.html"/>
    <id>https://blog.l0v0.com/posts/1b238b83.html</id>
    <published>2022-06-24T08:57:06.000Z</published>
    <updated>2022-07-21T06:37:45.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;MetaHuman 已经在数字人领域里面相当成熟的解决方案。<br>&emsp;&emsp;并且 UE 官方开发了源码工程。<br>&emsp;&emsp;目前 github 上有不少人演示自己套用 MetaHuman 动画的效果。<br>&emsp;&emsp;于是我自己也尝试着想将它 UE 里面的控制器动画导出来。<br>&emsp;&emsp;然而却发现行不通。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1b238b83/01.png" alt="image.png"></p><blockquote><p>&emsp;&emsp;它的控制器关键帧是在 sequencer 里面。<br>&emsp;&emsp;最初是尝试将 sequencer 的资源全部导出成 FBX。<br>&emsp;&emsp;然而控制器的关键帧并没有跟随导入到 FBX 当中。</p></blockquote><blockquote><p>&emsp;&emsp;于是我想到可以用 unreal python 读取关键帧数据导出 json<br>&emsp;&emsp; Maya 再读取数据设置关键帧到控制器上。</p></blockquote><h2 id="unreal-python-导出关键帧"><a href="#unreal-python-导出关键帧" class="headerlink" title="unreal python 导出关键帧"></a>unreal python 导出关键帧</h2><blockquote><p>&emsp;&emsp;有思路之后就好办。<br>&emsp;&emsp;之前我也写过脚本来获取 sequencer 关键帧的。<br>&emsp;&emsp;需要注意如果想要使用 unreal python 的 API 需要开启相应的 C++ 插件。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1b238b83/02.png" alt="image.png"></p><blockquote><p>&emsp;&emsp;否则 python 会获取不到相应的 API 报错。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import built-in modules</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import local modules</span></span><br><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unreal_progress</span><span class="params">(tasks, label=<span class="string">"进度"</span>, total=None)</span>:</span></span><br><span class="line">    total = total <span class="keyword">if</span> total <span class="keyword">else</span> len(tasks)</span><br><span class="line">    <span class="keyword">with</span> unreal.ScopedSlowTask(total, label) <span class="keyword">as</span> task:</span><br><span class="line">        task.make_dialog(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(tasks):</span><br><span class="line">            <span class="keyword">if</span> task.should_cancel():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            task.enter_progress_frame(<span class="number">1</span>, <span class="string">"%s %s/%s"</span> % (label, i, total))</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> 读取 sequence</span></span><br><span class="line">    sequence = unreal.load_asset(<span class="string">'/Game/Sequencer/MetaHumanSample_Sequence.MetaHumanSample_Sequence'</span>)</span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> 收集 sequence 里面所有的 binding</span></span><br><span class="line">    binding_dict = defaultdict(list)</span><br><span class="line">    <span class="keyword">for</span> binding <span class="keyword">in</span> sequence.get_bindings():</span><br><span class="line">        binding_dict[binding.get_name()].append(binding)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> 遍历命名为 Face 的 binding</span></span><br><span class="line">    <span class="keyword">for</span> binding <span class="keyword">in</span> unreal_progress(binding_dict.get(<span class="string">"Face"</span>, []), <span class="string">"导出 Face 数据"</span>):</span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> 获取关键帧 channel 数据</span></span><br><span class="line">        keys_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> track <span class="keyword">in</span> binding.get_tracks():</span><br><span class="line">            <span class="keyword">for</span> section <span class="keyword">in</span> track.get_sections():</span><br><span class="line">                <span class="keyword">for</span> channel <span class="keyword">in</span> unreal_progress(section.get_channels(), <span class="string">"导出关键帧"</span>):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> channel.get_num_keys():</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    keys = []</span><br><span class="line">                    <span class="keyword">for</span> key <span class="keyword">in</span> channel.get_keys():</span><br><span class="line">                        frame_time = key.get_time()</span><br><span class="line">                        frame = frame_time.frame_number.value + frame_time.sub_frame</span><br><span class="line">                        keys.append(&#123;<span class="string">"frame"</span>: frame, <span class="string">"value"</span>: key.get_value()&#125;)</span><br><span class="line"></span><br><span class="line">                    keys_dict[channel.get_name()] = keys</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> 导出 json</span></span><br><span class="line">        name = binding.get_parent().get_name()</span><br><span class="line">        export_path = os.path.join(DIR, <span class="string">"&#123;0&#125;.json"</span>.format(name))</span><br><span class="line">        <span class="keyword">with</span> open(export_path, <span class="string">"w"</span>) <span class="keyword">as</span> wf:</span><br><span class="line">            json.dump(keys_dict, wf, indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的脚本会定位 MetaHuman 的 sequence 资源，然后导出关键帧的信息为 json</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1b238b83/meta_export.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;导出会在脚本目录输出两个 json 文件。<br>&emsp;&emsp;Maya 可以解析这个这两个 json 将关键帧设置到 控制器上。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import built-in modules</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import third-party modules</span></span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line">DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">progress</span><span class="params">(seq, status=<span class="string">""</span>, title=<span class="string">""</span>)</span>:</span></span><br><span class="line">    pm.progressWindow(status=status, title=title, progress=<span class="number">0.0</span>, isInterruptable=<span class="literal">True</span>)</span><br><span class="line">    total = len(seq)</span><br><span class="line">    <span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(seq):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> pm.progressWindow(query=<span class="literal">True</span>, isCancelled=<span class="literal">True</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            pm.progressWindow(e=<span class="literal">True</span>, progress=float(i) / total * <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">yield</span> item  <span class="comment"># with body executes here</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            pm.progressWindow(ep=<span class="number">1</span>)</span><br><span class="line">    pm.progressWindow(ep=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> 读取数据</span></span><br><span class="line">    <span class="keyword">with</span> open(os.path.join(DIR, <span class="string">"BP_metahuman_001.json"</span>), <span class="string">"r"</span>) <span class="keyword">as</span> rf:</span><br><span class="line">        data = json.load(rf)</span><br><span class="line"></span><br><span class="line">    attr_map = &#123;<span class="string">"location"</span>: <span class="string">"t"</span>, <span class="string">"rotation"</span>: <span class="string">"r"</span>&#125;</span><br><span class="line">    status = <span class="string">"Import Keyframe to metahuman controller"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> undo 支持</span></span><br><span class="line">    pm.undoInfo(ock=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> channel, frame_list <span class="keyword">in</span> progress(data.items(), status=status):</span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> 解析 channel_name</span></span><br><span class="line">        has_attr = channel.count(<span class="string">"."</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> has_attr:</span><br><span class="line">            <span class="comment"># <span class="doctag">NOTE:</span> 处理 `CTRL_C_eye_parallelLook_4311` 格式</span></span><br><span class="line">            ctrl_name = channel.rsplit(<span class="string">"_"</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            attr = <span class="string">"ty"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parts = iter(channel.split(<span class="string">"."</span>))</span><br><span class="line">            ctrl_name = next(parts, <span class="string">""</span>)</span><br><span class="line">            param = next(parts, <span class="string">""</span>)</span><br><span class="line">            axis = next(parts, <span class="string">""</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> axis:</span><br><span class="line">                <span class="comment"># <span class="doctag">NOTE:</span> 处理 `CTRL_C_teethD.Y_4330` 格式</span></span><br><span class="line">                attr = <span class="string">"t"</span></span><br><span class="line">                axis = param</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># <span class="doctag">NOTE:</span> 处理 `CTRL_L_eyeAim.Rotation.Y_4387` 格式</span></span><br><span class="line">                attr = attr_map.get(param.lower())</span><br><span class="line">            attr += axis.split(<span class="string">"_"</span>)[<span class="number">0</span>].lower()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> 解析出控制器属性设置关键帧</span></span><br><span class="line">        attribute = pm.PyNode(<span class="string">"."</span>.join([ctrl_name, attr]))</span><br><span class="line">        <span class="keyword">for</span> frame_data <span class="keyword">in</span> frame_list:</span><br><span class="line">            frame = frame_data.get(<span class="string">"frame"</span>)</span><br><span class="line">            value = frame_data.get(<span class="string">"value"</span>)</span><br><span class="line">            attribute.setKey(t=frame, v=value)</span><br><span class="line"></span><br><span class="line">    pm.undoInfo(cck=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1b238b83/maya_load.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;加载 unreal 导出的数据。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;其实整个流程不复杂，有思路就很好处理。</p></blockquote>]]></content>
    
    <summary type="html">
    
      python 导出 sequencer 关键帧
    
    </summary>
    
      <category term="游戏开发" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unreal" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/"/>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/Python/"/>
    
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
      <category term="ࠃUnreal" scheme="https://blog.l0v0.com/tags/%E0%A0%83Unreal/"/>
    
  </entry>
  
  <entry>
    <title>TA 工具人知乎分享</title>
    <link href="https://blog.l0v0.com/posts/4831b5c7.html"/>
    <id>https://blog.l0v0.com/posts/4831b5c7.html</id>
    <published>2022-05-13T07:01:29.000Z</published>
    <updated>2022-07-21T06:37:45.721Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好, 这里需要密码. 提示(神秘号码 + 光子)</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="811b2b26b9ccf4ff47b828c96913a95b5ddbac1e3e9ea5427f3b58da247bbcd0"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      围绕一些主题的约稿
    
    </summary>
    
      <category term="光子" scheme="https://blog.l0v0.com/categories/%E5%85%89%E5%AD%90/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python doit 库</title>
    <link href="https://blog.l0v0.com/posts/b552c0c3.html"/>
    <id>https://blog.l0v0.com/posts/b552c0c3.html</id>
    <published>2022-03-28T07:50:36.000Z</published>
    <updated>2022-07-21T06:37:45.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;代码开发的过程中可能遇到一些情况想要通过 代码 来自动执行命令行生成一些东西的情况。<br>&emsp;&emsp;如果不使用框架进行管理，这些代码脚本就很零碎地散落在各个地方。<br>&emsp;&emsp;因此就找到这个框架可以很方便管理多个任务，实现</p></blockquote><p><a href="https://github.com/pydoit/doit" target="_blank" rel="noopener">Github 地址</a><br><a href="https://pydoit.org/" target="_blank" rel="noopener">官方说明文档</a></p><h2 id="doit-的基本用法"><a href="#doit-的基本用法" class="headerlink" title="doit 的基本用法"></a>doit 的基本用法</h2><blockquote><p>&emsp;&emsp;在 doit 执行命令的地方添加一个 <code>dodo.py</code> 的脚本<br>&emsp;&emsp;doit 会去读取 <code>dodo.py</code> 里面命名开头为 <code>task_</code> 的方法作为执行的命令。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""hello"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">python_hello</span><span class="params">(targets)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(targets[<span class="number">0</span>], <span class="string">"a"</span>) <span class="keyword">as</span> output:</span><br><span class="line">            output.write(<span class="string">"Python says Hello World!!!\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'actions'</span>: [python_hello],</span><br><span class="line">        <span class="string">'targets'</span>: [<span class="string">"hello.txt"</span>],</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;比如添加上面的方法到 <code>dodo.py</code> 里面<br>&emsp;&emsp;执行 <code>doit list</code> 可以罗列出当前的可执行的命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F:\thm_git\adam_pose_editor&gt;doit list</span><br><span class="line">hello   hello</span><br><span class="line">F:\thm_git\adam_pose_editor&gt;doit hello</span><br><span class="line">.  hello</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;执行 <code>doit hello</code> 就会在 <code>dodo.py</code> 缩在目录下输出一个 hello.txt 的文件。<br>&emsp;&emsp;这个就是 doit 的基本用法。</p></blockquote><h3 id="dodo-py-配置"><a href="#dodo-py-配置" class="headerlink" title="dodo.py 配置"></a>dodo.py 配置</h3><p><a href="https://pydoit.org/configuration.html" target="_blank" rel="noopener">https://pydoit.org/configuration.html</a></p><blockquote><p>&emsp;&emsp;可以使用 <code>doit -f xxx/dodo.py</code> 配置 <code>dodo.py</code> 的路径<br>&emsp;&emsp;也可以使用 <code>pyproject.toml</code> 进行配置</p></blockquote><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.doit]</span></span><br><span class="line"><span class="attr">dodoFile</span> = <span class="string">"scripts/dodo.py"</span></span><br></pre></td></tr></table></figure><h3 id="task-配置"><a href="#task-配置" class="headerlink" title="task 配置"></a>task 配置</h3><blockquote><p>&emsp;&emsp;<code>dodo.py</code> 的 task 支持导入<br>&emsp;&emsp;只要是 <code>task_</code> 前缀的方法就会自动识别。<br>&emsp;&emsp;也可以给函数添加 <code>create_doit_tasks</code> 属性，这样就可以自动生成了。 <a href="https://pydoit.org/task-creation.html#custom-task-definition" target="_blank" rel="noopener">文档链接</a></p></blockquote><blockquote><p>&emsp;&emsp;利用这些机制，我搞了一个装饰器可以给 task 添加一个短名的方案。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_short_name</span><span class="params">(short_name)</span>:</span></span><br><span class="line">    <span class="string">"""Doit for short decorator.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        short_name (str): short alias name.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        callable: decoartor function.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        globals()[<span class="string">"task_&#123;0&#125;"</span>.format(short_name)] = func  <span class="comment"># noqa: WPS421</span></span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_short_name("pf")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_preflight</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Run pre commit for all files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    command = [<span class="string">"poetry"</span>, <span class="string">"run"</span>, <span class="string">"pre-commit"</span>, <span class="string">"run"</span>, <span class="string">"-a"</span>]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"actions"</span>: [command], <span class="string">"verbosity"</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这样运行 doit 会识别到两个 task ，可以分别通过 <code>doit pf</code> 或者 <code>doit preflight</code> 触发指令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;doit list </span><br><span class="line">pf          Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">preflight   Run pre commit <span class="keyword">for</span> all files.</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;但是默认排序是按命名来的，如果命令很多就会混在一起</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;doit list </span><br><span class="line">b             Run black format all python files.</span><br><span class="line">black         Run black format all python files.</span><br><span class="line">d             Run mkdocs serve.</span><br><span class="line">dd            Run mike to deploy docs.</span><br><span class="line">docs          Run mkdocs serve.</span><br><span class="line">docs_deploy   Run mike to deploy docs.</span><br><span class="line">f             Run `black` `isort`.</span><br><span class="line">format        Run `black` `isort`.</span><br><span class="line">i             Run isort format all python files.</span><br><span class="line">isort         Run isort format all python files.</span><br><span class="line">l             Run flakehell lint <span class="keyword">for</span> all python files.</span><br><span class="line">lint          Run flakehell lint <span class="keyword">for</span> all python files.</span><br><span class="line">m             Run mike serve.</span><br><span class="line">mike          Run mike serve.</span><br><span class="line">pf            Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">preflight     Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">pt            Run pytest.</span><br><span class="line">pytest        Run pytest.</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;可以使用 doit list –sort=definition 的方式让排序变成创建顺序。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;doit list --sort=definition</span><br><span class="line">f             Run `black` `isort`.</span><br><span class="line">format        Run `black` `isort`.</span><br><span class="line">pf            Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">preflight     Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">b             Run black format all python files.</span><br><span class="line">black         Run black format all python files.</span><br><span class="line">i             Run isort format all python files.</span><br><span class="line">isort         Run isort format all python files.</span><br><span class="line">l             Run flakehell lint <span class="keyword">for</span> all python files.</span><br><span class="line">lint          Run flakehell lint <span class="keyword">for</span> all python files.</span><br><span class="line">pt            Run pytest.</span><br><span class="line">pytest        Run pytest.</span><br><span class="line">d             Run mkdocs serve.</span><br><span class="line">docs          Run mkdocs serve.</span><br><span class="line">m             Run mike serve.</span><br><span class="line">mike          Run mike serve.</span><br><span class="line">dd            Run mike to deploy docs.</span><br><span class="line">docs_deploy   Run mike to deploy docs.</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;但是每次使用都要加一个参数配置，那是相当的麻烦。<br>&emsp;&emsp;我们可以利用 <code>DOIT_CONFIG</code> 进行配置 <a href="https://pydoit.org/configuration.html#configuration-at-dodo-py" target="_blank" rel="noopener">文档链接</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DOIT_CONFIG = &#123;</span><br><span class="line">    <span class="string">"sort"</span>: <span class="string">"definition"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="task-group"><a href="#task-group" class="headerlink" title="task group"></a>task group</h3><blockquote><p>&emsp;&emsp;可以使用 <code>task_dep</code> 的方式执行多个定义好的 task <a href="https://pydoit.org/task-creation.html#custom-task-definition" target="_blank" rel="noopener">文档链接</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">DIR = os.path.dirname(__file__)</span><br><span class="line">PY_FILES = glob.glob(os.path.join(DIR, <span class="string">"**/*.py"</span>), recursive=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">@add_short_name("f")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_format</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Run `black` `isort`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"actions"</span>: <span class="literal">None</span>, <span class="string">"task_dep"</span>: [<span class="string">"black"</span>, <span class="string">"isort"</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_short_name("b")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_black</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Run black format all python files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    command = [<span class="string">"poetry"</span>, <span class="string">"run"</span>, <span class="string">"black"</span>] + PY_FILES</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"actions"</span>: [command], <span class="string">"verbosity"</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@add_short_name("i")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_isort</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Run isort format all python files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    command = [<span class="string">"poetry"</span>, <span class="string">"run"</span>, <span class="string">"isort"</span>] + PY_FILES</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"actions"</span>: [command], <span class="string">"verbosity"</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过上面的配置就可以快速给所有的 python 脚本运行 black 和 isort </p></blockquote><h3 id="task-传参"><a href="#task-传参" class="headerlink" title="task 传参"></a>task 传参</h3><p><a href="https://pydoit.org/task-args.html#task-action-parameters" target="_blank" rel="noopener">文档链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_api</span><span class="params">(api)</span>:</span></span><br><span class="line">    <span class="string">"""Generate API docs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        api (bool): flag to generate docs</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        str: running command</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># NOTES(timmyliang): remove reference api</span></span><br><span class="line">    rmtree(os.path.join(DIR, <span class="string">"docs"</span>, <span class="string">"reference"</span>), ignore_errors=<span class="literal">True</span>)</span><br><span class="line">    script_path = os.path.join(DIR, <span class="string">"docs"</span>, <span class="string">"gen_api_nav.py"</span>)</span><br><span class="line">    api_command = <span class="string">" "</span>.join([<span class="string">"poetry"</span>, <span class="string">"run"</span>, <span class="string">"python"</span>, script_path])</span><br><span class="line">    serve_command = <span class="string">" "</span>.join([<span class="string">"poetry"</span>, <span class="string">"run"</span>, <span class="string">"mkdocs"</span>, <span class="string">"serve"</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;api_command&#125;</span> &amp; <span class="subst">&#123;serve_command&#125;</span>"</span> <span class="keyword">if</span> api <span class="keyword">else</span> serve_command</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@add_short_name("d")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_docs</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Run mkdocs serve.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">"actions"</span>: [CmdAction(gen_api)],</span><br><span class="line">        <span class="string">"params"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"api"</span>,</span><br><span class="line">                <span class="string">"short"</span>: <span class="string">"a"</span>,</span><br><span class="line">                <span class="string">"type"</span>: bool,</span><br><span class="line">                <span class="string">"default"</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">"inverse"</span>: <span class="string">"flagoff"</span>,</span><br><span class="line">                <span class="string">"help"</span>: <span class="string">"generate api docs"</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"verbosity"</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 <code>params</code> 定义传入的参数，就可以控制 mkdocs 是否自动生成 api 的 markdown 脚本。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;目前我使用上面的写法已经很够用了，其实它还有很多其他的配置可以用来做 C 编译。<br>&emsp;&emsp;还可以定义 task 依赖 和 文件依赖，确保 task 的执行顺序。<br>&emsp;&emsp;整体而言，doit 是个非常简单而是用的框架，配置 tox 等工具可谓是锦上添花。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Python 任务管理命令行
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python dependencies 库</title>
    <link href="https://blog.l0v0.com/posts/7aa50252.html"/>
    <id>https://blog.l0v0.com/posts/7aa50252.html</id>
    <published>2022-03-28T01:50:26.000Z</published>
    <updated>2022-07-21T06:37:45.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;在 Java Spring Boot 等等的后端领域，会大量使用依赖注入的方式来简化复杂的设计模式。<br>&emsp;&emsp;实现参数的自动化注入。<br>&emsp;&emsp;这些设计方式在 Python 的世界里使用不多，因为 Python 语言足够灵活。<br>&emsp;&emsp;倘若需要开发复杂的框架，使用 依赖注入 框架可以简化很多代码。</p></blockquote><p><a href="https://github.com/proofit404/dependencies" target="_blank" rel="noopener">Github 地址</a><br><a href="https://proofit404.github.io/dependencies/" target="_blank" rel="noopener">官方说明文档</a></p><h2 id="依赖注入解决的问题"><a href="#依赖注入解决的问题" class="headerlink" title="依赖注入解决的问题"></a>依赖注入解决的问题</h2><p><a href="https://sobolevn.me/2020/02/typed-functional-dependency-injection" target="_blank" rel="noopener">参考文章</a></p><blockquote><p>&emsp;&emsp;在日常开发中，我们的方法调用可能会越来越深。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_robot</span><span class="params">(robot_name)</span>:</span></span><br><span class="line">    create_robot_hand()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_robot_hand</span><span class="params">()</span>:</span></span><br><span class="line">    create_robot_finger()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_robot_finger</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"create_robot_finger"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面是一个简单的机器人创建调用函数。<br>&emsp;&emsp;调用方式会伴随则系统的复杂程度逐层深入。<br>&emsp;&emsp;到了 <code>create_robot_finger</code> 深度的时候，可能会需要在上层传入参数控制 finger 的数量</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_robot</span><span class="params">(robot_name,finger_num=<span class="number">10</span>)</span>:</span></span><br><span class="line">    create_robot_hand(finger_num=finger_num)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_robot_hand</span><span class="params">(finger_num=<span class="number">10</span>)</span>:</span></span><br><span class="line">    create_robot_finger(finger_num=finger_num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_robot_finger</span><span class="params">(finger_num=<span class="number">10</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"create_robot_finger finder_number:&#123;0&#125;"</span>.format(finger_num))</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这需要将参数补充到 调用链条 的每一个函数当中。<br>&emsp;&emsp;如果只是上面的 三层 调用深度，那可能手动修改维护还不是什么问题。<br>&emsp;&emsp;但倘若调用深度很深，那这个代码修改量就会非常庞大。<br>&emsp;&emsp;不利于代码的扩展和维护。</p></blockquote><hr><blockquote><p>&emsp;&emsp;在 Python 的世界里，解决这个问题的方法有很多。</p><ol><li>导入 配置 模块，外部获取参数配置</li><li>面向对象 注入依赖，从实例化中获取参数配置</li></ol></blockquote><h3 id="方案一-导入模块"><a href="#方案一-导入模块" class="headerlink" title="方案一 导入模块"></a>方案一 导入模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""settings.py"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"></span><br><span class="line">ROBOT_FINGER_NUM = <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_robot</span><span class="params">(robot_name)</span>:</span></span><br><span class="line">    create_robot_hand()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_robot_hand</span><span class="params">()</span>:</span></span><br><span class="line">    create_robot_finger()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_robot_finger</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"create_robot_finger finder_number:&#123;0&#125;"</span>.format(settings.ROBOT_FINGER_NUM))</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过模块的方式将参数转移到外部，进行配置。<br>&emsp;&emsp;这个做法可以解决参数传递的问题。</p></blockquote><blockquote><p>&emsp;&emsp;缺点就是参数管理会比较麻烦，通常是将全局配置的参数都放到一个文件方便集中管理。<br>&emsp;&emsp;但是这样会导致不同的逻辑调用的参数都会塞到一个文件里面，并不是十分整洁。</p></blockquote><h3 id="方案二-注入依赖"><a href="#方案二-注入依赖" class="headerlink" title="方案二 注入依赖"></a>方案二 注入依赖</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dependencies <span class="keyword">import</span> Injector</span><br><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span><span class="params">(object)</span>:</span></span><br><span class="line">    finger_num = attr.ib(default=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_robot</span><span class="params">(self,robot_name)</span>:</span></span><br><span class="line">        self.create_robot_hand()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_robot_hand</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.create_robot_finger()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_robot_finger</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"create_robot_finger finder_number:&#123;0&#125;"</span>.format(self.finger_num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span><span class="params">(Injector)</span>:</span></span><br><span class="line">    finger_num = <span class="number">10</span></span><br><span class="line">    robot = Robot</span><br><span class="line">Container.robot.create_robot(<span class="string">"robot name"</span>)</span><br><span class="line"><span class="comment"># 打印 create_robot_finger finder_number:10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `dependencies` 的实现等价于下面的代码</span></span><br><span class="line">robot = Robot(finger_num=<span class="number">10</span>)</span><br><span class="line">robot.create_robot(<span class="string">"robot name"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用 <code>dependencies</code> 库实现依赖注入，自动将容器内的数据填充到 类的实例化过程中。<br>&emsp;&emsp;通过类的属性实现参数传递。</p></blockquote><h2 id="dependencies-介绍"><a href="#dependencies-介绍" class="headerlink" title="dependencies 介绍"></a>dependencies 介绍</h2><blockquote><p>&emsp;&emsp;通过上面的案例可以看到。<br>&emsp;&emsp;<code>dependencies</code> 可以自动实例化类，填充类初始化需要的参数。<br>&emsp;&emsp;但它的功能还远不止这么简单。<br>&emsp;&emsp;它还可以实现多个类实例化的自动填充，只要参数变量名命名配置好即可。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dependencies <span class="keyword">import</span> Injector</span><br><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span><span class="params">(object)</span>:</span></span><br><span class="line">    servo = attr.ib()</span><br><span class="line">    controller = attr.ib()</span><br><span class="line">    settings = attr.ib()</span><br><span class="line">    di_environment = attr.ib()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"controller di_environment"</span>,self.controller.di_environment)</span><br><span class="line">        print(<span class="string">"self di_environment"</span>,self.di_environment)</span><br><span class="line">        print(<span class="string">"settings threshold"</span>,self.settings.threshold)</span><br><span class="line">        print(<span class="string">"servo threshold"</span>,self.servo.threshold)</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Servo</span><span class="params">(object)</span>:</span></span><br><span class="line">    threshold = attr.ib()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span><span class="params">(object)</span>:</span></span><br><span class="line">    di_environment = attr.ib()</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">(object)</span>:</span></span><br><span class="line">    threshold = attr.ib()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span><span class="params">(Injector)</span>:</span></span><br><span class="line">    threshold = <span class="number">1</span></span><br><span class="line">    di_environment = <span class="string">"production"</span></span><br><span class="line">    </span><br><span class="line">    robot = Robot</span><br><span class="line">    servo = Servo</span><br><span class="line">    settings = Settings</span><br><span class="line">    controller = Controller</span><br><span class="line"></span><br><span class="line">Container.robot.run()</span><br><span class="line"><span class="comment"># 打印: </span></span><br><span class="line"><span class="comment"># controller di_environment production</span></span><br><span class="line"><span class="comment"># self di_environment production</span></span><br><span class="line"><span class="comment"># settings threshold 1</span></span><br><span class="line"><span class="comment"># servo threshold 1</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 <code>dependencies</code> 可以根据属性命名自动填充多个类的参数数据。<br>&emsp;&emsp;container 的逻辑等价于下面的代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">threshold = <span class="number">1</span></span><br><span class="line">di_environment = <span class="string">"production"</span></span><br><span class="line">servo = Servo(threshold)</span><br><span class="line">settings = Settings(threshold)</span><br><span class="line">controller = Controller(di_environment)</span><br><span class="line">robot = Robot(servo,controller,settings,di_environment)</span><br><span class="line">robot.run()</span><br><span class="line"><span class="comment"># 打印: </span></span><br><span class="line"><span class="comment"># controller di_environment production</span></span><br><span class="line"><span class="comment"># self di_environment production</span></span><br><span class="line"><span class="comment"># settings threshold 1</span></span><br><span class="line"><span class="comment"># servo threshold 1</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;但是 <code>dependencies</code> 库根据参数的命名自动实例化对象，参数的调整变得简单可控。</p></blockquote><h2 id="dependencies-实现-caller-方法"><a href="#dependencies-实现-caller-方法" class="headerlink" title="dependencies 实现 caller 方法"></a>dependencies 实现 caller 方法</h2><p><a href="https://sobolevn.me/2019/03/enforcing-srp" target="_blank" rel="noopener">参考文章</a></p><blockquote><p>&emsp;&emsp;利用 依赖注入 可以分离 依赖 和 业务 逻辑</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">from</span> dependencies <span class="keyword">import</span> Injector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Editor</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">install_language</span><span class="params">(self,lang)</span>:</span></span><br><span class="line">        print(<span class="string">"install language:&#123;0&#125;"</span>.format(lang))</span><br><span class="line"></span><br><span class="line">editor = Editor()</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s(frozen=True, slots=True)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeLanguage</span><span class="params">(object)</span>:</span></span><br><span class="line">    editor = attr.ib()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,lang)</span>:</span></span><br><span class="line">        self.editor.install_language(lang)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span><span class="params">(Injector)</span>:</span></span><br><span class="line">    editor = editor</span><br><span class="line">    change_language = ChangeLanguage</span><br><span class="line"></span><br><span class="line">Container.change_language(<span class="string">"en_US"</span>)</span><br><span class="line"><span class="comment"># 打印: install language:en_US</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;利用 dependencies 可以构建出 caller 对象。<br>&emsp;&emsp;caller 虽然用类构建，但是调用方式和方法一致，可以方法需要用到的依赖用类实例化的方式进行注入。<br>&emsp;&emsp;实现依赖和传参的分离。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;依赖注入可以很好解决函数调用过深的问题，让代码结构更加清晰。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Python 依赖注入实现
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python blinker 库</title>
    <link href="https://blog.l0v0.com/posts/9ad5ab39.html"/>
    <id>https://blog.l0v0.com/posts/9ad5ab39.html</id>
    <published>2022-02-28T12:47:25.000Z</published>
    <updated>2022-07-21T06:37:45.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;Qt 内置了非常棒的 信号槽的函数。<br>&emsp;&emsp;可以让 UI 进行异步调用。<br>&emsp;&emsp;但是有些时候，并不想依赖 Qt 框架同时又能实现信号槽的功能。<br>&emsp;&emsp;这里可以使用 <code>blinker</code> 库来完成。</p></blockquote><p><a href="https://pythonhosted.org/blinker/" target="_blank" rel="noopener">Github 地址</a><br><a href="https://github.com/jek/blinker" target="_blank" rel="noopener">官方说明文档</a></p><h2 id="blinker-基本用法"><a href="#blinker-基本用法" class="headerlink" title="blinker 基本用法"></a>blinker 基本用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> signal,Signal</span><br><span class="line"></span><br><span class="line">initialized = signal(<span class="string">'initialized'</span>)</span><br><span class="line">initialized <span class="keyword">is</span> signal(<span class="string">'initialized'</span>)</span><br><span class="line">sig = Signal()</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;可以使用匿名信号槽，也可以使用带名称的信号槽。</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> signal</span><br><span class="line">send_data = signal(<span class="string">'send-data'</span>)</span><br><span class="line"><span class="meta">@send_data.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_data</span><span class="params">(sender, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">"Caught signal from %r, data %r"</span> % (sender, kw))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'received!'</span></span><br><span class="line">result = send_data.send(<span class="string">'anonymous'</span>, abc=<span class="number">123</span>)</span><br><span class="line">print(result)  <span class="comment"># 打印 [(&lt;function receive_data at 0x000002A3328D4DC8&gt;, 'received!')]</span></span><br><span class="line"><span class="comment"># 打印 Caught signal from 'anonymous', data &#123;'abc': 123&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;可以用装饰器的方式连接信号槽<br>&emsp;&emsp;触发信号槽使用 send 方法<br>&emsp;&emsp;并且信号槽执行完可以拿到函数触发的返回值。</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line">dice_roll = signal(<span class="string">'dice_roll'</span>)</span><br><span class="line"><span class="meta">@dice_roll.connect_via(1)</span></span><br><span class="line"><span class="meta">@dice_roll.connect_via(3)</span></span><br><span class="line"><span class="meta">@dice_roll.connect_via(5)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd_subscriber</span><span class="params">(sender)</span>:</span></span><br><span class="line">    print(<span class="string">"Observed dice roll %r."</span> % sender)</span><br><span class="line">result = dice_roll.send(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;另外一个特点就是可以根据触发的参数去触发相应注册的函数。<br>&emsp;&emsp;Qt 因为要使用 C++，这种注册方式会非常麻烦。</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line">initialized = signal(<span class="string">"initialized"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@initialized.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_call1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"initialize_call1"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@initialized.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_call2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"initialize_call2"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@initialized.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_call3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"initialize_call3"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, weakref <span class="keyword">in</span> initialized.receivers.items():</span><br><span class="line">    func = weakref()</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印: </span></span><br><span class="line"><span class="comment"># initialize_call1</span></span><br><span class="line"><span class="comment"># initialize_call2</span></span><br><span class="line"><span class="comment"># initialize_call3</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过信号槽的 <code>receivers</code> 方法可以获取到注册到信号槽的所有函数。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;这个库可以摆脱 Qt 的依赖实现函数的异步调用。<br>&emsp;&emsp;如果是 Qt 的环境建议还是使用 Qt 内置的 信号槽，这样可以支持 Qt 的多线程等处理。<br>&emsp;&emsp;但如果是 Python 环境下想要摆脱 Qt 的依赖，则推荐 blinker 来完成信号触发。<br>&emsp;&emsp;blinker 还有个好处是可以获取到注册的函数列表，而 Qt 基于 C++ 的并没有提供这个功能，只能通过 Meta 对象来判断这个信号槽是否有函数连接。 <a href="https://github.com/PyQt5/PyQt/blob/0c8e7d33d7a1da7a53a6b6d15869095f1626faf0/Demo/IsSignalConnected.py" target="_blank" rel="noopener">参考实现</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      纯 Python 信号槽库
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python marshmallow 库</title>
    <link href="https://blog.l0v0.com/posts/2c8022e3.html"/>
    <id>https://blog.l0v0.com/posts/2c8022e3.html</id>
    <published>2022-02-28T07:37:44.000Z</published>
    <updated>2022-07-21T06:37:45.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;使用 Python 经常需要将一些数据序列化存储到本地<br>&emsp;&emsp;同时又想要反序列化将本地的 json 数据转换为对象。<br>&emsp;&emsp;通常的解决方案是使用数据库的 orm 方案，用 orm 对象来同步数据库。<br>&emsp;&emsp;数据全部附着在 orm 上，当 orm 上的数据改变时直接修改到数据库上。</p></blockquote><blockquote><p>&emsp;&emsp;但是在我的工作使用场景中，Data Centric 的流程更为推崇，因此输出一个 json 文件会更好一点。<br>&emsp;&emsp;那么 marshmallow 库就是一个很不错的选项。</p></blockquote><blockquote><p>&emsp;&emsp;另外这个库可以和 之前提到的 attrs 库可以结合使用。 <a href="./1f4cc7d1.html">文章</a></p></blockquote><p><a href="https://github.com/marshmallow-code/marshmallow" target="_blank" rel="noopener">Github 地址</a><br><a href="https://marshmallow.readthedocs.io/en/stable/" target="_blank" rel="noopener">官方说明文档</a></p><h2 id="什么是序列化-什么是-orm"><a href="#什么是序列化-什么是-orm" class="headerlink" title="什么是序列化 什么是 orm"></a>什么是序列化 什么是 orm</h2><blockquote><p>&emsp;&emsp;序列化就是将代码对象转换为纯数据进行存储<br>&emsp;&emsp;反序列化就是将纯数据重新转换为 代码对象<br>&emsp;&emsp;代码对象可以拥有特定的方法，可以直接触发对数据的处理。</p></blockquote><blockquote><p>&emsp;&emsp;orm 全称是 Object-relational Mappers<br>&emsp;&emsp;通常是一个定义了对象实例化规则的类。<br>&emsp;&emsp;通过操作这个类的实例就可以用代码的方式将数据进行互相转换。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/2c8022e3/01.png" alt="alt"></p><blockquote><p>&emsp;&emsp;上面的图片就是传统 orm 实现的效果，可以用 orm 对象来执行 sql 语句从而简化数据库同步的操作，同时也增加了代码的安全性。<br>&emsp;&emsp;这个操作实现了内存到硬盘桥梁，管理更加清晰方便。</p></blockquote><h2 id="marshmallow-介绍"><a href="#marshmallow-介绍" class="headerlink" title="marshmallow 介绍"></a>marshmallow 介绍</h2><h3 id="marshmallow-基本用法"><a href="#marshmallow-基本用法" class="headerlink" title="marshmallow 基本用法"></a>marshmallow 基本用法</h3><blockquote><p>&emsp;&emsp;和其他 orm 库一样，marshmallow 需要定义 Schema 类作为数据约束。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Album</span><span class="params">(object)</span>:</span></span><br><span class="line">    title = attr.ib()</span><br><span class="line">    artist = attr.ib()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Artist</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = attr.ib()</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE 生成 Python 对象</span></span><br><span class="line">bowie = Artist(name=<span class="string">"David Bowie"</span>)</span><br><span class="line">album = Album(artist=bowie, title=<span class="string">"Hunky Dory"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE 定义 Schema 来约束数据转换</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArtistSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    name = fields.Str()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlbumSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    title = fields.Str()</span><br><span class="line">    artist = fields.Nested(ArtistSchema())</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE 通过 Schema 将对象转换为字典</span></span><br><span class="line">schema = AlbumSchema()</span><br><span class="line">result = schema.dump(album)</span><br><span class="line"></span><br><span class="line">print(type(result))  <span class="comment"># &lt;class 'dict'&gt;</span></span><br><span class="line">print(result)  <span class="comment"># &#123;'artist': &#123;'name': 'David Bowie'&#125;, 'title': 'Hunky Dory'&#125;</span></span><br><span class="line"></span><br><span class="line">result = schema.dumps(album)</span><br><span class="line">print(type(result))  <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(result)   <span class="comment"># '&#123;"artist": &#123;"name": "David Bowie"&#125;, "title": "Hunky Dory"&#125;'</span></span><br><span class="line"></span><br><span class="line">album = schema.loads(result)</span><br><span class="line">print(type(album))  <span class="comment"># &lt;class 'dict'&gt;</span></span><br><span class="line">print(album)  <span class="comment"># &#123;'artist': &#123;'name': 'David Bowie'&#125;, 'title': 'Hunky Dory'&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 Schema 定义好数据对象的转换方式。<br>&emsp;&emsp;<code>dump</code> 可以将对象数据转换为字典，<code>dumps</code> 则是转换为 字符串<br>&emsp;&emsp;<code>load</code> 可以将字典转换为对象(默认是字典，需要额外的处理才可以)，<code>loads</code> 可以将字符串转换为对象。</p></blockquote><h3 id="反序列化为对象"><a href="#反序列化为对象" class="headerlink" title="反序列化为对象"></a>反序列化为对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, post_load</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Album</span><span class="params">(object)</span>:</span></span><br><span class="line">    title = attr.ib()</span><br><span class="line">    artist = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Artist</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArtistSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    name = fields.Str()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArtistSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    name = fields.Str()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_artist</span><span class="params">(self, data, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Artist(**data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlbumSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    title = fields.Str()</span><br><span class="line">    artist = fields.Nested(ArtistSchema())</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_album</span><span class="params">(self, data, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Album(**data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bowie = Artist(name=<span class="string">"David Bowie"</span>)</span><br><span class="line">album = Album(artist=bowie, title=<span class="string">"Hunky Dory"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE 通过 Schema 将对象转换为字典</span></span><br><span class="line">schema = AlbumSchema()</span><br><span class="line">result = schema.dumps(album)</span><br><span class="line">album = schema.loads(result)</span><br><span class="line">print(album)  <span class="comment"># Album(title='Hunky Dory', artist=Artist(name='David Bowie'))</span></span><br><span class="line">print(album.title)  <span class="comment"># Hunky Dory</span></span><br><span class="line">print(album.artist)  <span class="comment"># Artist(name='David Bowie')</span></span><br><span class="line">print(album.artist.name)  <span class="comment"># David Bowie</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过加入 <code>post_load</code> 装饰器可以将字典数据做进一步的转换。<br>&emsp;&emsp;使用 attrs 库就不需要在 <code>__init__</code> 函数中写入大量传参和初始化数据的信息了。</p></blockquote><h3 id="嵌套-Schema"><a href="#嵌套-Schema" class="headerlink" title="嵌套 Schema"></a>嵌套 Schema</h3><p><a href="https://marshmallow.readthedocs.io/en/stable/nesting.html" target="_blank" rel="noopener">官方文档</a></p><blockquote><p>&emsp;&emsp;通过 <code>fields.Nested</code> 的方法定义嵌套的对象，从而序列化和反序列化可以复用 Schema。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(Dict)</span>:</span></span><br><span class="line">    title = attr.ib()</span><br><span class="line">    author = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(Dict)</span>:</span></span><br><span class="line">    name = attr.ib()</span><br><span class="line">    books = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">potter = Book(<span class="string">"potter"</span>, <span class="string">"JK"</span>)</span><br><span class="line">JK = Author(<span class="string">"JK"</span>, [potter])</span><br><span class="line">potter.author = JK</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    title = fields.Str()</span><br><span class="line">    author = fields.Nested(<span class="string">"AuthorSchema"</span>, only=(<span class="string">"name"</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    name = fields.Str()</span><br><span class="line">    books = fields.List(fields.Nested(<span class="string">"BookSchema"</span>, exclude=(<span class="string">"author"</span>,)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">schema = BookSchema()</span><br><span class="line">res = schema.dump(potter)</span><br><span class="line">print(res)  <span class="comment"># &#123;'title': 'potter', 'author': &#123;'name': 'JK'&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="自定义-Field"><a href="#自定义-Field" class="headerlink" title="自定义 Field"></a>自定义 Field</h3><p><a href="https://marshmallow.readthedocs.io/en/stable/custom_fields.html" target="_blank" rel="noopener">官方文档</a></p><blockquote><p>&emsp;&emsp;默认提供的 field 可能不能满足需求。<br>&emsp;&emsp;有些库的 field 需要自定义复杂的 序列化 和 反序列化操作。<br>&emsp;&emsp;这个时候就可以定义自己的 field 来解决问题。</p></blockquote><blockquote><p>&emsp;&emsp;简单的情况可以使用 <code>Method</code> 和 <code>Function</code> 来解决问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.String()</span><br><span class="line">    created_at = fields.DateTime()</span><br><span class="line">    since_created = fields.Method(<span class="string">"get_days_since_created"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_days_since_created</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> dt.datetime.now().day - obj.created_at.day</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.String()</span><br><span class="line">    created_at = fields.DateTime()</span><br><span class="line">    uppername = fields.Function(<span class="keyword">lambda</span> obj: obj.name.upper())</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;默认情况下是 serialize 函数，如果要自定义 deserialize 可以使用  <code>Method</code> 和 <code>Function</code> 传入 deserialize 参数进行指定。</p></blockquote><blockquote><p>&emsp;&emsp;复杂的情况就需要 <code>fields.Field</code> 类。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> fields, ValidationError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PinCode</span><span class="params">(fields.Field)</span>:</span></span><br><span class="line">    <span class="string">"""Field that serializes to a string of numbers and deserializes</span></span><br><span class="line"><span class="string">    to a list of numbers.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_serialize</span><span class="params">(self, value, attr, obj, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(str(d) <span class="keyword">for</span> d <span class="keyword">in</span> value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deserialize</span><span class="params">(self, value, attr, data, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> [int(c) <span class="keyword">for</span> c <span class="keyword">in</span> value]</span><br><span class="line">        <span class="keyword">except</span> ValueError <span class="keyword">as</span> error:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">"Pin codes must contain only digits."</span>) <span class="keyword">from</span> error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.String()</span><br><span class="line">    created_at = fields.DateTime()</span><br><span class="line">    pin_code = PinCode()</span><br></pre></td></tr></table></figure><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="双向嵌套数据"><a href="#双向嵌套数据" class="headerlink" title="双向嵌套数据"></a>双向嵌套数据</h3><blockquote><p>&emsp;&emsp;如果数据存在相互嵌套引用的关系，是无法通过原生的 json 内置库进行序列化的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> addict <span class="keyword">import</span> Dict</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(Dict)</span>:</span></span><br><span class="line">    title = attr.ib()</span><br><span class="line">    author = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(Dict)</span>:</span></span><br><span class="line">    name = attr.ib()</span><br><span class="line">    books = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">potter = Book(<span class="string">"potter"</span>, <span class="string">"JK"</span>)</span><br><span class="line">JK = Author(<span class="string">"JK"</span>, [potter])</span><br><span class="line">potter.author = JK</span><br><span class="line">print(json.dumps(potter))</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File "f:/repo/_blog/source/_posts/Python/pacakge/02_marshmallow.py", line 22, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     print(json.dumps(potter))</span></span><br><span class="line"><span class="comment">#   File "C:\tools\Anaconda3\lib\json\__init__.py", line 231, in dumps</span></span><br><span class="line"><span class="comment">#     return _default_encoder.encode(obj)</span></span><br><span class="line"><span class="comment">#   File "C:\tools\Anaconda3\lib\json\encoder.py", line 199, in encode</span></span><br><span class="line"><span class="comment">#     chunks = self.iterencode(o, _one_shot=True)</span></span><br><span class="line"><span class="comment">#   File "C:\tools\Anaconda3\lib\json\encoder.py", line 257, in iterencode</span></span><br><span class="line"><span class="comment">#     return _iterencode(o, 0)</span></span><br><span class="line"><span class="comment"># ValueError: Circular reference detected</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;marshmallow 则需要通过 Schema 的定义过滤掉特定的嵌套键值才可用。<br>&emsp;&emsp;并且加载数据的时候并不能还原它们原有的关联关系。<br>&emsp;&emsp;需要自己的手动去定义反序列化之后的操作。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> addict <span class="keyword">import</span> Dict</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields,post_load</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(Dict)</span>:</span></span><br><span class="line">    title = attr.ib()</span><br><span class="line">    author = attr.ib(default=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(Dict)</span>:</span></span><br><span class="line">    name = attr.ib()</span><br><span class="line">    books = attr.ib(factory=list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">potter = Book(<span class="string">"potter"</span>, <span class="string">"JK"</span>)</span><br><span class="line">JK = Author(<span class="string">"JK"</span>, [potter])</span><br><span class="line">potter.author = JK</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    title = fields.Str()</span><br><span class="line">    author = fields.Nested(<span class="string">"AuthorSchema"</span>, only=(<span class="string">"name"</span>,))</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_object</span><span class="params">(self, data, **kwargs)</span>:</span></span><br><span class="line">        book = Book(**data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'author'</span> <span class="keyword">in</span> data:</span><br><span class="line">            books = book.author.books</span><br><span class="line">            <span class="keyword">if</span> book <span class="keyword">not</span> <span class="keyword">in</span> books:</span><br><span class="line">                books.append(book)</span><br><span class="line">        <span class="keyword">return</span> book</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    name = fields.Str()</span><br><span class="line">    books = fields.List(fields.Nested(<span class="string">"BookSchema"</span>, exclude=(<span class="string">"author"</span>,)))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_object</span><span class="params">(self, data, **kwargs)</span>:</span></span><br><span class="line">        author = Author(**data)</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> author.books:</span><br><span class="line">            book.author = author</span><br><span class="line">        <span class="keyword">return</span> author</span><br><span class="line"></span><br><span class="line">schema = BookSchema()</span><br><span class="line">res = schema.dumps(potter).data</span><br><span class="line"></span><br><span class="line">new_potter = schema.loads(res).data</span><br><span class="line">print(potter)  <span class="comment"># Book(title='potter', author=Author(name='JK', books=[...]))</span></span><br><span class="line">print(new_potter)  <span class="comment"># Book(title='potter', author=Author(name='JK', books=[...]))</span></span><br><span class="line"></span><br><span class="line">schema = AuthorSchema()</span><br><span class="line">res = schema.dumps(JK).data</span><br><span class="line">new_JK = schema.loads(res).data</span><br><span class="line">print(JK)  <span class="comment"># Author(name='JK', books=[Book(title='potter', author=...)])</span></span><br><span class="line">print(new_JK)  <span class="comment"># Author(name='JK', books=[Book(title='potter', author=...)])</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;关系重建需要手动处理。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;使用 marshmallow 可以很方便实现数据序列化。<br>&emsp;&emsp;使用的时候可以配合 <code>addict</code> 以及下一篇文章要介绍的 <code>cerberus</code> 结合使用。<br>&emsp;&emsp;可以让使用体验更上一层楼。</p></blockquote>]]></content>
    
    <summary type="html">
    
      序列化 orm 工具
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python cerberus 库</title>
    <link href="https://blog.l0v0.com/posts/8a7956b2.html"/>
    <id>https://blog.l0v0.com/posts/8a7956b2.html</id>
    <published>2022-02-28T07:37:38.000Z</published>
    <updated>2022-07-21T06:37:45.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;cerberus 翻译为地狱犬，是地狱的看门狗，比喻做数据的校验者。<br>&emsp;&emsp;这个库是专门用来校验做数据校验。<br>&emsp;&emsp;可以通过定义一个 schema 文件来快速校验数据是否复合 schema。</p></blockquote><p><a href="https://github.com/pyeve/cerberus" target="_blank" rel="noopener">Github 地址</a><br><a href="https://docs.python-cerberus.org/en/stable/index.html" target="_blank" rel="noopener">官方说明文档</a></p><h2 id="cerberus-介绍"><a href="#cerberus-介绍" class="headerlink" title="cerberus 介绍"></a>cerberus 介绍</h2><h3 id="cerberus-基本用法"><a href="#cerberus-基本用法" class="headerlink" title="cerberus 基本用法"></a>cerberus 基本用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cerberus <span class="keyword">import</span> Validator</span><br><span class="line"></span><br><span class="line">schema = &#123;</span><br><span class="line">    <span class="string">"name"</span>: &#123;<span class="string">"type"</span>: <span class="string">"string"</span>&#125;,</span><br><span class="line">    <span class="string">"member"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"dict"</span>,</span><br><span class="line">        <span class="string">"require_all"</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">"schema"</span>: &#123;<span class="string">"address"</span>: &#123;<span class="string">"type"</span>: <span class="string">"string"</span>&#125;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">v = Validator(schema)</span><br><span class="line">document = &#123;<span class="string">"name"</span>: <span class="string">"john doe"</span>, <span class="string">"member"</span>: &#123;&#125;&#125;</span><br><span class="line">result = v.validate(document)</span><br><span class="line">print(result)  <span class="comment"># 打印 False</span></span><br><span class="line">print(v.errors)  <span class="comment"># 打印 &#123;'member': [&#123;'address': ['required field']&#125;]&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;主要用法就是定义一个规范。<br>&emsp;&emsp;cerberus 会根据这个规范对数据进行校验。<br>&emsp;&emsp;这其中的规则既可以根据官方文档添加，也可以继承 Validator 实现自定义的规则。</p></blockquote><h3 id="cerberus-嵌套检查"><a href="#cerberus-嵌套检查" class="headerlink" title="cerberus 嵌套检查"></a>cerberus 嵌套检查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cerberus <span class="keyword">import</span> schema_registry</span><br><span class="line"></span><br><span class="line">schema_registry.add(<span class="string">"non-system user"</span>, &#123;<span class="string">"uid"</span>: &#123;<span class="string">"min"</span>: <span class="number">1000</span>, <span class="string">"max"</span>: <span class="number">0xFFFF</span>&#125;&#125;)</span><br><span class="line">schema = &#123;</span><br><span class="line">    <span class="string">"sender"</span>: &#123;<span class="string">"schema"</span>: <span class="string">"non-system user"</span>, <span class="string">"allow_unknown"</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">    <span class="string">"receiver"</span>: &#123;<span class="string">"schema"</span>: <span class="string">"non-system user"</span>, <span class="string">"allow_unknown"</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;导入 schema_registry 添加到里面的 schema 可以被别的地方复用。<br>&emsp;&emsp;别的 schema 只要输入相应的字符串就可以复用 schema<br>&emsp;&emsp;或者也可以通过接入字典变量的方式来复用 schema </p></blockquote><h3 id="cerberus-自定义检查功能"><a href="#cerberus-自定义检查功能" class="headerlink" title="cerberus 自定义检查功能"></a>cerberus 自定义检查功能</h3><blockquote><p>&emsp;&emsp;扩展检查规则可以通过继承 <code>Validator</code> 来实现，非常简单方便。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cerberus <span class="keyword">import</span> Validator</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyValidator</span><span class="params">(Validator)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_validate_is_odd</span><span class="params">(self, constraint, field, value)</span>:</span></span><br><span class="line">        <span class="string">""" Test the oddity of a value.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The rule's arguments are validated against this schema:</span></span><br><span class="line"><span class="string">        &#123;'type': 'boolean'&#125;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> constraint <span class="keyword">is</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="keyword">not</span> bool(value &amp; <span class="number">1</span>):</span><br><span class="line">            self._error(field, <span class="string">"Must be an odd number"</span>)</span><br><span class="line"></span><br><span class="line">schema = &#123;<span class="string">'amount'</span>: &#123;<span class="string">'is odd'</span>: <span class="literal">True</span>, <span class="string">'type'</span>: <span class="string">'integer'</span>&#125;&#125;</span><br><span class="line">v = MyValidator(schema)</span><br><span class="line">v.validate(&#123;<span class="string">'amount'</span>: <span class="number">10</span>&#125;)  <span class="comment"># 打印 False</span></span><br></pre></td></tr></table></figure><h2 id="结合-marshmallow-使用"><a href="#结合-marshmallow-使用" class="headerlink" title="结合 marshmallow 使用"></a>结合 marshmallow 使用</h2><blockquote><p>&emsp;&emsp;使用 cerberus 的 schema 可以让校验规则统一到一个地方进行配置。<br>&emsp;&emsp;配置更加清晰，查找也比较方便。<br>&emsp;&emsp;相较于使用 <code>attrs</code> 或者 <code>marshmallow</code> 提供校验功能。<br>&emsp;&emsp;cerberus 可以更加清晰地配置和修改。</p></blockquote><blockquote><p>&emsp;&emsp;我上一篇文章介绍了使用 <code>marshmallow</code> 可以很方便地对数据进行序列化。<br>&emsp;&emsp;同时它也可以对每一个 field 编写函数进行数据校验，但是如果使用 嵌套 Schema 的话<br>&emsp;&emsp;这些校验方法东一块西一块，配置和修改都非常繁琐。<br>&emsp;&emsp;这个使用可以结合 <code>marshmallow</code> 的 <code>validates_schema</code> 装饰器通过函数调用 cerberus 进行数据校验。 <a href="https://marshmallow.readthedocs.io/en/stable/upgrading.html?highlight=validate_schema#schema-validators" target="_blank" rel="noopener">marshmallow 文档</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, validates_schema, ValidationError</span><br><span class="line"><span class="keyword">from</span> cerberus <span class="keyword">import</span> Validator</span><br><span class="line"></span><br><span class="line">schema = &#123;</span><br><span class="line">    <span class="string">"field_a"</span>: &#123;</span><br><span class="line">        <span class="string">"required"</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">        <span class="string">"min"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"max"</span>: <span class="number">5</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">validator = Validator(schema)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    field_a = fields.Int(required=<span class="literal">True</span>)</span><br><span class="line">    field_b = fields.Int(required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @validates_schema(pass_original=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_schema</span><span class="params">(self, data, original_data)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> validator.validate(original_data):</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(validator.errors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">schema = MySchema()</span><br><span class="line">document = &#123;</span><br><span class="line">    <span class="string">"field_a"</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="string">"field_b"</span>: <span class="number">-1</span>,</span><br><span class="line">&#125;</span><br><span class="line">res, err = schema.load(document)</span><br><span class="line">print(err)  <span class="comment"># 打印 &#123;'_schema': [&#123;'field_a': ['min value is 0'], 'field_b': ['unknown field']&#125;]&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这样就可以实现反序列化数据的同时进行数据校验。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;cerberus 其实也可以做数据的 coerce ，实现一定程度的序列化功能。<br>&emsp;&emsp;不过如果需要嵌套的话，还是用 marshmallow 进行处理比较方便。<br>&emsp;&emsp;而且 marshmallow 嵌套调用也可以配合着 cerberus 顺便进行数据校验。</p></blockquote>]]></content>
    
    <summary type="html">
    
      基于 schema 字典数据校验库
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python decorator &amp; wrapt 库</title>
    <link href="https://blog.l0v0.com/posts/b9593ce4.html"/>
    <id>https://blog.l0v0.com/posts/b9593ce4.html</id>
    <published>2022-02-28T03:13:26.000Z</published>
    <updated>2022-07-21T06:37:45.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;Python 的装饰器是个好东西，自从加入了语法糖 <code>@</code> 之后。<br>&emsp;&emsp;装饰器方法可以实现很多功能，同时又不会把代码给弄乱。<br>&emsp;&emsp;这里会剖析何为装饰器，并且推荐两个简化装饰器的库</p></blockquote><h2 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器</h2><blockquote><p>&emsp;&emsp;装饰器可以在函数裹上一层壳，在函数调度前和调度后触发新的逻辑。<br>&emsp;&emsp;这样可以在原有的逻辑不动的情况下，添加新的逻辑。<br>&emsp;&emsp;比如修改函数的传参，修改函数的返回值。<br>&emsp;&emsp;也可以通过装饰器给原来简单的函数添加新的功能。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco_func</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"before call"</span>)</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">"after call"</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco_func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"on running"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call_func()</span><br><span class="line"><span class="comment"># 打印如下</span></span><br><span class="line"><span class="comment"># before call</span></span><br><span class="line"><span class="comment"># on running</span></span><br><span class="line"><span class="comment"># after call</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;装饰器的本质其实下面这种写法的语法糖。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"on running"</span>)</span><br><span class="line"></span><br><span class="line">call_func = deco_func(call_func)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;两者的本质是一样的，但是用语法糖可以更加清晰看到这个函数被什么所包裹。<br>&emsp;&emsp;另外实现装饰器的方法还可以用类来实现。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,func)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"before call"</span>)</span><br><span class="line">        result=  self.func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">"after call"</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><hr><blockquote><p>&emsp;&emsp;上面实现的装饰器不能携带参数，如果需要传入参数需要返回一个装饰器</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco_func</span><span class="params">(arg1=<span class="number">1</span>,arg2=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(arg1,arg2)</span><br><span class="line">            print(<span class="string">"before call"</span>)</span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            print(<span class="string">"after call"</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco_func(arg1=3)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"on running"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call_func()</span><br><span class="line"><span class="comment"># 3 2</span></span><br><span class="line"><span class="comment"># before call</span></span><br><span class="line"><span class="comment"># on running</span></span><br><span class="line"><span class="comment"># after call</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这里需要三重函数嵌套会让装饰器繁琐且复杂。<br>&emsp;&emsp;而且由于装饰器返回的函数和源函数是不一致的，默认情况下无法继承 <code>__doc__</code> 等函数属性。<br>&emsp;&emsp;解决这个问题需要给嵌套里面的函数加上 <a href="mailto:`@functools.wraps">`@functools.wraps</a>(func)` 的装饰器来同步才行。 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco_func</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">  @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><h2 id="decorator-库介绍"><a href="#decorator-库介绍" class="headerlink" title="decorator 库介绍"></a>decorator 库介绍</h2><blockquote><p>&emsp;&emsp;想要解决这个问题有两个库可以推荐 <code>decorator</code> &amp; <code>wrapt</code></p></blockquote><table><thead><tr><th>Python 库</th><th>wrapt</th><th>decorator</th></tr></thead><tbody><tr><td>类装饰</td><td>✔</td><td>❌</td></tr><tr><td>受欢迎程度</td><td>✔</td><td>❌</td></tr><tr><td>简洁</td><td>❌</td><td>✔</td></tr><tr><td>性能</td><td>❌</td><td>✔</td></tr></tbody></table><blockquote><p>&emsp;&emsp;wrapt 解决的问题更多，比 decorator 更加流行。<br>&emsp;&emsp;decorator 则使用简单且方便，而且性能比 wrapt 要好。<br>&emsp;&emsp;可以根据实际的使用情况来选择。</p></blockquote><h3 id="装饰案例"><a href="#装饰案例" class="headerlink" title="装饰案例"></a>装饰案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="keyword">from</span> decorator <span class="keyword">import</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">warn_slow</span><span class="params">(func, timelimit=<span class="number">60</span>, *args, **kw)</span>:</span></span><br><span class="line">    t0 = time.time()</span><br><span class="line">    result = func(*args, **kw)</span><br><span class="line">    dt = time.time() - t0</span><br><span class="line">    <span class="keyword">if</span> dt &gt; timelimit:</span><br><span class="line">        logging.warn(<span class="string">'%s took %d seconds'</span>, func.__name__, dt)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.info(<span class="string">'%s took %d seconds'</span>, func.__name__, dt)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">@warn_slow  # warn if it takes more than 1 minute</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess_input_files</span><span class="params">(inputdir, tempdir)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@warn_slow(timelimit=600)  # warn if it takes more than 10 minutes</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_calculation</span><span class="params">(tempdir, outdir)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decorator <span class="keyword">import</span> decorator</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_arguments</span><span class="params">(func, myarg1=<span class="number">2</span>, myarg2=<span class="number">3</span>, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">@with_arguments(myarg1=1,myarg2=2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>decorator</code> 库只需要一个装饰器就可以让函数同时支持带参数和不带参数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wrapt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_arguments</span><span class="params">(myarg1, myarg2)</span>:</span></span><br><span class="line"><span class="meta">    @wrapt.decorator</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(wrapped, instance, args, kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> wrapped(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@with_arguments(1, 2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>wrapt</code> 库则还是需要使用嵌套函数才能实现，但是可以简化一个函数嵌套。</p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decorator <span class="keyword">import</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pass_through</span><span class="params">(func, timelimit=<span class="number">60</span>, *args, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pass_through</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">function_im</span><span class="params">(cls, *args)</span>:</span></span><br><span class="line">        print(cls)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File "&lt;stdin&gt;", line 2, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#   File "&lt;decorator-gen-1&gt;", line 3, in pass_through</span></span><br><span class="line"><span class="comment">#   File "c:\_thm\rez_local_cache\ext\decorator\4.4.2\site-packages\decorator.py", line 252, in decorate        </span></span><br><span class="line"><span class="comment">#     evaldict, __wrapped__=func)</span></span><br><span class="line"><span class="comment">#   File "c:\_thm\rez_local_cache\ext\decorator\4.4.2\site-packages\decorator.py", line 213, in create</span></span><br><span class="line"><span class="comment">#     self = cls(func, name, signature, defaults, doc, module)</span></span><br><span class="line"><span class="comment">#   File "c:\_thm\rez_local_cache\ext\decorator\4.4.2\site-packages\decorator.py", line 143, in __init__        </span></span><br><span class="line"><span class="comment">#     raise TypeError('You are decorating a non function: %s' % func)</span></span><br><span class="line"><span class="comment"># TypeError: You are decorating a non function: &lt;class '__main__.Class'&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;decorator 不能装饰类，但是 <code>wrapt</code> 可以做到</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wrapt</span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapt.decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pass_through</span><span class="params">(wrapped, instance, args, kwargs)</span>:</span></span><br><span class="line">    print(wrapped,instance)</span><br><span class="line">    res = wrapped(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"call Base"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pass_through</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Class.__wrapped__, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">function_im</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        print(self)</span><br><span class="line"></span><br><span class="line">print(type(Class))  <span class="comment"># &lt;class 'FunctionWrapper'&gt;</span></span><br><span class="line">a = Class()</span><br><span class="line">a.function_im(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;wrapt 可以装饰类，但是装饰返回一个 <code>FunctionWrapper</code> 类型<br>&emsp;&emsp;会影响到 super 传参调用，需要调用 <code>wrapped</code> 才正常。<br>&emsp;&emsp;如果是 Python3 则直接使用 <code>super()</code> 可以生效</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;<code>wrapt</code> 库更加通用，但是如果不是复杂的情况， <code>decorator</code> 库就已经够用了。<br>&emsp;&emsp;<code>wrapt</code> 可以解决装饰类的时候，类信息的同步。</p></blockquote>]]></content>
    
    <summary type="html">
    
      装饰器优化库
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python pluggy 库</title>
    <link href="https://blog.l0v0.com/posts/7beafa88.html"/>
    <id>https://blog.l0v0.com/posts/7beafa88.html</id>
    <published>2022-02-28T03:13:26.000Z</published>
    <updated>2022-07-21T06:37:45.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;</p></blockquote><h2 id="什么是-pluggy"><a href="#什么是-pluggy" class="headerlink" title="什么是 pluggy"></a>什么是 pluggy</h2><blockquote><p>&emsp;&emsp;pluggy 是 pytest 团队开发的库，<br>&emsp;&emsp;用来解决给 pytest 写扩展插件的。<br>&emsp;&emsp;pluggy 提供了方便的 API 可以很轻松的扩展框架的逻辑。</p></blockquote><p><a href="https://github.com/pytest-dev/pluggy" target="_blank" rel="noopener">Github仓库</a><br><a href="https://pluggy.readthedocs.io/en/latest/" target="_blank" rel="noopener">文档地址</a></p><h2 id="pluggy-的调度方式"><a href="#pluggy-的调度方式" class="headerlink" title="pluggy 的调度方式"></a>pluggy 的调度方式</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/2c8022e3/a27504a12b44751e025e75587f27b489.jpeg" alt="image"></p><p><a href="https://viewer.diagrams.net/?tags=%7B%7D&amp;highlight=0000ff&amp;edit=_blank&amp;layers=1&amp;nav=1&amp;title=pluggy.drawio#R7VxLc%2BI4EP41qto5bMqW30cbyGZqkp3U5rDHlAIK9sRYlC1Ckl%2B%2Falk2GBlCIASY9Qm5LQk9vu7%2B1JKMrN7k5a%2BcTOMbNqIpwsboBVl9hLHpWrb4AcmrkpguLiXjPBkp2UJwl7xRJTSUdJaMaNHIyBlLeTJtCocsy%2BiQN2Qkz9m8me2Rpc1%2FnZIx1QR3Q5Lq0n%2BTEY9LqY%2B9hfyKJuOY1%2F0LyjcPZPg0ztksU%2F%2BHsHVpXoaDQfl6Qqq6VEeLmIzYfElkDZDVyxnjZWry0qMpDG41bJfR3P3xdGUUf9vhaGgX7Oou%2FrOs7PIjReoe5jTjn1y1o%2FrGX6vxpCMxvOqR5TxmY5aRdLCQRsNZ%2FkyhVkM8yAGUT6Z4Kp4oH8bq1aL0NWNTleMX5fxVoYjMOBOimE9S9faRZbzHUpbLtlhm33IcD%2BrlOXuiS29sx4uCPpRI0nRJHvr9sN8T8rJf0JkVmLwziCpfwWb5kG7Ip9SGk3xMN9Zn1lAROkjZhPL8VRTMaUp48txsHVG6MK7z1UVvWSLajQ2luLX6KbW1XLdZRdkwVWoBC5FYasZCJMHyAeCo7j%2BTdKa6cMXYUzGlwxuSP9EcYTcVwxI9QGoMqT9ileGb%2Fg4NHBQOUBCigY2iAPmBDss0FRYF4DePE07vpkROz1xYtSaECPwHzMhj8gK4XEIogDIlDzSNatVvg04DxJ%2BNyGeac%2FqyAyZ1CKla7BUkVM%2FzhTU0K7TEDUtorEddAy8fBYfVWZUdrYqzpVXBwZ5WZb%2F5dbv5Pez8WtZR59fr5vfA82scc36dVuedTKbpRucNGdY4b99BkSeddx8FVuXOB2jgIX%2BAIkPHU%2BfO17hzbDsNf%2B4e3Z2bLdPXmYNtzIG7pTk4qjd3NWtwm87GSXZDMrF2bjMG08m3TqG3VmjPxBdNlT4Bio47CrejTgfbUnR8TKUONKWeTi7AiXeKu4fiOtg6tuKafqe4uymuWUWn39Nc95iKa%2BqaS0aje9C9oo17u0C8o5KEhyg0ZMKXlNuoPbiQBsgXXLwHCTELIW5F0TXo8IrWp8k4E%2BmhmARRlRWBniVDkobqxSQZjSTIclokb%2BRB1gdgmkLsUQ6PEyGnvwEra0xHxjK6Sb3VjoL6S1QH6t9HjL9R740L0whwQ%2FHVP%2B4atK2ysMfHgh4kHos7jn5os%2BDsaRZk0TDPyetSBqUk6%2BP8fjO6a2JnBT5ljZ8LJrMD04HBtO%2BKbycwWUYTTI73BWCqhmTJoYW336VPkp4q8NDAR6GJQp3ZFPNkkhLpBQADFQABRsM4SUfX5JXNYJgLLrxH9RTFLE%2FeRH5SAUi8zrmCl1j5NPGh3Myi0B1UVgEZnBq9rfBhrohuyEsj4zUpeNVAlqZkWiSld4KCEwGKJIsY52yi6ckGCq0auCd7PhRLxtbq%2FlMLR7bbOLJhH4pDYQ1ySXGfZPeFYDFUQ5kYEK4NnRr0FqBUjCilj7yFD3EwalEhllFJNr6Wefr2QvKPGgAQMVH2MZVnCmLBomgmEcEJX8uigNb1DLEqEXwK98SzuXiWFGsqzGuPZaIvJJGTSgUi5xRQ%2Bflg2wNSazClMFRFJ96DEHYPhSBLQ1BBU0E279nDL1gFdxg6dQw5%2BNgY0s9IDHNKOL0XM5ONiphMO1t0%2Bjjy%2FCPjCOve7Ornzx8dg%2FpdGJS7ssZzvRYGpaj6FzEorPs%2FFT%2B%2B6JjUSVmvddsMG5hUG5QOZ710L1ghqWNU54WlNkb1tVjSD65UWOqY1fnhqY1ZfSmerG4vbcc4J1Yjd9p7aVUrl%2BzFLOFpcTF97YjyGRJlBzeJMm45RtO2NKsMzecDTN%2Bs7ejxabmgNVu9pxJorILnXaDxbDF09ECj1XJbqqMx29AYC58DjbF1G5HTcVJwdbTHRf4lCrA8fh%2BhqP1k5%2F%2FkaI%2B1ZmO9PtpjeL7bJBHl0%2Bke7alAujT9i2VuR2V%2FDyprWlty2crbfL4X0UO%2BXVDlBNmI9fGA75eyEdvu2MiOnxQ4iwPKVSuX7ETKxp0fOk8%2F5K%2FsPW7rhg639WjrdKeLqZyUB7JP%2FPCW3R3eOncMHT2mYutbjR0bPj8cHf3wlu1pOGoJ2JSJ0IFXoQFnugYefA3Jt%2BGIVyTva0GiBwUh4cirXPK7C6JUy7UwH0XiLwx1MKy89yUSUSiLh7KeAPkmVAWSAQpDUZpMAHPZQwE%2F198vf6LylJmoyR9UtVZffIBmOnCtLApbmrBSWVuOdvU5UIQKVgZFSSLNDyjpAc4bbiZkePXSqem3GEOvLTRwqDuntr6PWl4lXr5XuARYgEQfsBw4cBERMOih0JWvBH5Mifee%2FNyXvKnoWwqVZZ76GyK%2BqFzWAwkZ6Ax6kIZLjxacdoQ8bvPf9WCorhwBvAp82TAB%2FLKUBZAuKwSdEMV95NeaJPslkA%2FfNKn7JS9eij9tvZa5kgc0%2B1Kqnaw5DCslsmQeW17dLM2AtTjO2VJKNx513%2FWmOjBuYqg75dtpNeSZ%2BnKo%2FiDLnqonHhffjixjxYsvdFqD%2FwA%3D" target="_blank" rel="noopener">draw.io链接</a></p><p><strong>pluggy 有三大要素</strong></p><p><code>HookspecMarker</code>(hookspec) 定义<br><code>HookimplMarker</code>(hookimpl) 实现<br><code>PluginManager</code>(pm) 插件管理器</p><blockquote><p>&emsp;&emsp;spec 定义了可以暴露的方法，可以通过 pm.hook 去调用对应的方法<br>&emsp;&emsp;调用的时候会逐个执行 impl 注册的插件，按 LIFO 后进先出的方式进行。</p></blockquote><h2 id="pluggy-案例代码"><a href="#pluggy-案例代码" class="headerlink" title="pluggy 案例代码"></a>pluggy 案例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pluggy</span><br><span class="line"></span><br><span class="line">hookspec = pluggy.HookspecMarker(<span class="string">"myproject"</span>)</span><br><span class="line">hookimpl = pluggy.HookimplMarker(<span class="string">"myproject"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpec</span>:</span></span><br><span class="line">    <span class="string">"""A hook specification namespace."""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @hookspec</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myhook</span><span class="params">(self, arg1, arg2)</span>:</span></span><br><span class="line">        <span class="string">"""My special little hook that you can customize."""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plugin_1</span>:</span></span><br><span class="line">    <span class="string">"""A hook implementation namespace."""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @hookimpl</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myhook</span><span class="params">(self, arg1, arg2)</span>:</span></span><br><span class="line">        print(<span class="string">"inside Plugin_1.myhook()"</span>)</span><br><span class="line">        <span class="keyword">return</span> arg1 + arg2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plugin_2</span>:</span></span><br><span class="line">    <span class="string">"""A 2nd hook implementation namespace."""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @hookimpl</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myhook</span><span class="params">(self, arg1, arg2)</span>:</span></span><br><span class="line">        print(<span class="string">"inside Plugin_2.myhook()"</span>)</span><br><span class="line">        <span class="keyword">return</span> arg1 - arg2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># create a manager and add the spec</span></span><br><span class="line">pm = pluggy.PluginManager(<span class="string">"myproject"</span>)</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"><span class="comment"># register plugins</span></span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line"><span class="comment"># call our `myhook` hook</span></span><br><span class="line">results = pm.hook.myhook(arg1=<span class="number">1</span>, arg2=<span class="number">2</span>)</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;代码来自官方文档<br>&emsp;&emsp;执行会先触发 <code>Plugin_2</code> 再触发 <code>Plugin_1</code></p></blockquote><blockquote><p>&emsp;&emsp;上述是 pluggy 最简单的用法<br>&emsp;&emsp;还有 <code>firstresult</code> <code>hookwrapper</code> 等用法<br>&emsp;&emsp;可以参照文档说明学习，用法非常灵活。</p></blockquote><hr><blockquote><p>&emsp;&emsp;<code>pm.hook.myhook</code> 就是在源代码中的 代码桩。<br>&emsp;&emsp;之前注册的插件都会在这个代码桩中逐一触发。<br>&emsp;&emsp;pluggy 是可配置的，可以用代码动态地修改注册地插件，实时改变运行的逻辑。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;使用 pluggy 可以将功能拆分成小文件</p></blockquote><ol><li>更好适配代码规范</li><li>逻辑更加简洁清晰，查找方便</li><li>功能扩展简单</li><li>启用禁用功能很方便</li></ol>]]></content>
    
    <summary type="html">
    
      pytest 团队出品 | 让代码变得可扩展
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python addict 库</title>
    <link href="https://blog.l0v0.com/posts/531dbb5a.html"/>
    <id>https://blog.l0v0.com/posts/531dbb5a.html</id>
    <published>2022-02-28T03:13:26.000Z</published>
    <updated>2022-07-21T06:37:45.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;</p></blockquote><h2 id="attrs-介绍"><a href="#attrs-介绍" class="headerlink" title="attrs 介绍"></a>attrs 介绍</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;</p></blockquote>]]></content>
    
    <summary type="html">
    
      像 JavaScript 一样使用字典
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python attrs 库</title>
    <link href="https://blog.l0v0.com/posts/1f4cc7d1.html"/>
    <id>https://blog.l0v0.com/posts/1f4cc7d1.html</id>
    <published>2022-02-28T02:13:51.000Z</published>
    <updated>2022-07-21T06:37:45.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;作为 TA 工具人，已经用 Python 很长一段时间，很多内置库都使用得得心应手了。<br>&emsp;&emsp;最近开始尝试了解一些第三方库，从而能够更好解决一些实际运用遇到的问题。<br>&emsp;&emsp;attrs 这个库是一个非常不错的代码优化方案。<br>&emsp;&emsp;可以简略了很多类描述的方法。</p></blockquote><p><a href="https://github.com/python-attrs/attrs" target="_blank" rel="noopener">Github 地址</a><br><a href="https://www.attrs.org/en/stable/" target="_blank" rel="noopener">官方说明文档</a></p><h2 id="attrs-解决的问题"><a href="#attrs-解决的问题" class="headerlink" title="attrs 解决的问题"></a>attrs 解决的问题</h2><blockquote><p>&emsp;&emsp;attrs 统一了类属性描述，让代码更加简洁可读。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArtisanalClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ArtisanalClass(a=&#123;&#125;, b=&#123;&#125;)"</span>.format(self.a, self.b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:</span><br><span class="line">            <span class="keyword">return</span> (self.a, self.b) == (other.a, other.b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ne__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        result = self.__eq__(other)</span><br><span class="line">        <span class="keyword">if</span> result <span class="keyword">is</span> <span class="built_in">NotImplemented</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:</span><br><span class="line">            <span class="keyword">return</span> (self.a, self.b) &lt; (other.a, other.b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__le__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:</span><br><span class="line">            <span class="keyword">return</span> (self.a, self.b) &lt;= (other.a, other.b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:</span><br><span class="line">            <span class="keyword">return</span> (self.a, self.b) &gt; (other.a, other.b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:</span><br><span class="line">            <span class="keyword">return</span> (self.a, self.b) &gt;= (other.a, other.b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> hash((self.__class__, self.a, self.b))</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;如果要写一个完整的类需要加上很多内置方法的实现。<br>&emsp;&emsp;这会导致大量的重复工作，而且代码会非常冗长。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartClass</span><span class="params">(object)</span>:</span></span><br><span class="line">   a = attr.ib()</span><br><span class="line">   b = attr.ib()</span><br></pre></td></tr></table></figure><p>代码例子来源于 <a href="https://www.attrs.org/en/20.3.0/why.html#hand-written-classes" target="_blank" rel="noopener">文档</a></p><blockquote><p>&emsp;&emsp;attrs 只需要简单的描述就可以帮你完成上面一大堆的功能，非常有用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SM_Controller</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,polyName,col,row,conPre,size,shape,color,shape)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.polyName = polyName</span><br><span class="line">        self.col = col</span><br><span class="line">        self.row = row</span><br><span class="line">        self.conPre = conPre</span><br><span class="line">        self.size = size</span><br><span class="line">        self.shape = shape</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SM_Controller</span><span class="params">(object)</span>:</span></span><br><span class="line">    polyName = attr.ib()</span><br><span class="line">    col = attr.ib()</span><br><span class="line">    row = attr.ib()</span><br><span class="line">    conPre = attr.ib()</span><br><span class="line">    size = attr.ib()</span><br><span class="line">    shape = attr.ib()</span><br><span class="line">    color = attr.ib()</span><br><span class="line">    shape = attr.ib()</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面就是实战中的例子</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1f4cc7d1/01.png" alt="alt"></p><blockquote><p>&emsp;&emsp;打印对象的时候使用 attrs 也会变得清晰。</p></blockquote><h2 id="attrs-介绍"><a href="#attrs-介绍" class="headerlink" title="attrs 介绍"></a>attrs 介绍</h2><h3 id="不可变类构建"><a href="#不可变类构建" class="headerlink" title="不可变类构建"></a>不可变类构建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="meta">@attr.s(frozen=True)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartClass</span><span class="params">(object)</span>:</span></span><br><span class="line">   a = attr.ib()</span><br><span class="line">   b = attr.ib()</span><br><span class="line"></span><br><span class="line">smart = SmartClass(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">smart.a = <span class="number">3</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#   File "c:\_thm\rez_local_cache\ext\attrs\21.4.0\site-packages\attr\_make.py", line 642, in _frozen_setattrs</span></span><br><span class="line"><span class="comment">#     raise FrozenInstanceError()</span></span><br><span class="line"><span class="comment"># attr.exceptions.FrozenInstanceError</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;加入 frozen 参数可以让类初始化之后不可改变。</p></blockquote><h3 id="验证数据"><a href="#验证数据" class="headerlink" title="验证数据"></a>验证数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartClass</span><span class="params">(object)</span>:</span></span><br><span class="line">   a = attr.ib()</span><br><span class="line">   b = attr.ib()</span><br><span class="line"><span class="meta">   @a.validator</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">must_be_str</span><span class="params">(self,attribute,value)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value,str):</span><br><span class="line">           <span class="keyword">raise</span> ValueError(<span class="string">"must be a string type"</span>)</span><br><span class="line"></span><br><span class="line">smart = SmartClass(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#   File "&lt;attrs generated init __main__.SmartClass-2&gt;", line 5, in __init__</span></span><br><span class="line"><span class="comment">#   File "&lt;stdin&gt;", line 8, in must_be_str</span></span><br><span class="line"><span class="comment"># ValueError: must be a string type</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;支持对初始化的数据进行校验。</p></blockquote><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartClass</span><span class="params">(object)</span>:</span></span><br><span class="line">   a = attr.ib(default=<span class="number">1</span>)</span><br><span class="line">   b = attr.ib(factory=list)</span><br><span class="line">smart = SmartClass()</span><br><span class="line">print(smart)  <span class="comment"># SmartClass(a=1, b=[])</span></span><br><span class="line">smart = SmartClass(b=<span class="number">2</span>,a=<span class="string">'a'</span>)</span><br><span class="line">print(smart)  <span class="comment"># SmartClass(a='a', b=2)</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;参数添加默认值之后可以不进行传参，也可以用键值进行传参。<br>&emsp;&emsp;使用 attrs 构建类就变得更加灵活。</p></blockquote><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="mutable-容器"><a href="#mutable-容器" class="headerlink" title="mutable 容器"></a>mutable 容器</h3><blockquote><p>&emsp;&emsp;构建 mutable 容器的时候，需要用 factory 参数或者 <code>attr.ib(default=attr.factory(list))</code><br>&emsp;&emsp;参数默认值使用数组和字典这类 mutable 容器会导致很多问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_list</span><span class="params">(a=[])</span>:</span></span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">a = return_list()</span><br><span class="line">print(a)  <span class="comment"># [1]</span></span><br><span class="line">a = return_list()</span><br><span class="line">print(a)  <span class="comment"># [1, 1] 这里的结果预期是 [1] 才对</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;虽然我们想要进入函数的时候 a 的默认值都是这个数组。<br>&emsp;&emsp;然而实际运行的时候赋值只发生了一次，并不会每次函数运行都重置默认值的。<br>&emsp;&emsp;所以参数不能使用 [] {} 这些容器，而是推荐使用 None，然后再函数中初始化</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_list</span><span class="params">(a=None)</span>:</span></span><br><span class="line">    a = a <span class="keyword">if</span> a <span class="keyword">else</span> []</span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">a = return_list()</span><br><span class="line">print(a)  <span class="comment"># [1]</span></span><br><span class="line">a = return_list()</span><br><span class="line">print(a)  <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;所以如果默认值想要为 数组 之类的，需要用 attrs 提供的 factory 方法。</p></blockquote><h3 id="hash-值"><a href="#hash-值" class="headerlink" title="hash 值"></a>hash 值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    a = attr.ib(default=<span class="number">1</span>)</span><br><span class="line">    b = attr.ib(factory=list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">smart = SmartClass()</span><br><span class="line">a = &#123;smart: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File "f:/repo/_blog/source/_posts/Python/pacakge/01_attrs.py", line 11, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     a = &#123;smart: 1&#125;</span></span><br><span class="line"><span class="comment"># TypeError: unhashable type: 'SmartClass'</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;attrs 默认处理 <code>__hash__</code> 方法，所以无法把它当成键值使用。<br>&emsp;&emsp;然而不使用 attrs 装饰的话是可以的。<br>&emsp;&emsp;解决方法就是加上 <a href="mailto:`@attr.s">`@attr.s</a>(hash=False)` 就可以了。</p></blockquote><p><a href="https://www.attrs.org/en/20.3.0/hashing.html" target="_blank" rel="noopener">参考文档 Hashing 的部分</a></p><h3 id="init-初始化"><a href="#init-初始化" class="headerlink" title="init 初始化"></a>init 初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    a = attr.ib(default=<span class="number">1</span>)</span><br><span class="line">    b = attr.ib(factory=list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,*args, **kwargs)</span>:</span></span><br><span class="line">        super(SmartClass,self).__init__(*args, **kwargs)</span><br><span class="line">        print(<span class="number">123</span>)</span><br><span class="line">        </span><br><span class="line">smart = SmartClass()  <span class="comment"># 子类并没有打印数据输出</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;依照文档 attrs 的装饰器会覆盖掉原有的 <code>__init__</code><br>&emsp;&emsp;但是如果我们确实要在 <code>__init__</code> 进行数据处理，需要使用 <code>__attrs_post_init__</code> 方法<br>&emsp;&emsp;或者也可以使用继承的方式调用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    a = attr.ib(default=<span class="number">1</span>)</span><br><span class="line">    b = attr.ib(factory=list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__attrs_post_init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span><span class="params">(SmartClass)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(SuperClass, self).__init__(*args, **kwargs)</span><br><span class="line">        print(<span class="number">456</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">smart = SmartClass()  <span class="comment"># 打印 123</span></span><br><span class="line">sup = SuperClass()  <span class="comment"># 打印 123 456</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;Python3.7 加入了 dataclass 内置模块，基本上涵盖 attrs 大多数功能。<br>&emsp;&emsp;attrs 的好处在于老版本完美兼容 Python2 可以在 Maya 等 DCC 里面使用。<br>&emsp;&emsp;让代码编写更加紧凑和简洁。</p></blockquote>]]></content>
    
    <summary type="html">
    
      简化类描述神库
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>2021 年度总结</title>
    <link href="https://blog.l0v0.com/posts/2dac7475.html"/>
    <id>https://blog.l0v0.com/posts/2dac7475.html</id>
    <published>2022-01-09T13:45:52.000Z</published>
    <updated>2022-07-21T06:37:45.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;最近好长一段时间没有更新博客了<br>&emsp;&emsp;这个年度终结也大部分都是 1月1日就更新了，我硬是拖到了1月中旬<em>(:з」∠)</em><br>&emsp;&emsp;最近发生了很多事，有很多东西可以记录，但又不知道从哪里下笔的迷之感觉。</p></blockquote><h2 id="年度大事汇总"><a href="#年度大事汇总" class="headerlink" title="年度大事汇总"></a>年度大事汇总</h2><ol><li>活水去光子工作室</li><li>搭建 Unreal-PyToolkit 框架，博客大量更新自己的踩坑经历</li><li>折腾 PKM 的历程 具体可以看 <a href="https://blog.l0v0.com/posts/afa065b7.html">PKM文章总结</a></li><li>基金理财 (华夏全球优选派)</li><li>交到第一个女朋友❤</li></ol><h2 id="工作-amp-学习"><a href="#工作-amp-学习" class="headerlink" title="工作 &amp; 学习"></a>工作 &amp; 学习</h2><blockquote><p>&emsp;&emsp;一晃眼间，我已经毕业一年有余了，我是 2020 年毕业的，不过我从 2019 年年底就过来在魔方工作室实习。<br>&emsp;&emsp;到2021年10月份活水到光子，在魔方也有快两年了。<br>&emsp;&emsp;这个过程我们 TA 团队人员流失严重，在我活水同时还有其他人也选择了活水，仅仅2021年就基本走了一半的人<em>(:з」∠)</em><br>&emsp;&emsp;只能说这边根本留不住人，一方面 TA 比较抢手，这边的钱不够，另一方面是这边的团队建设真的不太行</p></blockquote><blockquote><p>&emsp;&emsp;关于这边的问题，其实我有很多话想要吐槽，但总归是在这里快两年了，虽有不愉快，也逼着自己成长了不少，我还是感谢的。</p></blockquote><blockquote><p>&emsp;&emsp;我来到魔方半年，还没有到毕业转正，我导师就跑去光子了。而且刚来两个星期就被分派到项目组里面，基本上都是靠自己自力更生解决问题为主。<br>&emsp;&emsp;所以那会挺焦虑的，而且作为 TA 一直在干 TD 的活，也有点名不副实<em>(:з」∠)</em></p></blockquote><blockquote><p>&emsp;&emsp;不过我的遭遇已经算好了，项目组里有个校招的角色美术更惨，当时角色模型组就两个正编，年后都跑路了、<br>&emsp;&emsp;刚过来导师没了，组里就他一个人<em>(:з」∠)</em>，所以这是什么神仙开局, 然后项目组之后调派另一个工作室的 6 级美术过来帮忙。<br>&emsp;&emsp;因为这个美术之前实习的时候在这个项目组待过。<br>&emsp;&emsp;所以紧靠两个人新人根本就没法把效果做好，对接好外包，把模型推到下游流程已经尽力了<em>(:з」∠)</em><br>&emsp;&emsp;而且由于项目是手绘风格，还一直招不到合适的人过来，最后好不容易招到了，整个组也就两人。<br>&emsp;&emsp;考核的时候由于模型效果没有提升，组内必须有一个人背星，那位校招生也只能默默承担。<br>&emsp;&emsp;ε=(´ο｀*)))，他的 2021 年开年是 2 星评价，年终大砍。我好歹还是拿了 4 星，所以有时候人比人比死人。</p></blockquote><blockquote><p>&emsp;&emsp;那为什么我能拿到 4 星呢？<br>&emsp;&emsp;主要还是因为，2020年年中的时候从 Weta 来了一个 TD 转 TA 的大佬，leader 将他定位成我们组的组长。<br>&emsp;&emsp;我当时转到中台做工具，支援多个项目，就在他身边学习了很多知识。<br>&emsp;&emsp;虽然很多都是靠看他写的代码学习的，并没有怎么请教他，支援的项目也不一样，但还是很感激。<br>&emsp;&emsp;他也能够理解我的工作，所以能够给我比较客观的评价。(因为组里的 leader 是个主美，忙项目组的事情就够呛了，基本不太了解我们的情况)<br>&emsp;&emsp;然而 2021 年开年终究还是要 TA 组给名额背锅，也导致后面年中的时候有人因此流失了。</p></blockquote><blockquote><p>&emsp;&emsp;2021 年春节结束之后，首先是有两个 TA 晋级的，晋级完成就活水去光子了。<br>&emsp;&emsp;到了 5 月份的时候，我们的组长也流失了，毕竟这边的流程很混乱，有很多流程根本推不动，也看不到头。<br>&emsp;&emsp;年中的时候那位背锅的 TA 也找到下家，直接离职了，而且他家在上海，本来也不用过来深圳，结果过来还背锅，他也算是仁至义尽了。<br>&emsp;&emsp;自从组长走了之后，组内就没了主心骨，我也觉得学不到东西，一直在干杂活，挺焦虑的。<br>&emsp;&emsp;加上那个时候开始帮项目组的一个美术搭建美术工具，结果我们都把方案定好了，准备推行的时候，程序leader 觉得方案不可行，来回折腾。<br>&emsp;&emsp;所以 5 月份非常难顶，当时有经验推动美术流程的是从天美过来的美术，我这个无能 TA 只能听他的建议来制定美术规范。<br>&emsp;&emsp;可能有更好地做法，但是我也没有足够的经验，至少他提的方案的确比起当前混乱的规范要好，所以我也就接受了。<br>&emsp;&emsp;当然为了做他的工具在 Unreal 里面调用 Qt 踩了非常多的坑，21年更新的很多博客都是和 Unreal Python Qt 开发相关的。<br>&emsp;&emsp;我也顺手推出了 <a href="https://github.com/FXTD-ODYSSEY/Unreal-PyToolkit" target="_blank" rel="noopener">Unreal-PyToolkit</a> 开源框架<br>&emsp;&emsp;将我博客里面好一些的流程都整合到里面去了，只是由于离开魔方的原因，这个仓库目前就停更了。</p></blockquote><blockquote><p>&emsp;&emsp;基于上面的种种情况，加上我也快满一年可以活水了，所以我也非常想逃离<em>(:з」∠)</em><br>&emsp;&emsp;没想到有相同想法可不止我一个，我走了之后还有两个 TA 也跟着活水，魔方真的太难了。</p></blockquote><blockquote><p>&emsp;&emsp;最开始我联系我了前导师，想要他帮忙引荐一下，不过他已经挖了这边很多人了。<br>&emsp;&emsp;而且我这个过去他那边太明显了，可能不太好，加上当时光子扩招，他的小组编制爆了，我过不去。<br>&emsp;&emsp;所以最后是<a href="https://www.zhihu.com/people/shi-qi-xing-29" target="_blank" rel="noopener">星哥</a>主动找我聊，后续也就顺理去了星哥的组下。</p></blockquote><hr><blockquote><p>&emsp;&emsp;曾经有一份搞 Houdini 的机会摆在我面前，我没有珍惜，毅然决然选择了光子，可能也是人生岔路的一种遗憾吧~<br>&emsp;&emsp;当时虽然和星哥谈妥了，但是魔方中台的 Falcon 组组长还是想争取一下，让我过去他们组。<br>&emsp;&emsp;那个时候我已经拿到了 光子 那边的活水邮件了，如果点确认就没有回头箭了。<br>&emsp;&emsp;想到星哥给我争取这个机会也是挺不容易的(后来我才得知，他们组里有人活水了，我才有这个机会过去)<br>&emsp;&emsp;加上光子比较国际化什么的，所以最后就放弃了去魔方中台，主要还是魔方太让我失望了<em>(:з」∠)</em><br>&emsp;&emsp;可能当时选择去那边，我的人生也会不一样吧，终究还是放不下 Houdini ，然而似乎和它没有什么缘分。</p></blockquote><blockquote><p>&emsp;&emsp;所以那段时间准备跑路了，就腾了一些时间来折腾 PKM 的事情，才有后面的 <a href="https://blog.l0v0.com/posts/afa065b7.html">PKM文章总结</a></p></blockquote><hr><blockquote><p>&emsp;&emsp;后来经过一些波折，我在 9 月底的时候就搬到了新的办公地点，去到光子下工作了。<br>&emsp;&emsp;原本我过来是负责 Unreal 引擎工具开发的，我打算抱紧大佬的大腿，顺便深入学习一下 引擎 工具开发相关的知识。<br>&emsp;&emsp;没想到我过去之后，组长改了方向，打算进军 Maya 绑定。<br>&emsp;&emsp;恰好我也算是在华强的时候积累了不少相关的知识，可以派上用场，只是让我万万没有想到的是。<br>&emsp;&emsp;这边很多人都是做 shader 出身的，他们对 Maya 的了解并不多，我反而成了他们的大腿。<br>&emsp;&emsp;这个转变有点让我不知道哭还是笑<em>(:з」∠)</em></p></blockquote><blockquote><p>&emsp;&emsp;其实和我同期活水的，还有项目组的一个程序，当时他也对魔方的管理感到失望，加上钱给的不多，所以就去天美了。<br>&emsp;&emsp;本来他那边的组长给他吹嘘一堆技术，让他以为很靠谱，其实过去之后也就那样，而且过去之后就变边缘人了，有很多东西不能主导。<br>&emsp;&emsp;我这边的话可以主导很多东西，但我还是很担心自己的经验不足会把大家带到沟里去<em>(:з」∠)</em></p></blockquote><blockquote><p>&emsp;&emsp;恰好那个时候我从厂长那里拿到了 RBF Retarget 算法等等的一些源码，于是经过我自己摸索尝试提出了通过 RBF retarget 模型的方案。<br>&emsp;&emsp;使用这个方案可以将不同脸的模型精准 retarget 过去，对于 BS 复用有非常好的效果。<br>&emsp;&emsp;没想到，我误打误撞研究出的方案，发现正是目前业界比较前沿的用法，也算是这套方案的落地让我完成第一版的 demo<br>&emsp;&emsp;但是制定绑定框架，整个流程是非常庞大而长期的事情，目前组内加上我也就 4 个人，我总感觉一眼望不到头<em>(:з」∠)</em><br>&emsp;&emsp;年底的时候又因为乘上了 <code>元宇宙</code> 的东风，发现公司内很多团队都想做类似的东西，着实让我压力山大。</p></blockquote><blockquote><p>&emsp;&emsp;由于又回到了 Maya ，所以我还是未能如愿以偿地用上 Houdini 的技术特性。看来还是得私下再抽时间去学习和研究了。<br>&emsp;&emsp;RBF 等等算法由于自己的数学太菜了，还没有搞得很明白，还需要再花时间恶补一下自己的数学基础。</p></blockquote><blockquote><p>&emsp;&emsp;不过去了光子之后，倒是认识了 龙浩，在他那边学习到了很多代码规范，ci 工具构建等等的流程知识。<br>&emsp;&emsp;总算是体会到大厂的规范化开发的感觉，之前在项目组的敏捷开发就非常离谱，没有单元测试，甚至没有代码审查。<br>&emsp;&emsp;初期还能接受，随着项目越做越复杂，我感觉很多时间都浪费在无休止地调试 BUG 里面，浪费时间。<br>&emsp;&emsp;在这边接触了一整套代码规范和开发工具，还有 Git 代码 Review 等等的知识，学习到了很多知识。<br>&emsp;&emsp;所以这段时间周末会去抽时间把相应的知识补全，导致博客自此停更了很长一段时间。<br>&emsp;&emsp;其实也有很大原因是我自己有点焦虑，也不知道从何处落笔比较好。</p></blockquote><blockquote><p>&emsp;&emsp;但是这段时间不仅仅没有好好写博客，之前立的 Flag 要把 Anki 和 Tiddlywiki 给用起来。<br>&emsp;&emsp;也因为各种原因搁置了<em>(:з」∠)</em><br>&emsp;&emsp;知道最近才逐渐开始重新将 Tiddlywiki 给捡起来。</p></blockquote><blockquote><p>&emsp;&emsp;目前已经过渡到 2022 年了，目前的工作进度算是稳定了一点。</p></blockquote><h2 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h2><blockquote><p>&emsp;&emsp;2021年我开始将自己的工资投入到理财里面。<br>&emsp;&emsp;可是没想到 2021 年开年就是高峰，然后就一路低迷走低。<br>&emsp;&emsp;好在我的钱大头都在 百信银行 存着(百信银行有 3.2% 的回报，比微信和支付宝要高一点，也可以灵活支取)</p></blockquote><blockquote><p>&emsp;&emsp;开年的时候我听我哥的说法，投了腾讯的一起投 <code>华夏全球优选派</code> 全球投资组合。<br>&emsp;&emsp;这是一个非常高风险的组合，近一年下来已经跌到 负数<em>(:з」∠)</em><br>&emsp;&emsp;所以是没赚反而亏了。<br>&emsp;&emsp;主要是港股年初原本预计是低洼地，没想到会因为各种因素一跌再跌，导致暴雷。<br>&emsp;&emsp;再加上今年发生了好一些的事件，中概股打压、教育行业政策、国家反垄断等等政策都对互联网行业打击极大。<br>&emsp;&emsp;以至于到了年底都说现在是互联网寒冬，市场不景气。</p></blockquote><blockquote><p>&emsp;&emsp;我这一年2/3的钱放到百信银行保本，1/3 投到了一起投。<br>&emsp;&emsp;可以说是投资不太成功的样子<em>(:з」∠)</em><br>&emsp;&emsp;后续打算定投 中证500 沪深300 之类的指数基金，只要国家的经济没有出现大问题，这类基金长线投资基本都是赚的。<br>&emsp;&emsp;只是目前的本钱比较少，还需要慢慢积累，<code>华夏全球优选派</code> 目前这个已经没有继续定投了。<br>&emsp;&emsp;投这个基金之初也是说投入三年再取，所以先放在一边，等它的业绩慢慢恢复好了。</p></blockquote><hr><details><br><summary>爱情</summary><br><br>2021 年圣诞我鼓起勇气告白，成功交到了我第一个女朋友。<br>这算是我 2021 年最完美的收官和点睛之笔了❤。<br><br></details><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;2021 年经历了很多事情，这是我毕业步入社会的第一个年头，在这里我只想感叹时光飞逝，岁月如梭。<br>&emsp;&emsp;大学的时光仿佛还在昨日，但我已不再是过去的我了。</p></blockquote><iframe class="center_iframe" src="//player.bilibili.com/player.html?aid=764441478&bvid=BV1Mr4y1Q7oW&cid=450409272&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><blockquote><p>&emsp;&emsp;年底的时候看到这个视频，深受触动。<br>&emsp;&emsp;当时 Up 组的 27 岁对话视频，我当时还在大三迷茫的时候看过，如今看这个对话视频，我仿佛看到当时的我自己。<br>&emsp;&emsp;非常的有感触，物是人非，勿忘初心。<br>&emsp;&emsp;所以我也想以文章的形式做一个小对话，如果以后有机会的话，也想要学习 Up 主一样做个 vlog<br>&emsp;&emsp;这里我就给自己写一份信，希望明年的自己可以重拾现在的心境，勿忘初心。 <a href="3cefe25e.html">链接</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      Goodbye 2021
    
    </summary>
    
      <category term="年度总结" scheme="https://blog.l0v0.com/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="✒博客/人生" scheme="https://blog.l0v0.com/tags/%E2%9C%92%E5%8D%9A%E5%AE%A2-%E4%BA%BA%E7%94%9F/"/>
    
      <category term="🧐回顾" scheme="https://blog.l0v0.com/tags/%F0%9F%A7%90%E5%9B%9E%E9%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>Quicker 编辑器快捷键</title>
    <link href="https://blog.l0v0.com/posts/190b1e59.html"/>
    <id>https://blog.l0v0.com/posts/190b1e59.html</id>
    <published>2021-09-25T06:24:00.000Z</published>
    <updated>2022-07-21T06:37:45.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;工作一年有余了，一直不舍得在这些软件领域上面花钱。<br>&emsp;&emsp;感觉自己还是学生，花钱总是省着花，只买一些刚需的产品。<br>&emsp;&emsp;省下的钱先放到大部分到放到了百信银行的钱包 plus 里面了 (利率比 零钱通 支付宝 要高一点点)<br>&emsp;&emsp;另外部分购买了基金，只是目前的市场行情不太好，只能说放着不管吧。</p></blockquote><blockquote><p>&emsp;&emsp;<a href="https://getquicker.net/" target="_blank" rel="noopener">Quicker</a> 我比较早就接触了，具体可以看我以前的<a href="./fcc8e205.html">效率提升指南</a>的推荐。<br>&emsp;&emsp;它的免费功能就已经支持多端同步，能够满足大部分使用情景，非常良心。<br>&emsp;&emsp;也因为这样我一直不舍得花钱付费体验，而且部分付费的功能我也有其他软件作为辅助替代。<br>&emsp;&emsp;无论如何，这个软件目前还在搞促销，年费着实不贵。 <a href="https://getquicker.net/pricing" target="_blank" rel="noopener">付费链接</a><br>&emsp;&emsp;这么良心的软件，如果没人支持倒了，那确实就很可惜，所以就国产之光而言，也要支持一波。<br>&emsp;&emsp;付费之后可以让我将多个软件整合成一个软件，使用体验提升了不少，而且多端同步非常方便，不用每台电脑都进行软件配置。</p></blockquote><h2 id="替代-WGesture"><a href="#替代-WGesture" class="headerlink" title="替代 WGesture"></a>替代 WGesture</h2><blockquote><p>&emsp;&emsp;之前我的手势滑动方案是用免费的 WGesture ，具体可以参考我这一篇文章 <a href="./82cd243a.html">链接</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/01.png" alt="Alt"></p><blockquote><p>&emsp;&emsp;Quicker 的付费功能也支持鼠标手势，因为我已经用惯了 WGesture ，所以直接将手势功能迁移到了 Quicker<br>&emsp;&emsp;目前大部分功能都能很好支持，部分手势比如滑特定手势加滚轮调节音量之类就做不到了。<br>&emsp;&emsp;不过这些小问题并不影响，quicker自带的屏幕上方滚动调节音量也非常方便。</p></blockquote><blockquote><p>&emsp;&emsp;另外通过 quicker 可以多端同步我自己定义的手势，这比 WGesture 要方便不少。<br>&emsp;&emsp;虽然 WGesture 也可以导出配置文件，然后用坚果云同步配置文件，总结起来还是 Quicker 自动同步方便得多。</p></blockquote><h2 id="标点符号替换"><a href="#标点符号替换" class="headerlink" title="标点符号替换"></a>标点符号替换</h2><blockquote><p>&emsp;&emsp;以前我是用 capslock+ 基于 <a href="https://www.autohotkey.com/" target="_blank" rel="noopener">autohotkey</a> 设计的一套 capslock 键键盘映射。<br>&emsp;&emsp;并且利用 authotkey 的 <a href="https://www.autohotkey.com/docs/Hotstrings.htm" target="_blank" rel="noopener">hotstring</a> 功能来输入中文标点，这样我可以将输入法的标点符号输入改为英文，避免我写代码的时候输入中文标点导致出错。<br>&emsp;&emsp;具体的配置历程可以参照我魔改的 capslock+ 的仓库 <a href="https://github.com/FXTD-ODYSSEY/capslock-plus" target="_blank" rel="noopener">链接</a><br>&emsp;&emsp;不过如今可以利用 quicker 的文本指令来实现。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/02.png" alt="Alt"></p><blockquote><p>&emsp;&emsp;quicker 无法做到 autohotkey 的输入两个标点符号自动转换为中文符号的效果，</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/03.png" alt="Alt"></p><blockquote><p>&emsp;&emsp;设置里面只能选定按特定的按键来触发替换，只是多输入一个空格，我个人觉得还是没有问题的。<br>&emsp;&emsp;使用了一段时间之后就是输入标点太快的话会有一定可能影响到后面输入的内容，通常不会有这么快的手速。</p></blockquote><h2 id="键盘映射"><a href="#键盘映射" class="headerlink" title="键盘映射"></a>键盘映射</h2><blockquote><p>&emsp;&emsp;有了上面的体验之后，我就想进一步取代掉 capslock+ 的功能。<br>&emsp;&emsp;恰巧前段时间看上了一款很神奇的带触控小键盘 <a href="https://www.bilibili.com/video/BV1aA411571Y" target="_blank" rel="noopener">prestigio</a> 心动直接剁手了。<br>&emsp;&emsp;买之前本来想用触控完全取代鼠标的，但是实际上使用 Maya 之类的软件还是不可能离开鼠标。<br>&emsp;&emsp;所以买回来之后其实很少用到触控功能，毕竟已经用惯鼠标了，不过它的小巧轻便依旧成为我办公的日常利器。<br>&emsp;&emsp;只是小键盘的一大问题就是 方向键 缩在右下角的角落里，使用起来非常不方便。<br>&emsp;&emsp;于是我想到了 capslock+ 的键盘映射功能。 <a href="https://capslox.com/capslock-plus/" target="_blank" rel="noopener">链接</a><br>&emsp;&emsp;capslock+ 将方向键映射为 ESDF 四个键(配合 capslock 键一起按)<br>&emsp;&emsp;经过我自己一番折腾体验之后，还是觉得游戏里面的 WASD 键比较顺手，所以我在 Quicker 里面复现了这一整套配置。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/04.png" alt="Alt"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/05.png" alt="Alt"></p><blockquote><p>&emsp;&emsp;我也将键盘靠右的按键，比如回车键 del键 backspace键 映射到左边来，这样我就不用松开鼠标的右手了。<br>&emsp;&emsp;经过了一个月的熟悉之后，我觉得这套键盘映射非常香，缺点就是在别人的电脑上会下意识用 capslock+WASD 去敲方向键，结果不起作用，着实让我很抓狂。</p></blockquote><table><thead><tr><th>源按键</th><th>映射按键(配合 capslock 一起按)</th></tr></thead><tbody><tr><td>↑</td><td>W</td></tr><tr><td>←</td><td>A</td></tr><tr><td>↓</td><td>S</td></tr><tr><td>→</td><td>D</td></tr><tr><td>Backspace</td><td>Q</td></tr><tr><td>Del</td><td>R</td></tr><tr><td>Home</td><td>1</td></tr><tr><td>End</td><td>3</td></tr></tbody></table><blockquote><p>&emsp;&emsp;基本的映射如图所示，配合 ctrl shift 的按键都需要单独配置，所以花了我不少时间。<br>&emsp;&emsp;另外我买的键盘并不是全键无冲突的，这导致有些快捷键无法触发，比如我的 prestigio 键盘的 <code>capslock+shift+S</code> 就是无法不起作用，<br>&emsp;&emsp;我当初还以为是 quicker 的 BUG ，还特意去 github 给他提了 issue ，然后才发现是键盘的问题，因为换了一个键盘就可以触发了。<br>&emsp;&emsp;不过全键无冲突的键盘也是贵死，而且必要性很小，所以某些问题可以忍耐一下，比如说用其他的按键映射来解决问题。</p></blockquote><h2 id="编辑器功能键"><a href="#编辑器功能键" class="headerlink" title="编辑器功能键"></a>编辑器功能键</h2><blockquote><p>&emsp;&emsp;有了上面的键盘映射之后，我有想到可以将 VScode 的部分编辑器特有的功能集成到按键里面。<br>&emsp;&emsp;毕竟按键触发是可以调用 Quicker 动作的，我可以模拟部分 VScode 的输入功能，提升在外部输入的体验。<br>&emsp;&emsp;所以我自己做了一个动作，输入参数实现一连串的输入，比如自动换行到下一行或者上一行，复制一行，粘贴一行 等等<br>&emsp;&emsp;编辑器还有个非常实用的扩选功能，我也想通过 quicker 动作实现，只是每一次实现都要获取一下当前光标下的文本，然后才能解析扩选，效率有点低。<br>&emsp;&emsp;目前还没有将相应的功能用 quicker 动作做好，以后做好了可以抽时间分享一下。</p></blockquote><h2 id="键盘控制鼠标"><a href="#键盘控制鼠标" class="headerlink" title="键盘控制鼠标"></a>键盘控制鼠标</h2><blockquote><p>&emsp;&emsp;经过上面的摸索之后，我还发现键盘映射是有用户共享的 <a href="https://getquicker.net/share/powerkeys" target="_blank" rel="noopener">链接</a><br>&emsp;&emsp;应为这个是付费功能，共享的用户并不多，看了一下共享的功能，发现还有人用键盘来控制鼠标的。<br>&emsp;&emsp;于是我也基于别人的一些写法，做了独属于自己的一套键盘控制鼠标的逻辑。</p></blockquote><p><a href="https://getquicker.net/Share/PowerKeys/Package?id=46ba49bd-cbbd-4e8c-71d5-08d96b96059c" target="_blank" rel="noopener">鼠标控制共享</a></p><blockquote><p>&emsp;&emsp;上面是我做的键盘映射共享。</p></blockquote><table><thead><tr><th>组合键(按住 Tab 键)</th><th>标题</th><th>操作类型</th></tr></thead><tbody><tr><td>3</td><td>鼠标右键</td><td>PlayKeyMouseData</td></tr><tr><td>←</td><td>向左移动</td><td>PlayKeyMouseData</td></tr><tr><td>↑</td><td>向上移动</td><td>PlayKeyMouseData</td></tr><tr><td>→</td><td>向右移动</td><td>PlayKeyMouseData</td></tr><tr><td>↓</td><td>向下移动</td><td>PlayKeyMouseData</td></tr><tr><td>1</td><td>鼠标左键</td><td>PlayKeyMouseData</td></tr><tr><td>2</td><td>鼠标中键</td><td>PlayKeyMouseData</td></tr><tr><td>4</td><td>X1键</td><td>PlayKeyMouseData</td></tr><tr><td>5</td><td>X2键</td><td>PlayKeyMouseData</td></tr><tr><td>A</td><td>向左移动</td><td>PlayKeyMouseData</td></tr><tr><td>D</td><td>向右移动</td><td>PlayKeyMouseData</td></tr><tr><td>E</td><td>向后滚动</td><td>PlayKeyMouseData</td></tr><tr><td>Q</td><td>向前滚动</td><td>PlayKeyMouseData</td></tr><tr><td>S</td><td>向下移动</td><td>PlayKeyMouseData</td></tr><tr><td>W</td><td>向上移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + ←</td><td>快速向左移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + ↑</td><td>快速向上移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + →</td><td>快速向右移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + ↓</td><td>快速向下移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + A</td><td>快速向左移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + D</td><td>快速向右移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + E</td><td>快速向后滚动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + Q</td><td>快速向前滚动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + S</td><td>快速向下移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + W</td><td>快速向上移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + F1</td><td>按下鼠标左键</td><td>PlayKeyMouseData</td></tr><tr><td>Space + F2</td><td>按下鼠标中键</td><td>PlayKeyMouseData</td></tr><tr><td>Space + F3</td><td>按下鼠标右键</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + ←</td><td>轻微向左移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + ↑</td><td>轻微向上移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + →</td><td>轻微向右移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + ↓</td><td>轻微向下移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + A</td><td>轻微向左移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + D</td><td>轻微向右移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + E</td><td>轻微向后滚动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + Q</td><td>轻微向前滚动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + S</td><td>轻微向下移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + W</td><td>轻微向上移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + F1</td><td>松开鼠标左键</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + F2</td><td>松开鼠标中键</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + F3</td><td>松开鼠标右键</td><td>PlayKeyMouseData</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/07.png" alt="Alt"></p><blockquote><p>&emsp;&emsp;基本上思想也是 WASD 移动鼠标，12345 表示鼠标左中右键 + X1 X2 键，Q E 键做鼠标滚轮<br>&emsp;&emsp;按住空格键是加速移动，按住 alt 键是略微移动。<br>&emsp;&emsp;我还加了 F1 F2 F3 用来模拟按住鼠标按键的效果，只是用起来很不方便，很少会用到，并且我的 prestigio 键盘有实体的鼠标按键，按那个更方便一点。</p></blockquote><h2 id="粘贴板"><a href="#粘贴板" class="headerlink" title="粘贴板"></a>粘贴板</h2><blockquote><p>&emsp;&emsp;以前的粘贴板我是网上推荐的 Ditto 进行记录的。<br>&emsp;&emsp;现在可以结合 Quicker 的一个动作 <a href="https://getquicker.net/Sharedaction?code=9ec53d43-5539-4571-6886-08d8c752bfcb" target="_blank" rel="noopener">粘贴板</a> 来实现这个功能，付费之后就可以用 快捷键 触发动作，使用上更加方便。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/06.png" alt="Alt"></p><blockquote><p>&emsp;&emsp;日常体验已经完全可以替代 ditto 。<br>&emsp;&emsp;ditto 还有分组之类的功能，其实使用并不多。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;quicker 价格便宜，购买之后便利提升了不少，强烈推荐。<br>&emsp;&emsp;无论作者还是社区都在朝着 <code>all in one</code> 的道路迈进<br>&emsp;&emsp;我已经找到了和 listary 相似的启动器动作 <a href="https://getquicker.net/Sharedaction?code=152618d3-6c3c-49e8-afef-08d8f6743496" target="_blank" rel="noopener">智搜</a><br>&emsp;&emsp;可惜这个动作的全盘搜索是基于 everything 的，也不知道如何设定到当前目录下进行搜索，我体验了一段时间还是换回了 listary。<br>&emsp;&emsp;listary 另一个切换目录的功能 也有 动作模拟 <a href="https://getquicker.net/Sharedaction?code=415d9d0f-bc9c-4710-c434-08d7e719849b" target="_blank" rel="noopener">快速切换</a><br>&emsp;&emsp;体验上虽然比 Quicker 要慢一点，但能够满足我的需求就已经谢天谢地了。</p></blockquote><blockquote><p>&emsp;&emsp;最后截图上，也有 <a href="https://getquicker.net/Sharedaction?code=57738e7e-9b34-4add-efd8-08d71d5bdffe" target="_blank" rel="noopener">Ever截图</a> 神器<br>&emsp;&emsp;可以使用 quicker 提供的截图功能，quicker 的快速截图做得很想 snipaste ，目前已经可以钉图了，只是还缺少图画功能，因此还尚未能取代 snipaste<br>&emsp;&emsp;Ever截图的强大在于支持第三方截图功能，获取粘贴板的图片可以做后续的诸多操作，比如识别或者搜索</p></blockquote><blockquote><p>&emsp;&emsp;目前我的日常使用已经离不开 quicker ，希望 quicker 能够再接再厉，提供更好的体验~</p></blockquote>]]></content>
    
    <summary type="html">
    
      结合 Quicker 付费功能 | 映射键盘键位
    
    </summary>
    
      <category term="效率提升指南" scheme="https://blog.l0v0.com/categories/%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="࠰Windows" scheme="https://blog.l0v0.com/tags/%E0%A0%B0Windows/"/>
    
      <category term="🚀效率" scheme="https://blog.l0v0.com/tags/%F0%9F%9A%80%E6%95%88%E7%8E%87/"/>
    
      <category term="💾软件" scheme="https://blog.l0v0.com/tags/%F0%9F%92%BE%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>个人 PKM 折腾记</title>
    <link href="https://blog.l0v0.com/posts/afa065b7.html"/>
    <id>https://blog.l0v0.com/posts/afa065b7.html</id>
    <published>2021-09-11T04:28:51.000Z</published>
    <updated>2022-07-21T06:37:45.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;最近的文章的产出极大地降低了<em>(:з」∠)</em><br>&emsp;&emsp;过程的原因也是非常地复杂，因为我去折腾了 PKM (Personal Knowledge Management)。<br>&emsp;&emsp;我是经过了一段时间折腾然后放弃，然后又捡起来的过程。<br>&emsp;&emsp;但是这个过程实在是太过碎片化，然而又的确花费了我无数的时间，于是中途实在是没有一个很好的写长文的状态。<br>&emsp;&emsp;说实话 PKM 是一个非常宏大的话题，这次的文章也只是对这三个多月的低产做一次回顾和总结。<br>&emsp;&emsp;希望自己能够更好地梳理自己的知识框架。</p></blockquote><h2 id="上半年折腾回顾"><a href="#上半年折腾回顾" class="headerlink" title="上半年折腾回顾"></a>上半年折腾回顾</h2><blockquote><p>&emsp;&emsp;关于知识的整理和总结，我之前是利用 <a href="https://blog.l0v0.com/categories/%E5%89%8D%E7%AB%AF/hexo/">Hexo</a> 和 <a href="https://blog.l0v0.com/posts/d8d5b740.html">Hugo</a> 来搭建静态博客网站。<br>&emsp;&emsp;将自己整理的文章记录在这些平台上面，以完成自己的知识梳理和输出。<br>&emsp;&emsp;后来又因为自己做框架需要一些文档记录，于是我有折腾了 <a href="https://blog.l0v0.com/posts/578b1a97.html">docsify</a> 来构建自己的文档。<br>&emsp;&emsp;前前后后折腾了三个不同的平台，都是基于 Markdown 语法进行写作的。<br>&emsp;&emsp;直到搭建 Hugo 的 HoudiniWiki 网站的时候我才感觉到知识串联的重要性。</p></blockquote><h3 id="二月份-Hugo-amp-HoudiniWiki"><a href="#二月份-Hugo-amp-HoudiniWiki" class="headerlink" title="二月份 Hugo &amp; HoudiniWiki"></a>二月份 Hugo &amp; HoudiniWiki</h3><blockquote><p>&emsp;&emsp;于是我年初折腾 HoudiniWiki 的一个比较重要的目标就是再 Hugo 里面实现双向链接的 宏函数 将知识串联起来。<br>&emsp;&emsp;具体的情况只是简单记录在 <a href="https://hou.l0v0.com/" target="_blank" rel="noopener">hou.l0v0.com</a> 的 log 上 <a href="https://hou.l0v0.com/zh/updates/log/" target="_blank" rel="noopener">链接</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/hou.png" alt="alt"></p><blockquote><p>&emsp;&emsp;当时的做法是利用 github ci 去跑一个写好的 Python 脚本。<br>&emsp;&emsp;Python 会用正则表达式去匹配所有的文章，如果里面找到了 <code>relink</code> 的宏之后就会将其记录到一个 json 文件里面。<br>&emsp;&emsp;然后 Hugo 构建的时候可以读取这个 json 文件获取到对应的 双向链接 关系。<br>&emsp;&emsp;但是我自己搭建效果非常原始，而且工作量非常大，有点超过了我预期折腾阈值。</p></blockquote><blockquote><p>&emsp;&emsp;不过好歹自己是实现了这个效果，于是我过年的那段时间就打算将 Houdini 的教程看起来。<br>&emsp;&emsp;然后将教程里面学习到的知识点全部汇总到 HoudiniWiki 网站里面。<br>&emsp;&emsp;也真是因为这个原因，我整个 2 月份都没有了任何博客的产出，因为知识产出的时间都挪到了 HoudiniWiki 的内容输入上。<br>&emsp;&emsp;那段时期看了不少的教程，但是距离我的心愿清单的完成依然是遥遥无期😔️</p></blockquote><blockquote><p>&emsp;&emsp;后来过完年投入工作之后，工作上用不上，于是教程计划又全面搁置了。<br>&emsp;&emsp;所以根据工作的需要我从 3 月份开始又恢复了一定程度的 博客 更新<em>(:з」∠)</em></p></blockquote><h3 id="三月份-Notion-amp-Wolai"><a href="#三月份-Notion-amp-Wolai" class="headerlink" title="三月份 Notion &amp; Wolai"></a>三月份 Notion &amp; Wolai</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/notion.jpg" alt="alt"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/wolai.jpg" alt="alt"></p><blockquote><p>&emsp;&emsp;中间三月份的时候看了个 B站 视频，安利了 Notion 这框 All in one 强大的在线编辑 App<br>&emsp;&emsp;其实我还真挺喜欢的，但是 <a href="https://www.notion.so/" target="_blank" rel="noopener">Notion</a> 不能完美兼容 Markdown 语法，以及它的服务器在国外，当时体验 Notion 的手机 App 那真的是体验太差，太过劝退了。<br>&emsp;&emsp;基于这些原因，我又去国内搜索了类似的软件，然后找到了 <a href="https://www.wolai.com/" target="_blank" rel="noopener">wolai</a><br>&emsp;&emsp;wolai 本土化更好，而且支持双向链接的图谱显示，在我看来都是非常 nice 的功能。<br>&emsp;&emsp;于是我也体验了 wolai 一段时间，当时个人可使用的 block 数是有限，让我有种块数不够用的危机感。如今个人的 blocks 也和 Notion 无限使用了。<br>&emsp;&emsp;只是 wolai 目前为止还没有支持 Notion 的数据库功能，无法给文章添加自定义的描述字段，进行过滤提取。<br>&emsp;&emsp;于是就一直陷入了两个头疼的死循环里面，最后干脆两个都放弃 了<em>(:з」∠)</em></p></blockquote><h3 id="四月份-最后的高产"><a href="#四月份-最后的高产" class="headerlink" title="四月份 最后的高产"></a>四月份 最后的高产</h3><blockquote><p>&emsp;&emsp;四月份清明的时候还做了很多有意义的开发，比如开发了 Qt 的 <a href="https://blog.l0v0.com/posts/1ba28015.html">overlay</a> 功能<br>&emsp;&emsp;解决了 Qt Designer 开发一个很痛的痛点。<br>&emsp;&emsp;同时还输出了很多篇 Unreal 的文章作为自己的研究记录。 <a href="https://blog.l0v0.com/posts/8ea189bd.html">子进程监听</a> <a href="https://blog.l0v0.com/posts/2b15ceb.html">UMG 界面</a><br>&emsp;&emsp;然而 4月份的高产可谓是 我最后的波纹 了<em>(:з」∠)</em></p></blockquote><h3 id="五月份-颓废躺平"><a href="#五月份-颓废躺平" class="headerlink" title="五月份 颓废躺平"></a>五月份 颓废躺平</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/3dm.jpg" alt="alt"></p><blockquote><p>&emsp;&emsp;然而到了 5 月份之后，自从五一放假期间下载了 <code>重生细胞</code> 这个游戏到手机里面之后<br>&emsp;&emsp;简直就打开了潘多拉魔盒，这个期间又下了很多款 app 游戏把 5 月份的时间都挥霍掉了<em>(:з」∠)</em><br>&emsp;&emsp;当然玩游戏还是挺有趣的比如 又下载了 <code>月圆之夜</code> 重温， 还有些 Google Store 上的小游戏。<br>&emsp;&emsp;后来手机玩还不够，干脆在电脑上也装游戏了，于是又去 3DM 那里下载了很多游戏╮(╯_╰)╭<br>&emsp;&emsp;这个过程下载了好多好多的游戏，比如 </p><ul><li><a href="https://www.3dmgame.com/games/teamfightmanager/" target="_blank" rel="noopener">团战经理</a> </li><li><a href="https://www.3dmgame.com/games/galaxyopp/" target="_blank" rel="noopener">银河笔与纸</a> </li><li><a href="https://dl.3dmgame.com/pc/130296.html" target="_blank" rel="noopener">魔王大人，击退勇者吧</a> </li><li><a href="https://dl.3dmgame.com/pc/55482.html" target="_blank" rel="noopener">暗黑地牢</a> </li><li><a href="https://dl.3dmgame.com/pc/130296.html" target="_blank" rel="noopener">竞速80年代</a><br>&emsp;&emsp;我居然还花了不少时间把 <code>竞速80年代</code> 这个像素游戏给打通了<em>(:з」∠)</em><br>&emsp;&emsp;后来还下载了最新的 <a href="https://dl.3dmgame.com/pc/128552.html" target="_blank" rel="noopener">极品飞车21:热度</a> 体验了几把赛车<br>&emsp;&emsp;那段时间实在是太过颓废了，主要也是受了一些刺激，失去了学习的动力😪️ </li></ul></blockquote><h2 id="下半年折腾回顾"><a href="#下半年折腾回顾" class="headerlink" title="下半年折腾回顾"></a>下半年折腾回顾</h2><h3 id="六月份"><a href="#六月份" class="headerlink" title="六月份"></a>六月份</h3><blockquote><p>&emsp;&emsp;到了 6月份，痛定思痛，于是一次过把之前有的没的全部都删掉了。<br>&emsp;&emsp;然后我打算开始静下心来看教程，尝试一下学习 OpenGL 学习 shader 编程<br>&emsp;&emsp;看着看着又开始挂念起了之前做的 <code>HoudiniWiki</code> 网站<br>&emsp;&emsp;打算也做一个 shader 版本用来做知识的整理和连接。自然而然就整了一个 ShaderWiki 网站<br>&emsp;&emsp;基本上就是套一下之前弄好了，还重新搞了一遍 github ci 支持我自动部署到服务器的对应域名。</p></blockquote><blockquote><p>&emsp;&emsp;在这个过程我想起之前有找打一个 博客 用 Notion 做的，里面有很多 vfx 和 unreal 相关的记录<br>&emsp;&emsp;做的让我非常印象深刻，但是我似乎忘记把它的链接给保存起来了。<br>&emsp;&emsp;现在网上死活找不到它相关的身影，于是结合 notion 和 blog 几个关键字搜索没想到却意外搜索到了 <code>obsidian</code></p></blockquote><p>(后来找到了这个 Notion 博客，在这里推荐一下 <a href="https://mycgdoc.com/" target="_blank" rel="noopener">https://mycgdoc.com/</a>)</p><blockquote><p>&emsp;&emsp;从此打开了新世界的大门。</p></blockquote><h4 id="Obsidian"><a href="#Obsidian" class="headerlink" title="Obsidian"></a>Obsidian</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/obsidian.jpg" alt="alt"></p><blockquote><p>&emsp;&emsp;<a href="https://www.bilibili.com/video/BV1jB4y1c7p2" target="_blank" rel="noopener">简睿软体频道 obsidian教程</a> B站上面有相当全面的教程展示了 <code>obsidian</code> 这个软件可以做到的不同功能。<br>&emsp;&emsp;于是我就开始为这个软件着痴迷，用了我非常多的时间进行研究和学习。<br>&emsp;&emsp;<code>obsidian</code> 最为人所知的就是提供了 <code>[[wiki link]]</code> 双向连接以及知识图谱的功能。<br>&emsp;&emsp;并且它支持自定义插件的开发，可以实现类似 <code>VScode</code> 一样的社区插件生态。<br>&emsp;&emsp;我花了很长的时间去看上面的 Obsidian 的教程，将各种功能都摸了一遍。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/01.png" alt="alt"></p><blockquote><p>&emsp;&emsp;当时看到 <code>Obsidian</code> 有开放第三方插件,用了不少时间去研究<br>&emsp;&emsp;感觉 <code>Obsidian</code> 不错，但是还是希望能够在 <code>VScode</code> 的生态下写文章<br>&emsp;&emsp;毕竟我写博客这么久了，都是在 <code>VScode</code> 里面写的。<br>&emsp;&emsp;如今又要我加多一个差不多的写作工具同时也没有带来太大的差异，让我感到非常的难受。</p></blockquote><blockquote><p>&emsp;&emsp;另外 <code>Obsidian</code> 让我最用不惯的地方就是没有命令行集成，导致需要外部进行 Git 命令 push 和 pull<br>&emsp;&emsp;如果两个工具可以合二为一那就无比完美了，然而现实却是各自搞自己的生态，导致了极致的割裂。<br>&emsp;&emsp;后来在在乎看 <code>Obsiidian</code> 的文章的时候，非常偶然地在评论里面别人推荐了 <code>VScode</code> 的 <code>Dendron</code> 插件<br>&emsp;&emsp;于是新世界的大门又开了。</p></blockquote><h4 id="Dendron"><a href="#Dendron" class="headerlink" title="Dendron"></a>Dendron</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/dendron.jpg" alt="alt"></p><p><a href="https://github.com/dendronhq/dendron" target="_blank" rel="noopener">https://github.com/dendronhq/dendron</a></p><blockquote><p>&emsp;&emsp;Dendron 是在 VScode 实现双链笔记的插件，实际上实现这个功能不只是 Dendron 还有 <a href="https://marketplace.visualstudio.com/items?itemName=kortina.vscode-markdown-notes" target="_blank" rel="noopener">Markdown Notes</a> <a href="https://marketplace.visualstudio.com/items?itemName=foam.foam-vscode" target="_blank" rel="noopener">Foam</a> 等插件。<br>&emsp;&emsp;Dendron 是做得最硬核的，它提供了 npm 命令行工具可以将自己的笔记生成对应的网站，并且支持文章引用嵌入。<br>&emsp;&emsp;Dendron 的作者推荐用扁平的目录结构来管理笔记，有点过于硬核。<br>&emsp;&emsp;作者推荐不使用文件夹，而是在文件上用 <code>.</code> 进行区分，当作文件夹使用，这样文件夹也有文件信息进行描述。 <a href="https://wiki.dendron.so/notes/4bb85c39-d8ac-48ad-a765-3f2a071f7bc9.html" target="_blank" rel="noopener">说明</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">|-- cli.tar.md</span><br><span class="line">|-- cli.tar.env.md</span><br><span class="line">|-- cli.curl.md</span><br><span class="line">|-- cli.dig.md</span><br><span class="line"></span><br><span class="line">文件目录</span><br><span class="line">|-- cli</span><br><span class="line">    |-- dig</span><br><span class="line">    |-- curl</span><br><span class="line">    |-- tar</span><br><span class="line">        |-- env</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这样做的好处是可以通过搜索，快速找到命名相近的功能, 利用 <code>cli.*.env</code> 之类的的通配符匹配。<br>&emsp;&emsp;偏平结构也方便程序检索，查找笔记的时候也不用一层层点击去找(特别是目录结构很深的情况)<br>&emsp;&emsp;作者还写了非常长的文章描述自己在 PKM 中查找的困惑 <a href="https://www.kevinslin.com/notes/e1455752-b052-4212-ac6e-cc054659f2bb.html" target="_blank" rel="noopener">链接</a></p></blockquote><blockquote><p>&emsp;&emsp;于是我觉得这个插件可以解决我是用 Obsidian 面临的问题，特别是当时刚更新了基于 WebView 的 日历 等重要功能，<br>&emsp;&emsp;对比其他几个插件， Dendron 显然在功能上更胜一筹。 </p></blockquote><h4 id="P-A-R-A-amp-MOC"><a href="#P-A-R-A-amp-MOC" class="headerlink" title="P.A.R.A &amp; MOC"></a>P.A.R.A &amp; MOC</h4><blockquote><p>&emsp;&emsp;在这个过程中，还有继续在学习 obsidian 大佬们的推荐的笔记思想。<br>&emsp;&emsp;比如 B站 的 <a href="https://space.bilibili.com/452736484" target="_blank" rel="noopener">Struggle_with_me</a> up主<br>&emsp;&emsp;当时看 <a href="https://www.bilibili.com/video/BV1Wp4y1t7dT" target="_blank" rel="noopener">Tour | 一起看看Linan是怎么在Obsidian里记学术笔记和做日程管理的</a> 重复提到了 P.A.R.A 笔记方法。<br>&emsp;&emsp;上面推的 <a href="https://www.bilibili.com/video/BV1jB4y1c7p2" target="_blank" rel="noopener">简睿软体频道 obsidian教程</a> 其实也有提及。<br>&emsp;&emsp;结合 MOC 地图索引可以发挥很强大的功能。</p></blockquote><blockquote><p>&emsp;&emsp;于是我的新世界大门又又打开， P.A.R.A 框架 Tiago Forte 最先推广的一种就有笔记的项目管理系统。<br>&emsp;&emsp;只要是笔记工具都能使用，Tiago 是专门做高效能培训的，也会将自己的效能习惯迁移到新的软件当中，那么 P.A.R.A 框架 都能很好适用不同软件的情况。</p></blockquote><blockquote><p>&emsp;&emsp;毕竟 Tiago 是专门用 印象笔记 的 <a href="https://www.youtube.com/watch?v=BJI6XUISQJI" target="_blank" rel="noopener">链接</a><br>&emsp;&emsp;VScode Dendron 也是毫无疑问适用的 可以去看作者的视频介绍 <a href="https://www.youtube.com/watch?v=vrhBNGMJQwE" target="_blank" rel="noopener">链接</a></p></blockquote><blockquote><p>&emsp;&emsp;P.A.R.A 框架介绍可以看 Tiago 三篇入门文章</p><ul><li><a href="https://fortelabs.co/blog/para/" target="_blank" rel="noopener">https://fortelabs.co/blog/para/</a></li><li><a href="https://fortelabs.co/blog/p-a-r-a-ii-operations-manual/" target="_blank" rel="noopener">https://fortelabs.co/blog/p-a-r-a-ii-operations-manual/</a></li><li><a href="https://fortelabs.co/blog/p-a-r-a-iii-building-an-idea-generator/" target="_blank" rel="noopener">https://fortelabs.co/blog/p-a-r-a-iii-building-an-idea-generator/</a></li></ul></blockquote><blockquote><p>&emsp;&emsp;P.A.R.A 全称是 <code>Project</code> <code>Area</code> <code>Resources</code> <code>Archive</code><br>&emsp;&emsp;四个区域，这里面不仅仅是记笔记，同时也整合了传统的项目管理，并且将内容限制在简单的四个文件夹内，可以更好地梳理内容。</p></blockquote><blockquote><p>&emsp;&emsp;在使用这个方法之前需要明确自己的任务计划。<br>&emsp;&emsp;一个任务计划应该有明确的目标以及时间节点，确保自己可以顺利执行。</p></blockquote><blockquote><p>&emsp;&emsp;至于 Area 则是存放自己感兴趣的东西，没有明确时间节点的内容。<br>&emsp;&emsp;Area 是长线的计划应该讲具体实施放到 Project 当中。</p></blockquote><blockquote><p>&emsp;&emsp;Resources 则存放一些客观的资料，以便以后需要用到方便查找。</p></blockquote><blockquote><p>&emsp;&emsp;Archive 则是将上面那些已经完成的项目归档的目录，用来留作记录用。</p></blockquote><blockquote><p>&emsp;&emsp;以上就是 P.A.R.A 结构的大致用法，其实也可以自己在这个框架的基础上进行扩充。<br>&emsp;&emsp;Tiago 就很喜欢将很多事物放到 Inbox 的容器里面，然后知道有空了再进行进一步的处理。</p></blockquote><hr><blockquote><p>&emsp;&emsp;另外 MOC 导航也是非常有用的东西。<br>&emsp;&emsp;MOC 全程是 Maps of Content ，用来作为网站的地图使用。<br>&emsp;&emsp;使用 MOC 可以在另一个维度快速定位相关的资源。<br>&emsp;&emsp;结合 Tag 分类来定位资源，可以让资源归类更加灵活。</p></blockquote><p><a href="https://www.masterhowtolearn.com/articles/" target="_blank" rel="noopener">https://www.masterhowtolearn.com/articles/</a></p><blockquote><p>&emsp;&emsp;上面就是简单的 MOC 案例。</p></blockquote><p>(不过后来我研究了 Tiddlywiki 之后，我觉得更好地资源归类还是在不同的分类下都有相关内容的副本可以显示，并且一处修改，多出同步，才是最好的解决方案。)</p><h4 id="Anki"><a href="#Anki" class="headerlink" title="Anki"></a>Anki</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/anki.jpg" alt="alt"></p><blockquote><p>&emsp;&emsp;接触 Anki 也是非常意外的事情，最初也是因为 Obsidian 的插件支持 Anki 。<br>&emsp;&emsp;我才知道原来有这么一款开源免费的 间隔重复 学习软件。<br>&emsp;&emsp;Anki 音源来自于 日语 的 <code>暗记</code> 发音。<br>&emsp;&emsp;大概了解了一下，发现和我以前用的 扇贝 背单词有着差不多的用法。<br>&emsp;&emsp;只是 Anki 的好处在于不收单词书的限制，你可以完全自己制卡，而且卡片支持 HTML 语法。<br>&emsp;&emsp;可以制作得非常精美，社区上也有很多免费的 卡组。</p></blockquote><details><br><summary>间隔重复说明</summary><br><br>间隔重复(Spaced Repetition) 就是按照学习遗忘曲线来对知识进行复习，确保知识的牢固程度。<br><br>后来我在 喜马拉雅 学习了 <a href="https://www.ximalaya.com/gerenchengzhang/48231482/" target="_blank" rel="noopener">Anki https://www.masterhowtolearn.com/2019-08-29-3-fatal-reasons-why-you-shouldnt-be-taking-notes-when-studying复习的技术</a><br>间隔重复是一种很好的记忆方法，记忆不等于死记硬背，很多知识不用记，但其实知识不需要死记硬背为，不代表不需要记忆，如果只是记不住那就很难应用,,更别提更进一步学习。<br>死记硬别只是记忆的一种方法，出了间隔重复度实现复习之外，还有联想 数字桩 记忆宫殿 等等记忆方法。<br><br>间隔重复 (Spaced Repetition)  主动回忆 (Active Recall) 混合学习(Interleaving)  这三种方法已经被诸多论文验证，是最高效地学习方法。<br><br><a href="https://youtu.be/UEJmgaFQUH8" target="_blank" rel="noopener">https://youtu.be/UEJmgaFQUH8</a><br><a href="https://www.masterhowtolearn.com/2019-08-29-3-fatal-reasons-why-you-shouldnt-be-taking-notes-when-studying" target="_blank" rel="noopener">https://www.masterhowtolearn.com/2019-08-29-3-fatal-reasons-why-you-shouldnt-be-taking-notes-when-studying</a><br><br></details><blockquote><p>&emsp;&emsp;Anki 最良心的地方在于提供了免费的 同步服务，只有 IOS 端进行收费。<br>&emsp;&emsp;日常学习的 卡组 都可以通过它来实现多端同步。</p></blockquote><blockquote><p>&emsp;&emsp;后来为了更好地了解 Anki ，于是在知乎上看到了 叶峻峣 的文章 <a href="https://www.zhihu.com/people/L.M.Sherlock" target="_blank" rel="noopener">个人主页</a><br>&emsp;&emsp;新世界的大门又又打开了。<br>&emsp;&emsp;他的专栏里面有非常丰富的内容介绍了 认知科学 学习方法 的内容<br>&emsp;&emsp;于是我有在提供的文章里面花了很长的时间去观看，虽然不少文章是翻译，但我受益匪浅。</p></blockquote><blockquote><p>&emsp;&emsp;这个过程中，我认识到间隔重复是一种很好的学习方法 <a href="https://www.zhihu.com/column/c_1371286809159266304" target="_blank" rel="noopener">间隔重复专栏</a><br>&emsp;&emsp;并且还接触到 间隔重复 发明推广人 Woz ，了解到渐进学习这种全新的学习方法 <a href="https://www.zhihu.com/column/c_1308886122672484352" target="_blank" rel="noopener">SuperMemo—渐进学习最前沿！</a></p></blockquote><blockquote><p>&emsp;&emsp;于是我仔细拜读了 <a href="https://zhuanlan.zhihu.com/p/374403541" target="_blank" rel="noopener">渐进学习导读的文章</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/02.gif" alt="alt"></p><blockquote><p>&emsp;&emsp;也因此让我对 SuperMemo 产生了极大地兴趣。</p></blockquote><h4 id="SuperMemo"><a href="#SuperMemo" class="headerlink" title="SuperMemo"></a>SuperMemo</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/supermemo.ico" alt="alt"></p><blockquote><p>&emsp;&emsp;SuperMemo 已经诞生了快有 40 年了，这真的是让我始料未及， <a href="https://supermemo.guru/wiki/Piotr_Wozniak" target="_blank" rel="noopener">Dr.Woz</a> 居然是从 Windows95 就开始更新，不愧是计算机博士毕业的。<br>&emsp;&emsp;不过也因为这样，SuperMemo 的历史包袱非常重。<br>&emsp;&emsp;界面风格各方面堪称复古，并非这么多年了 博士 一个人坚持开发。<br>&emsp;&emsp;封闭的软件生态也着实让人抓狂。<br>&emsp;&emsp;但是看了 叶峻峣 的文章可以知道，Supermemo 用上了更好地 sm18 算法。<br>&emsp;&emsp;支持 优先级队列 渐进学习 等多种更前沿的学习方法，这些都是 Anki 里面没有的。</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/279553703" target="_blank" rel="noopener">在 Anki 制作 2.9 万张卡片，复习 33 万次之后，我转用了 SuperMemo</a></p><blockquote><p>&emsp;&emsp;Anki 的资深用户全方位的分析两款软件的优劣，并且详细回答了 SuperMemo 能够解决的问题。<br>&emsp;&emsp;这进一步激发了我的兴趣，想要直接从 SuperMemo 入手。</p></blockquote><blockquote><p>&emsp;&emsp;SuperMemo 太过复杂了，教程说明都很少，基本上全是 Dr.Woz 写的文章和说明。<br>&emsp;&emsp;后来我在 B 站上搜视频，刚好看到大佬上传了一系列视频介绍他如何结合各种工具在 Mac 上使用 SuperMemo 进行学习的 </p></blockquote><ul><li><a href="https://www.bilibili.com/video/BV12V411476W" target="_blank" rel="noopener">SuperMemo18 基础介绍(一)</a> </li><li><a href="https://www.bilibili.com/video/BV1sv411W7eA" target="_blank" rel="noopener">SuperMemo18 基础介绍(二)</a> </li><li><a href="https://www.bilibili.com/video/BV14b4y1o7f7" target="_blank" rel="noopener">SuperMemo18 基础介绍(三)</a> </li><li><a href="https://www.bilibili.com/video/BV1y54y1G7xD" target="_blank" rel="noopener">SuperMemo18 基础介绍(四)</a> </li><li><a href="https://www.bilibili.com/video/BV1XK4y1u7JH" target="_blank" rel="noopener">SuperMemo18 基础介绍(五)</a> </li></ul><blockquote><p>&emsp;&emsp;后来我还找到了他的知乎，在上面看到了很多视频的文本版 <a href="https://www.zhihu.com/column/c_1301897915820695552" target="_blank" rel="noopener">专栏</a><br>&emsp;&emsp;整一套方案用了非常多折腾的方案，甚至在知乎的文章上看到他用 MPV 播放器用作 渐进视频 学习的。 <a href="https://zhuanlan.zhihu.com/p/366296441" target="_blank" rel="noopener">链接</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/02.gif" alt="alt"></p><blockquote><p>&emsp;&emsp;真的是不得不又奉上上面这张图。<br>&emsp;&emsp;在这里有学习到了一个折腾的自定义播放器 MPV ，可谓是非常地极客，开源可高度自定义配置。<br>&emsp;&emsp;结合脚本可以发挥无穷的威力<br>&emsp;&emsp;只是现在还没有时间深入折腾，我之前找到了国人提供在 Github 上一套完整开箱即用的配置方案。 <a href="https://github.com/hooke007/MPV_lazy" target="_blank" rel="noopener">链接</a><br>&emsp;&emsp;稍微再 windows 电脑上测试了一下，感觉还行，就是用不太惯。<br>&emsp;&emsp;目前还是简单好用 PotPlayer 更加适合我<em>(:з」∠)</em></p></blockquote><hr><blockquote><p>&emsp;&emsp;SuperMemo 实在是太复古太难用了，导入网页居然还用 IE 进行导入。<br>&emsp;&emsp;还不支持 Chrome Edge ，也是够让人抓狂的，只是好在 Github 有提供 SuperMemo 助手。 <a href="https://sma.supermemo.wiki/#/" target="_blank" rel="noopener">官网链接</a><br>&emsp;&emsp;然而蛋疼的是这个软件的下载居然没了。<br>&emsp;&emsp;我在 SuperMemo 的 Q群找到了 老版本 的编译版本。<br>&emsp;&emsp;但是不支持最新版，也让我很不爽。<br>&emsp;&emsp;于是我选择了极致的折腾，自己 clone Github 仓库进行编译。<br>&emsp;&emsp;这玩意还需要我 VS 里面配置 Windows 开发的环境，折腾了好久之后编译出了一堆问题。<br>&emsp;&emsp;然后逐个问题排查解决，当中有不少是插件的锅，其中 PDF 的配置也是很迷。<br>&emsp;&emsp;我也没有搞得很明白，总之修改了部分的代码总算是把新版本的 编译出来<br>&emsp;&emsp;只是部分插件不能用了而已，编译完成只有，我发现这个软件是带有插件库的，可以通过线上插件库把我编译失败的几个插件给下载下来，简直完美。<br>&emsp;&emsp;只可惜折腾这玩意耗费了我大半个周末，然后其实最后也并没有怎么将 SuperMemo 用起来。</p></blockquote><details><br><summary>补充说明</summary><br><br>后来学习了 Anki <a href="https://www.ximalaya.com/gerenchengzhang/48231482/" target="_blank" rel="noopener">复习的技术</a> 之后<br>作者说得很有道理，萌新根本不需要折腾算法的问题，先将 Anki 用好就已经很不错了。<br>等到真正遇到了 Anki 的瓶颈之后再去切换。<br>毕竟 SuperMemo 的使用门槛过高了，如果 Anki 都没有能用好，SuperMemo 就更加不用指望了。<br><br></details><h3 id="七月份-TiddlyWiki"><a href="#七月份-TiddlyWiki" class="headerlink" title="七月份 TiddlyWiki"></a>七月份 TiddlyWiki</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/tiddlywiki.jpg" alt="alt"></p><blockquote><p>&emsp;&emsp;本来我搞 SuperMemo 已经搞得相当累了。<br>&emsp;&emsp;我还很手贱就是喜欢 Anki 能够多端同步，SuperMemo 没有这个功能简直就不是现代软件了。<br>&emsp;&emsp;后来还蹦出了 mpv 进行渐进视频的方案，考虑到我 技术美术 的领域大部分知识其实都离不开视频教程。<br>&emsp;&emsp;所以我打算花费更多时间来折腾，于是就这个东西的折腾就无休止的。<br>&emsp;&emsp;在折腾的过程中我非常偶然找到了这位大佬的博客的文章 <a href="https://fspark.me/archives/Linux-mpv-bilibili-bangumi-you-get.html" target="_blank" rel="noopener">Linux下用mpv在B站看番（二）：you-get</a></p></blockquote><blockquote><p>&emsp;&emsp;毕竟也是个博客，我自己也是写博客的，于是这些地方上充满了好奇，想要认识一下作者是干什么行业的，看看作者过往写过的文章，然后就非常偶然地看到 TiddlyWiki 这篇文章 <a href="https://fspark.me/archives/TiddlyWiki-Deploy-To-Server.html" target="_blank" rel="noopener">TiddlyWiki 折腾记录——云端部署</a></p></blockquote><blockquote><p>&emsp;&emsp;TiddlyWiki 其实挺眼熟的，在认识 Hugo 之前，我有想过要用 Hexo 来搭建一个 Wiki 库。<br>&emsp;&emsp;当时在网上搜索资料找到 v2ex 的文章介绍，那个时候作者就有提过 TiddlyWiki <a href="https://www.v2ex.com/t/347176?p=1" target="_blank" rel="noopener">用 Hexo 做个人 Wiki 知识管理系统</a><br>&emsp;&emsp;当时文章里面介绍了各种 wiki 系统，我当时并没有什么概念。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/02.gif" alt="alt"></p><blockquote><p>&emsp;&emsp;但是作者经过总结还是决定用自己开发的 <a href="https://github.com/zthxxx/hexo-theme-Wikitten" target="_blank" rel="noopener">hexo-theme-Wikitten</a><br>&emsp;&emsp;其实去年的时候有下载过空的 TiddlyWiki 进行查看，但是没明白这个到底是个什么玩意，最主要的是居然不支持 markdown，反而要用什么 wikitext 着实让我受不了，于是没有深入去研究。<br>&emsp;&emsp;但是当我看完这篇文章 <a href="https://fspark.me/archives/TiddlyWiki-Deploy-To-Server.html" target="_blank" rel="noopener">TiddlyWiki 折腾记录——云端部署</a><br>&emsp;&emsp;新世界的大门又又又打开了。</p></blockquote><blockquote><p>&emsp;&emsp;TiddlyWiki 虽然已经问世快 20 年了，但是它的 Quine (自产生程式) 和 SPA (单页web应用) 结合的理念依旧非常超前。<br>&emsp;&emsp;TiddlyWiki 将 Linux 的一切皆文件的理念运用到了浏览器上，它创建了 Tiddler 条目作为最小运行单元。条目可以类比为 Linux 上的文件概念，它既可以是一份笔记，也可以是内核里面的代码。<br>&emsp;&emsp;TiddlyWiki 实现了自己的 boot 之后，会读取内部的 Core Tiddler 条目构建整个 TiddlyWiki 系统环境。<br>&emsp;&emsp;因此 TiddlyWiki 内核代码也是可以用自己进行编辑，修改实现各种自定义。<br>&emsp;&emsp;条目作为最小单元还提供了标签(tag)和字段(field)接口，可以给条目添加自定义字段和标签进行归类和自定义。</p></blockquote><blockquote><p>&emsp;&emsp;关于 TiddlyWiki 更多神奇的功能可以参考 <a href="https://zhuanlan.zhihu.com/p/140473235" target="_blank" rel="noopener">用TiddlyWiki替代Notion和EverNote作为个人知识管理系统</a> 文章<br>&emsp;&emsp;他的功能强大以及它的可扩展性，都让他能够匹敌 Notion 的。</p></blockquote><blockquote><p>&emsp;&emsp;Notion 并没有将编程能力开发给用户，但是胜在界面优化做得很好，个人使用门槛很低，最重要的是个人使用完全免费，结合 Notion 的动态表格，简直是最强生产力。<br>&emsp;&emsp;如今 Notion 也加上了 双链 的功能，如果不追求折腾的话，确实 Notion 才是普通用户的首选。</p></blockquote><blockquote><p>&emsp;&emsp;对比 Notion，TiddlyWiki 将编程能力开放给用户，它支持插件的 拖拽 安装，并且借助 node.js 还能实现更多的自动化操作。<br>&emsp;&emsp;对于像我等喜欢折腾的人来说，可谓是致命的诱惑，毕竟大公司的软件不可能适合所有人，大部分的普通人只能接受别人的设计，无限的妥协。<br>&emsp;&emsp;而 TiddlyWiki 保留了可编程能力，意味着哪里不爽可以完全自己修改，而且 TiddlyWiki 的内核也是完全开放的，几乎所有的地方都是可以自定义的。<br>&emsp;&emsp;即便是官方默认提供的最干净的 TiddlyWiki 也已经提供了很多开放接口来自定义出属于你自己的 TiddlyWiki ，这些开放性的都让我印象深刻。</p></blockquote><blockquote><p>&emsp;&emsp;TiddlyWiki 提供了两种使用模式，一种是基于 Html 单文件的，一种是基于 node.js 的命令行模式。<br>&emsp;&emsp;单文件的方式有诸多好处，一个是易用，便于修改，其次是一切依赖都可以索引自文件本身，这样不受依赖影响，即便过去 100 年，文件依然能够以当时的方式正确呈现。<br>&emsp;&emsp;而依赖管理的方式不在文件外部，而全部通过 js 在文件内部进行管理了，这是一种很好的设计。<br>&emsp;&emsp;Erlang 之父生前力推 TiddlyWiki <a href="https://www.youtube.com/watch?v=Uv1UfLPK7_Q" target="_blank" rel="noopener">视频链接</a> ，通过他的<a href="https://joearms.github.io/#Index" target="_blank" rel="noopener">博客</a>可以知道，他之前别 Github 的 Jykell 博客引擎折腾得不少。<br>&emsp;&emsp;因为 Markdown 语言规范的不统一，而付服务商可能会将旧的规范支持给放弃掉，导致之前写的文章全部显示错误。<br>&emsp;&emsp;所以 Erlang 之父为了解决这个问题寻求 Hugo 等静态网页生成工具，但是最终都没能很好解决他的需求，他甚至想要自己开发一个 静态网站生成工具了，就在这个时候他遇见了 TiddlyWiki ，他知道这个设计就是他想要的东西了。<br>&emsp;&emsp;所以我们才能看到上年的 Youtube 视频 <a href="https://www.youtube.com/watch?v=Uv1UfLPK7_Q" target="_blank" rel="noopener">Joe Armstrong &amp; Jeremy Ruston - Intertwingling the Tiddlywiki with Erlang</a></p></blockquote><blockquote><p>&emsp;&emsp;然而 TiddlyWiki 虽然等到了大佬背书，却依然因为他的使用门槛让大家 望而却步。<br>&emsp;&emsp;一方面浏览器的安全限制导致已经无法直接将 TiddlyWiki 一键保存了，单文件 HTML 在浏览器保存必须依赖相应的插件，导致体验不好。<br>&emsp;&emsp;其次使用 TiddlyWiki 就得学习它所使用 wikitext 语法，而目前国内环境下还没有很好的教程，相较于 Notion 的易用，TiddlyWiki 又进一步增加了使用的门槛。<br>&emsp;&emsp;所以综上所述，如果没有编程背景和一颗爱折腾的心的话，<a href="https://www.notion.so/" target="_blank" rel="noopener">Notion</a> 或者 <a href="https://b3log.org/siyuan/" target="_blank" rel="noopener">思源笔记</a> 才是目前我的推荐，<br>&emsp;&emsp;默认的 TiddlyWiki 太过简陋，然而普通人要去 TiddlyWiki 的论坛上找合适的插件来增强自己的 Wiki 有非常困难 (官方已经推出了 <a href="https://links.tiddlywiki.com/" target="_blank" rel="noopener">插件网站</a> ，只是目前还是草根阶段吧，还不如社区提供的列表 <a href="https://dynalist.io/d/zUP-nIWu2FFoXH-oM7L7d9DM" target="_blank" rel="noopener">Toolmap</a>)<br>&emsp;&emsp;经过我的搜集，还是有人有一些中文的说明 wiki (只是确实也是少得可怜)</p></blockquote><ul><li>中文教程<ul><li><a href="https://keatonlao.github.io/tiddlywiki-xp/" target="_blank" rel="noopener">TiddlyWiki XP — 一份 TiddlyWiki 使用教程</a> </li><li><a href="https://bramchen.github.io/tw5-docs/zh-Hans/" target="_blank" rel="noopener">TiddlyWiki 舞 — 基础文档简体中文版</a></li></ul></li><li>英文教程<ul><li><a href="https://tiddlywiki.com/" target="_blank" rel="noopener">TiddlyWiki 官网</a></li><li><a href="https://groktiddlywiki.com/read/" target="_blank" rel="noopener"><strong>Grok TiddlyWiki</strong></a> -&gt; 强烈推荐</li></ul></li></ul><blockquote><p>&emsp;&emsp;鉴于上面的种种原因，我以后会专门开一个新坑介绍 TiddlyWiki - <a href="/categories/Wiki/TiddlyWiki-%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/">TiddlyWiki 食用指南</a><br>&emsp;&emsp;也算是为 TiddlyWiki 社区尽自己一份绵薄之力了。</p></blockquote><h3 id="八月份"><a href="#八月份" class="headerlink" title="八月份"></a>八月份</h3><h4 id="笔记软件对比"><a href="#笔记软件对比" class="headerlink" title="笔记软件对比"></a>笔记软件对比</h4><blockquote><p>&emsp;&emsp;经过上面一番折腾，我又发现了新的大陆，如果对标 Notion 的话，国内有 Wolai ，之前也有试用过了。<br>&emsp;&emsp;但是提到双链笔记，那可是自从 RoamResearch 出现之后一直在笔记软件里面大火的概念。<br>&emsp;&emsp;同类型的软件也如雨后春笋般涌现，于是我又花了一些时间去收集和了解这些软件。</p></blockquote><ul><li>传统笔记软件<ul><li><a href="https://www.yinxiang.com/" target="_blank" rel="noopener">EverNote</a></li><li><a href="https://www.onenote.com/signin?wdorigin=ondc" target="_blank" rel="noopener">OneNote</a></li><li><a href="https://note.youdao.com/" target="_blank" rel="noopener">有道云笔记</a></li></ul></li><li>双链大纲<ul><li><a href="https://roamresearch.com/" target="_blank" rel="noopener">RoamResearch</a></li><li><a href="https://www.hulunote.com/app" target="_blank" rel="noopener">葫芦笔记</a></li><li><a href="https://roamedit.com/sp/" target="_blank" rel="noopener">RoamEdit</a></li><li><a href="https://logseq.com/" target="_blank" rel="noopener">Logseq</a> (RoamResearch 本地版)</li><li><a href="https://www.remnote.io/" target="_blank" rel="noopener">RemNote</a> (间隔重复)</li><li><a href="https://mubu.com/app" target="_blank" rel="noopener">幕布</a></li></ul></li><li>双链笔记<ul><li><a href="https://obsidian.md/" target="_blank" rel="noopener">obsidian</a></li><li>VScode <a href="https://marketplace.visualstudio.com/items?itemName=dendron.dendron" target="_blank" rel="noopener">Dendron</a> / <a href="https://marketplace.visualstudio.com/items?itemName=foam.foam-vscode" target="_blank" rel="noopener">Foam</a> / <a href="https://github.com/kortina/vscode-markdown-notes" target="_blank" rel="noopener">Markdown Notes</a></li></ul></li><li>All In One<ul><li><a href="https://www.notion.so/" target="_blank" rel="noopener">Notion</a> / <a href="https://www.wolai.com/" target="_blank" rel="noopener">Wolai</a></li><li><a href="https://b3log.org/siyuan/" target="_blank" rel="noopener">思源笔记</a> (Notion 本地版)</li><li><a href="https://tiddlywiki.com/" target="_blank" rel="noopener">TiddlyWiki</a></li></ul></li></ul><blockquote><p>&emsp;&emsp;以上是我收集到的最近大众用得比较多的软件，更多的知识管理工具对比可以参照这个网站 <a href="https://hintsnet.com/pimgeek/km-tools/" target="_blank" rel="noopener">知识管理工具特性对比</a><br>&emsp;&emsp;我并没有将上面的软件都体验，实在是没有那么多时间和经历再进行对比了，我就上面的摸索历程感觉就已经够折腾的了。<br>&emsp;&emsp;其实从上面的文章长度来看就已经很明确，我最终决定选择最折腾的 <code>TiddlyWiki</code><br>&emsp;&emsp;尽管是够折腾的，但是从长远来看我觉得是值得的。</p></blockquote><hr><blockquote><p>&emsp;&emsp;经过这么一番的比较之后，是时候来介绍说明一下我所了解到的 <code>数字笔记</code> 的变革了。<br>&emsp;&emsp;早期的笔记软件其实比较简陋，真正能够用来写笔记的软件大都是编辑器 或者是 word 文档<br>&emsp;&emsp;网页端的编辑体验也比较差，早期比较流行的有所见即所得的编辑器，比如我刚学前端的时候接触到百度出品的  <a href="https://fex.baidu.com/ueditor/" target="_blank" rel="noopener">UEditor</a><br>&emsp;&emsp;随着 2010 年之后的移动端兴起。<br>&emsp;&emsp;以剪藏为代表的的 <code>EverNote</code> <code>OneNote</code> 逐步起飞 ，成为新的移动端笔记软件的霸主。<br>&emsp;&emsp;随后到 16 年左右 随着 MarkDown 的普及下方，有道云笔记 等一系列 以 Markdown 为核心体验 App 软件逐渐出现。</p></blockquote><blockquote><p>&emsp;&emsp;<a href="https://www.youtube.com/watch?v=_x54XJrECvk&amp;t=4s&amp;ab_channel=LinkingYourThinking" target="_blank" rel="noopener">https://www.youtube.com/watch?v=_x54XJrECvk&amp;t=4s&amp;ab_channel=LinkingYourThinking</a><br>&emsp;&emsp;传统笔记重在收集记录，但是缺少笔记的学习，最后只会把笔记本变成垃圾堆<br>&emsp;&emsp;NoteTaking 笔记系统比起 大纲笔记能够承载更多的信息</p></blockquote><blockquote><p>&emsp;&emsp;在这之后出现了两个标志性软件 <code>Notion</code> 和 <code>RoamResearch</code><br>&emsp;&emsp;Notion 引入了块的概念，让网站构建如同搭建积木的一样简单方便。<br>&emsp;&emsp;而 <code>RoamResearch</code> 则引入 双向链接 以及对卢曼 Zettelkasten 卡片盒方法的宣传，引来一波大热。</p></blockquote><blockquote><p>&emsp;&emsp;由于这些笔记形态都是从国外开发的，所以对中国市场的支持还有所欠缺。<br>&emsp;&emsp;国内不少公司看到这篇领域的空白，纷纷仿照上面的方案推出国内平台。<br>&emsp;&emsp;诸如 <code>RoamEdit</code> <code>葫芦笔记</code> 都或多或少有 <code>RoamResearch</code> 的影子，而 <code>wolai</code> 也是经常被人诟病抄袭 <code>Notion</code><br>&emsp;&emsp;尽管国内公司缺少革新能力，但是本土化和微创新还是可以支持的，无论是 微博 还是 微信 都需要更多包容才能逐渐做起来。<br>&emsp;&emsp;如果这些公司能够提供更好地服务，让我支持也是无妨的，只是本土化的革新软件如果能多点就更好了。</p></blockquote><blockquote><p>&emsp;&emsp;在这个基础上，因为上述的服务基于云端，于是出现了开源社区，希望构建离线笔记来确保数据安全。<br>&emsp;&emsp;<code>Obsidian</code> <code>Logseq</code> <code>思源笔记</code>  就是比较有代表性的软件。<br>&emsp;&emsp;<code>Obsidian</code> 更像 <code>VScode</code> 或 <code>Typora</code> 的双链笔记版本，编写体验更贴近纯文本。<br>&emsp;&emsp;<code>Logseq</code> 则是对标 <code>RoamReserach</code> 的双链大纲形式<br>&emsp;&emsp;<code>思源笔记</code> 则是对标 <code>Notion</code> 的块编辑方式。</p></blockquote><blockquote><p>&emsp;&emsp;而 <code>TiddlyWiki</code> 是当中最为特立独行的存在，技术方案，问世时间都让人猜不出来，缺点就是太折腾了，大部人并不喜欢使用。</p></blockquote><hr><h4 id="笔记软件个人推荐"><a href="#笔记软件个人推荐" class="headerlink" title="笔记软件个人推荐"></a>笔记软件个人推荐</h4><blockquote><p>&emsp;&emsp;上面提到的笔记软件里面，我个人不喜欢需要云端同步的黑箱软件，毕竟数据交到厂商手里，如果哪天数据出问题了，我就血崩了。<br>&emsp;&emsp;当然数据交给厂商同步，也可以相对方便实现多端同步，我现在主力用的 滴答清单 其实就是其中之一，只是 知识笔记的管理 我个人还是倾向自己保管，就像我的 Hexo 博客一样，我可以利用 Github 来实现多端同步。</p></blockquote><blockquote><p>&emsp;&emsp;基于上述原因，<code>Notion</code> <code>RoadResearch</code> 等软件我都不再推荐了。<br>&emsp;&emsp;<code>RemNote</code> <code>Logseq</code> <code>思源笔记</code> <code>Obsidian</code> 都支持不错的本地化。</p></blockquote><blockquote><p>&emsp;&emsp;<code>RemNote</code> 类似 <code>RoamResearch</code> 的大纲双链，有内置的间隔重复算法，部分进阶功能需要收费，我个人推荐学生党，只是目前国内缺少中文支持。 (间隔重复算法可以用 Anki 替代，只是存在一定的割裂)<br>&emsp;&emsp;<code>Logseq</code> 仿 <code>RoamResearch</code> 的开源免费版，并且内置 query 语法用来提取相关内容的笔记，也是非常强大好用，做学术推荐。<br>&emsp;&emsp;<code>思源笔记</code> 仿 <code>Notion</code> 进行块化编辑，同样开源免费，我在知乎上看到早期版本 BUG 很多，不过我之前下载体验感觉已经很不错了，毕竟是两个人的小团队，开源软件早期几乎是用爱发电，宣传也是全靠自来水，值得支持。<br>&emsp;&emsp;<code>Obsidian</code> 纯笔记软件，编辑体验更类似于 <code>VScode</code> (和 <code>Notion</code> 的块状编辑区别很大)。借助插件生态系统，逐步起飞，通过插件既可以实现查询还能支持很多额外的功能，最重要的是付费支持将自己的文章发布成网站。</p></blockquote><blockquote><p>&emsp;&emsp;上面四款软件中 <code>RemNote</code> 和 <code>Obsidian</code> 推出了手机 App ，缺点是需要去谷歌商店才能下载到。</p></blockquote><blockquote><p>&emsp;&emsp;对于小白用户，上面四款都是推荐上手的，毕竟萝卜青菜而有所好，上面就是囊括了几种典型好用的笔记形态。<br>&emsp;&emsp;<code>Logseq</code> 和 <code>思源笔记</code> 是纯 PC 本地，而 <code>RemNote</code> 和 <code>Obsidian</code> 在移动端更进一步。<br>&emsp;&emsp;如果喜欢块状编辑可以去尝试 Notion ，结合数据库功能的体验确实是数一数二的，但是国内体验不够好，wolai 目前的功能还和 Notion 有些许差距，在中文环境下做了不少细节的优化，但是核心功能依旧缺席，期待以后能够更进一步。</p></blockquote><hr><blockquote><p>&emsp;&emsp;回到我目前使用的 <code>TiddlyWiki</code> ，我真心不推荐小白使用，不过愿意折腾的话，确实不用花钱也能体验上述的所有功能。<br>&emsp;&emsp;借助 <code>TiddlyWiki</code> 的插件生态可以实现 大纲效果 参考 <a href="https://postkevone.github.io/TiddlyResearch/" target="_blank" rel="noopener">TiddlyResearch</a><br>&emsp;&emsp;query 查询可以借助 wikitext 来实现，甚至还能自定义 UI 组件。<br>&emsp;&emsp;动态数据库实现也完全不在话下，参考 <a href="https://zettelkasten.sorenbjornstad.com/" target="_blank" rel="noopener">zettelkasten</a> ，大部分文章都有 backlink 和 link 进行溯源，还有 TiddlyGraph 显示关联层级的文章。<br>&emsp;&emsp;甚至于脑图效果，双向连接也能通过 TiddlyMap 来实现，参考 <a href="https://tiddlyroam.org/" target="_blank" rel="noopener">tiddlyroam</a><br>&emsp;&emsp;确实 <code>TiddlyWiki</code> 能够实现上面软件提到的功能，但是社区的产品都是相互独立的，没有人将这些很好的功能进行整合，并且各个版本之前的功能有各种各样的瑕疵，使用体验还有待进步。<br>&emsp;&emsp;这就是目前 <code>TiddlyWiki</code> 的大问题，尽管他很好，但是路还很长。</p></blockquote><blockquote><p>&emsp;&emsp;<code>TiddlyWiki</code> 能否在移动端使用，答案是不言而喻，毕竟他本身就是一个 HTML ，只要有浏览器的地方就能更新。<br>&emsp;&emsp;只是同步起来是相当痛苦。<br>&emsp;&emsp;如果想要移动端的 <code>TiddlyWiki</code> 有个更好的体验，就需要用 node.js 版本将 wiki 文件拆分成多个文件，并且通过 git 来进行版本管理。<br>&emsp;&emsp;node.js 可以实时将修改存储到本地，使用体验会更上一层楼。<br>&emsp;&emsp;但是 Android 平台能够有 PC 的 VScode 来同步 Git 部署 npm ，启动 <code>TiddlyWiki</code> 吗？<br>&emsp;&emsp;看似很困难，其实借助神器，可以抚平所有的痛苦。<br>&emsp;&emsp;只需要在安卓商店上安装 Aid Learning 这款 App ，启动之后就会给你配置好一个 带 VScode 的 Linux 系统。(这个神器本来是针对 AI 学习开发的，有了 Linux 和图形环境加持，能做的事情可就多得很了，什么是生产力，这就是生产力)<br>&emsp;&emsp;启动命令行内置 npm ，只需要安装 <code>TiddlyWiki</code> 库，然后配置 ssh 从 Github 拉取自己的 wiki 仓库，就可以在 安卓 手机或者平板上 修改自己的 TiddlyWiki 了。<br>&emsp;&emsp;缺点就是这个用法相当耗电，鉴于能够切实提升生产力，还要什么自行车。</p></blockquote><blockquote><p>&emsp;&emsp;经过我的一番讲解，<code>TiddlyWiki</code> 确实是神器，各种好功能都有社区大神实现，即便没有也可以自己动手。但是 TiddlyWiki 缺少商业公司运营来提升使用体验，社区的插件互相独立，导致体验非常割裂。<br>&emsp;&emsp;社区的活跃程度也不太够，<code>TiddlyWiki</code> 的使用门槛将大部分普通用户劝退了。<br>&emsp;&emsp;目前我自己的 <code>TiddlyWiki</code> 的了解也比较肤浅，需要大量前端知识来升级。</p></blockquote><h4 id="Rime-小狼毫输入法"><a href="#Rime-小狼毫输入法" class="headerlink" title="Rime 小狼毫输入法"></a>Rime 小狼毫输入法</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/rime.svg" alt="alt"></p><blockquote><p>&emsp;&emsp;你觉得前面已经够折腾了，其实还有更加折腾的。<br>&emsp;&emsp;在使用 <code>TiddlyWiki</code> 的过程中，我发现输入颜文字表情会很麻烦，我想要有类似 <code>VScode</code> 插件 emoji 一样的输入体验 <a href="https://marketplace.visualstudio.com/items?itemName=bierner.emojisense" target="_blank" rel="noopener">插件</a> 经过我的长时间折腾之后。想要在 <code>TiddlyWiki</code> 实现比较困难，考虑到这些输入不只是 <code>TiddlyWiki</code> 需要用到的，我完全可以实现一种全局支持的表情方案。<br>&emsp;&emsp;于是我想到了输入法，有没有可能让输入法玩出更多的花样出来。<br>&emsp;&emsp;我到知乎搜索，才学习到原来有 小狼毫 这款自定义输入的输入法神器。</p></blockquote><blockquote><p>&emsp;&emsp;小狼毫输入法的最大特点是开源免费，而且不会别收集用户隐私数据，配置非常灵活。 <a href="https://github.com/rime/weasel" target="_blank" rel="noopener">Github</a><br>&emsp;&emsp;缺点也非常明显，那就是足够折腾，词库需要自己配置，没有云端智能提示。<br>&emsp;&emsp;但是它开放性就像 <code>TiddlyWiki</code> 一样，哪里不爽都可以自定义。</p></blockquote><blockquote><p>&emsp;&emsp;经过我的折腾可以让它支持自定义的表情输入，也可以输入颜文字。<br>&emsp;&emsp;但是使用总会有些许不舒服的地方，比如输入某个词要找很久，打名字没有智能识别。<br>&emsp;&emsp;这中间的小体验需要我费尽周折，实在是让我越用越不爽。</p></blockquote><blockquote><p>&emsp;&emsp;所以最后我还是用回了 搜狗输入法 ，并不是小狼毫的问题是我的问题。<br>&emsp;&emsp;快捷短语输入等等简单的功能也可以利用 <code>Anki</code> 来解决，但是折腾 小狼毫 让我觉得有点得不偿失。<br>&emsp;&emsp;如果以后有机会把 <code>mpv</code> 给用明白了，或者就能来抽空研究一下 小狼毫 应该怎么用。</p></blockquote><h4 id="Anki复习的技术"><a href="#Anki复习的技术" class="headerlink" title="Anki复习的技术"></a>Anki复习的技术</h4><blockquote><p>&emsp;&emsp;在折腾上面一系列问题的时候，间歇性的会觉得 SuperMemo 引入的渐进学习方案挺不错的。<br>&emsp;&emsp;但是无奈 SuperMemo 的界面和使用各方面都让我感到很劝退，即便已经找到了 <a href="https://www.supermemo.wiki/en/home" target="_blank" rel="noopener">SuperMemo.wiki</a> 这些不错的教程，还是觉得 Anki 这个软件更加适合萌新的我。<br>&emsp;&emsp;于是我开始找 Anki 相关的教程， B 站上的视频教程给我感觉一般般。<br>&emsp;&emsp;刚好有天晚上在用 喜马拉雅 听说，于是我就带着好奇心去找找 喜马拉雅 平台 有没有讲关于 Anki 如何使用的教程。<br>&emsp;&emsp;睡前听听也是挺好的。</p></blockquote><blockquote><p>&emsp;&emsp;这么一搜索，发现比较靠谱的也就第一个音频 <code>Anki复习的技术</code> <a href="https://www.ximalaya.com/gerenchengzhang/48231482/" target="_blank" rel="noopener">桌面端视频链接</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/afa065b7/anki_lesson.webp" alt="alt"></p><blockquote><p>&emsp;&emsp;雷欧老师就是学习骇客本人了，这套音频是带视频版本的，只是视频是收费的，可以在淘宝上付费购买。 <a href="https://xuexihaike.taobao.com/" target="_blank" rel="noopener">淘宝链接</a><br>&emsp;&emsp;音频可以白嫖学习， 音频里相关的讲义资料也是全部免费提供 <a href="https://support.qq.com/products/314107/" target="_blank" rel="noopener">链接</a> ，真的很良心了。</p></blockquote><blockquote><p>&emsp;&emsp;雷欧 做 Anki 教程已经做到第四期了，中间积累了无数的知识，包括很多书籍的理论支持，我听音频都觉得很专业。<br>&emsp;&emsp;其中理论篇很值得大家去听一听 学习学习 。</p></blockquote><blockquote><p>&emsp;&emsp;<strong>工欲善其事必先利器，器欲尽其能必先得其法。</strong><br>&emsp;&emsp;很多人只知道前半句，所以会在软件的选择上各种纠结，其实后半句也很重要，你需要有系统的理论知识，你才能把工具用好，否则选的工具再称手也无济于事。<br>&emsp;&emsp;理论篇的内容已经是 雷欧 经历多次授课和知识储备留下的精华部分，我推荐大家都好好听一下，下面是我对其中内容重点的进一步提炼。</p></blockquote><ol><li>专注模式 &amp; 发散模式</li><li>长期记忆 &amp; 工作记忆</li><li>知识需要记忆</li><li>学习闭环</li><li>穿插学习</li></ol><h5 id="专注模式-amp-发散模式"><a href="#专注模式-amp-发散模式" class="headerlink" title="专注模式 &amp; 发散模式"></a>专注模式 &amp; 发散模式</h5><blockquote><p>&emsp;&emsp;这两个模式来源于 学习之道 这本书，我最近也在听。<br>&emsp;&emsp;专注模式可以高效完成你目标明确的任务，典型的例子就是时间管理里面的 番茄钟。<br>&emsp;&emsp;番茄钟通用的定义是 专注工作 25 分钟，然后休息 5 分钟。要求在专注的过程不能被别的东西打扰，注意力集中在重要的事情上。<br>&emsp;&emsp;发散模式通常是不经意间的灵光一闪。典型的例子就是 洗澡、度假的时候突然把事情想明白了。</p></blockquote><blockquote><p>&emsp;&emsp;这两个模式是相辅相成的，都需要充分利用好，可以发挥无穷的力量。<br>&emsp;&emsp;知识是需要储备的，通过专注模式可以快速完成知识的摄入部分。<br>&emsp;&emsp;但是摄入的信息需要消化理解，这个过程可能在自己没有意识到的时候就开始进行了。<br>&emsp;&emsp;需要有专注模式的摄入为前提，才能有发散模式的灵光咋现。<br>&emsp;&emsp;有时候用专注模式死磕某些知识反而会一直卡在死胡同里面，这时候利用番茄钟的 5 分钟休息，反而可以把事情想得更加明白。</p></blockquote><h5 id="长期记忆-amp-工作记忆"><a href="#长期记忆-amp-工作记忆" class="headerlink" title="长期记忆 &amp; 工作记忆"></a>长期记忆 &amp; 工作记忆</h5><blockquote><p>&emsp;&emsp;长期记忆就基本属于自己的知识储备了，在需要的时候可以快速回想起来。<br>&emsp;&emsp;而工作记忆是最常见的短期记忆，基本上都会稍纵即逝，因此一旦有什么灵感已经要第一时间记录下来，否则可能就想不起来了。<br>&emsp;&emsp;工作记忆承载了我们日常生活的方方面面，而长期记忆会将短期记忆经常咀嚼消化重要的东西留下来。<br>&emsp;&emsp;类比于当年电脑就是 长期记忆就是硬盘 工作记忆就是内存。<br>&emsp;&emsp;将数据存入到硬盘里面才不会丢失，只是扩充自己的长期记忆是相当困难的。</p></blockquote><h5 id="知识需要记忆"><a href="#知识需要记忆" class="headerlink" title="知识需要记忆"></a>知识需要记忆</h5><blockquote><p>&emsp;&emsp;以前在学校的时候，很多师兄师姐或者老师都会说这个知识点不用背。<br>&emsp;&emsp;那么不用背是否就意味着这个知识点不重要需要记忆了呢？<br>&emsp;&emsp;当然不是的，知识是需要掌握并且记住的，否则需要用到的时候就用不起来了。(当然如果非考试环境也可以利用搜素引擎来辅助记忆)</p></blockquote><blockquote><p>&emsp;&emsp;但是很多人会混淆了，觉得记住某些知识就是要背诵才可以的。<br>&emsp;&emsp;其实背诵只是记忆的其中一种方法，要记住某件东西，完全可以用更加高效且适合的方法来完成。<br>&emsp;&emsp;比如传说中的记忆宫殿就是将需要记忆的内容映射到自己熟悉的意像中，人类对图像的记忆比起文字的记忆要好得多。<br>&emsp;&emsp;从而可以更好地记住一些无意义的信息。<br>&emsp;&emsp;比如圆周率或者电话号码都是无意义的一串数字，要记住它可以运用数字桩的方式，将每个数字绑定到自己熟悉的意像中，然后用这些意像在脑海中构建段视频，生动的视频很容易记住，从而可以反推出那一段数字是什么。</p></blockquote><blockquote><p>&emsp;&emsp;所以这里需要明确，知识都是需要记忆的，但是记忆有很多方法。<br>&emsp;&emsp;那么经过科学验证过的，对于学习知识最好的记忆方法就是 间隔重复。<br>&emsp;&emsp;间隔重复就是根据遗忘曲线间隔复习知识点，在知识快要被遗忘的时候进行巩固，可以极大提高知识的留存率，有助于将短期记忆转换为长期记忆。</p></blockquote><h5 id="学习闭环"><a href="#学习闭环" class="headerlink" title="学习闭环"></a>学习闭环</h5><blockquote><p>&emsp;&emsp;雷欧 老师总结了学习闭环的四个阶段</p></blockquote><ul><li>学习 </li><li>思考 </li><li>记录 </li><li>复习 </li></ul><blockquote><p>&emsp;&emsp;四者缺一不可，四者融汇贯通，此乃绝世神功。<br>&emsp;&emsp;现实生活中我们学习很难完成整个学习闭环，那么对知识的掌握程度会大打折扣。<br>&emsp;&emsp;一定要避免 探险学习，一时的心潮澎湃决定多学一点，但是大部分人都是学习了很多却没有流转到后续的 思考 记录 复习 阶段。<br>&emsp;&emsp;没有走完学习的闭环，学习的效率其实是很差的。<br>&emsp;&emsp;无论是在短的时间也一定也走完整的学习闭环来学习。</p></blockquote><h5 id="穿插学习"><a href="#穿插学习" class="headerlink" title="穿插学习"></a>穿插学习</h5><blockquote><p>&emsp;&emsp;当学习多个学科的时候，穿插学习比起拆开时间死磕对应的学习是要好的。<br>&emsp;&emsp;比如说，我三天内需要学习 物理 化学 英语 三门学科。<br>&emsp;&emsp;比起一天一门学科的学习方法，每天都安排这三门一起学是要更好的。<br>&emsp;&emsp;首先拆开学习会导致前面的学科遗忘率增高，其次是穿插学习人为增加了学习难度，这有助于提高知识掌握的程度。</p></blockquote><blockquote><p>&emsp;&emsp;其实穿插学习的典型就是 渐进学习。<br>&emsp;&emsp;穿插学习需要把握好学习的科目数量，建议使用 1难1易 的搭配<br>&emsp;&emsp;如果穿插的知识太多，极有可能变成低效的多任务处理了，所以要量力而行。</p></blockquote><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote><p>&emsp;&emsp;学习骇客的理论里面着实学到了很多东西，其中不少知识点我将自己之前看过的一些 youtube 视频串联到一起形成我自己的一套说法。<br>&emsp;&emsp;之前花费了大量时间收集和测试 TiddlyWiki 的社区插件，我感觉也是没有掌握到 <strong>器欲尽其能必先得其法</strong> 的精髓。<br>&emsp;&emsp;虽然完美主义，强迫症人人都有，我就想要将 TiddlyWiki 打磨到最完美的状态下再深入使用。<br>&emsp;&emsp;但是回过头来看，坚持使用，并且将学习理论付诸实践才是目前我主要做的。<br>&emsp;&emsp;<strong>重在道不在术</strong> 我应该在使用 TiddlyWiki 过程中逐渐把他优化到最好的状态。</p></blockquote><h2 id="我目前的学习方案"><a href="#我目前的学习方案" class="headerlink" title="我目前的学习方案"></a>我目前的学习方案</h2><blockquote><p>&emsp;&emsp;总结了上面这么多的东西，总算是将我一路来得折腾总结了大半。<br>&emsp;&emsp;那么现在我的学习方案变更为下面三款软件为主了。</p></blockquote><ul><li>收集箱 <a href="https://www.dida365.com/webapp/" target="_blank" rel="noopener"><strong>滴答清单</strong></a></li><li>知识管理 <a href="https://tiddlywiki.com/" target="_blank" rel="noopener"><strong>TiddlyWiki</strong></a></li><li>复习工具 <a href="https://apps.ankiweb.net/" target="_blank" rel="noopener"><strong>Anki</strong></a></li></ul><blockquote><p>&emsp;&emsp;滴答清单是一款 GTD 工作流的时间管理软件。<br>&emsp;&emsp;其实用它也有好长一段时间了，但是中间用得断断续续吧。<br>&emsp;&emsp;一直也没有申请会员，这款软件如果不是强迫症的话免费功能真的已经够用了。<br>&emsp;&emsp;而且免费环境还能多端同步，实在是良心软件。</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/346606470" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/346606470</a></p><blockquote><p>&emsp;&emsp;使用 TiddlyWiki 有选择了 滴答清单 的并非我一个，在知乎搜索 滴答清单 和 TiddlyWiki 就很容易搜出对应的文章 <a href="https://zhuanlan.zhihu.com/p/346606470" target="_blank" rel="noopener">链接</a><br>&emsp;&emsp;里面提到的问题其实我也有遇到类似的情况。<br>&emsp;&emsp;TiddlyWiki 其实有任务管理的插件，叫做 <a href="https://projectify.wiki/" target="_blank" rel="noopener">projectify</a><br>&emsp;&emsp;但是 TiddlyWiki 在移动端的体验可谓是糟糕得很，而且网页上无法联动收集内置的定时提醒。<br>&emsp;&emsp;着实让 projectify 显得鸡肋。<br>&emsp;&emsp;滴答清单就可以很好解决我上述的诸多烦恼，而且滴答清单接入了很棒的 Markdown 编辑器。<br>&emsp;&emsp;任务描述的书写体验非常好，很适合将一些想法点子记录下来，后续再到 TiddlyWiki 中进一步加工。</p></blockquote><hr><blockquote><p>&emsp;&emsp;Tiddlywiki 是我目前的知识管理工具，但是并没有深入的使用起来，因为这篇文章一直卡壳没有写完<em>(:з」∠)</em><br>&emsp;&emsp;待我将东西整理完毕之后，还有花很多时间来整理一下目前我瞎折腾的 TiddlyWiki<br>&emsp;&emsp;之前捣鼓的插件加起来已经有 100 多个。<br>&emsp;&emsp;目前我是将三个大佬的 TiddlyWiki 插件进行了整合。</p></blockquote><ul><li><a href="https://github.com/keatonlao/tiddlywiki-xp" target="_blank" rel="noopener">tiddlywiki-xp</a></li><li><a href="https://onetwo.ren/wiki/" target="_blank" rel="noopener">林一二的模因和想法</a></li><li><a href="https://zettelkasten.sorenbjornstad.com/" target="_blank" rel="noopener">zettelkasten</a></li></ul><blockquote><p>&emsp;&emsp;目前还在我的私人仓库里面躺着，还没有整理好公开发布的流程。<br>&emsp;&emsp;总之这是一个宏大的计划，也说不定哪天就跳反到 Notion 去了。</p></blockquote><hr><blockquote><p>&emsp;&emsp;Anki 复习，目前是使用 <a href="https://sobjornstad.github.io/TiddlyRemember/" target="_blank" rel="noopener">TiddlyRemember</a> 插件来将 TiddlyWiki 的问题同步到 Anki 中进行复习。<br>&emsp;&emsp;这样可以 Anki 点零碎找不到源头的问题。<br>&emsp;&emsp;知识库的联动有助于提高复习的效率。</p></blockquote><blockquote><p>&emsp;&emsp;这套插件已经经过我测试可以用起来，只是还没有开学习的新坑，所以整套流程还没有推动起来。</p></blockquote><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;这一次 PKM 的折腾，消耗了我大量的个人时间，但我觉得这个是终生受益的。<br>&emsp;&emsp;对比以前我的学习方法，其实是没有完成学习的闭环，不过因为我有做博客积累。<br>&emsp;&emsp;所以我完成了 学习闭环 前三个步骤。<br>&emsp;&emsp;然而最重要的复习却是一片空白，如果知识是在生产中落地的，那么还能不断重复从而加深印象。<br>&emsp;&emsp;事实上有些东西我写了博客记录，也几乎不记得了。<br>&emsp;&emsp;比如我以前的 shader 学习系列 和 Houdini 学习之路 系列。<br>&emsp;&emsp;现在回过头来看，当时我看了教程学习，动手做了一遍进行思考，最后写了博客进行总结。<br>&emsp;&emsp;又因为一直没有机会用上，导致现在几乎忘记，还是因为没有走完学习闭环导致的。</p></blockquote><blockquote><p>&emsp;&emsp;目前我已经掌握了部分理论基础，后面只差摸索出适合自己的学习之道了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      关于 知识图谱 第二大脑 的折腾记录
    
    </summary>
    
      <category term="Wiki" scheme="https://blog.l0v0.com/categories/Wiki/"/>
    
    
      <category term="࠳tiddlywiki" scheme="https://blog.l0v0.com/tags/%E0%A0%B3tiddlywiki/"/>
    
      <category term="࠲Obsidian" scheme="https://blog.l0v0.com/tags/%E0%A0%B2Obsidian/"/>
    
  </entry>
  
  <entry>
    <title>Unreal Python UV 图自动渲染输出</title>
    <link href="https://blog.l0v0.com/posts/d197a8b3.html"/>
    <id>https://blog.l0v0.com/posts/d197a8b3.html</id>
    <published>2021-08-26T05:19:42.000Z</published>
    <updated>2022-07-21T06:37:45.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;最近接到一个新需求，美术那边经常需要导出模型的 UV 快照进行流光等效果的制作<br>&emsp;&emsp;但hexo是 Unreal 可以查看 UV 却无法把 UV 图导出来。<br>&emsp;&emsp;所以他们只好将引擎的资源导出到 DCC 里面使用 UV 快照输出 UV 图信息。</p></blockquote><blockquote><p>&emsp;&emsp;经过我的研究，可以利用 shader 展开 uV  然后用 SceneCapture 获取展平 UV 的效果。<br>&emsp;&emsp;最后用 Unreal 的 API 输出 UV 图即可~</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/d197a8b3/01.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><blockquote><p>&emsp;&emsp;首先需要实现一个 UV 平铺的材质，这是实现效果的关键。<br>&emsp;&emsp;最初我也没有什么想法，后来咨询了 胡洋 之后，有个教程网站有相应的实现。</p></blockquote><p><a href="https://www.raywenderlich.com/6817-dynamic-mesh-painting-in-unreal-engine-4" target="_blank" rel="noopener">https://www.raywenderlich.com/6817-dynamic-mesh-painting-in-unreal-engine-4</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/d197a8b3/03.gif" alt="alt"></p><blockquote><p>&emsp;&emsp;文章里面通过 shader 可以将角色拆成 UV 平铺的形式。<br>&emsp;&emsp;可以利用这个方法做一个简单的材质。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/d197a8b3/04.png" alt="alt"></p><blockquote><p>&emsp;&emsp;从材质的预览窗口也可以看到 UV 展平的效果很好地实现了。<br>&emsp;&emsp;接下来只需要构建一个相机从上往下 Capture UV 图即可。</p></blockquote><hr><blockquote><p>&emsp;&emsp;接下来需要构建一个用于拍屏的蓝图。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/d197a8b3/02.png" alt="alt"></p><blockquote><p>&emsp;&emsp;蓝图里面添加三个 component ， <code>capture相机</code> <code>StaticMeshComponent</code> <code>SkeletalMeshComponent</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/d197a8b3/05.png" alt="alt"></p><blockquote><p>&emsp;&emsp;相机需要设置为正交模式避免透视影响 </p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/d197a8b3/06.png" alt="alt"></p><blockquote><p>&emsp;&emsp;创建一个 RenderTarget 获取相机 Capture 的信息。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/d197a8b3/07.png" alt="alt"></p><blockquote><p>&emsp;&emsp;最后需要注意，capture 组件的大小和材质的大小要保持一致，否则渲染出来的图片不会刚好占满了。</p></blockquote><blockquote><p>&emsp;&emsp;接下来我们已经可以在蓝图验证 Capture 的效果了</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/d197a8b3/08.png" alt="alt"></p><blockquote><p>&emsp;&emsp;将模型附着，加上之前做好的展开 UV 的材质，就可以完美渲染出 UV 快照。<br>&emsp;&emsp;下一步可以从 RenderTarget 创建一个 静态的贴图 然后将贴图导出到对应的目录即可~</p></blockquote><h2 id="自动化-Capture"><a href="#自动化-Capture" class="headerlink" title="自动化 Capture"></a>自动化 Capture</h2><blockquote><p>&emsp;&emsp;上述的方案在蓝图即可完成，只是蓝图默认打开并不在 Viewport 的标签页下。导致无法触发界面的更新。<br>&emsp;&emsp;于是我想到将蓝图放到场景里面进行渲染即可~</p></blockquote><blockquote><p>&emsp;&emsp;自动化输出需要解决一个问题，需要等待图片输出到 RenderTarget 才能进行到下一步的输出。<br>&emsp;&emsp;因此需要用到 Python 的延时代码触发的功能，用原生的 Python 多线程就有 Timer 类可以用。<br>&emsp;&emsp;不过 Qt 的 QTimer 用起来更加方便简单。</p></blockquote><p>完整的代码在 PyToolkit 仓库里 <a href="https://github.com/FXTD-ODYSSEY/Unreal-PyToolkit/blob/e2630c9c2409a656aaaeef3fb9a69a8f490bbd8f/Content/PyToolkit/Msic/_menu/01_uv_capture.py" target="_blank" rel="noopener">链接</a></p><hr><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NOTE 记录和隐藏所有 Actor 的显示</span></span><br><span class="line">vis_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> actor <span class="keyword">in</span> level_lib.get_all_level_actors():</span><br><span class="line">    vis = actor.is_temporarily_hidden_in_editor()</span><br><span class="line">    vis_dict[actor] = vis</span><br><span class="line">    actor.set_is_temporarily_hidden_in_editor(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;Capture 之前需要将场景里所有的 Actor 隐藏起来，并且记录隐藏的状态， Capture 结束之后恢复显示。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">defer = QtCore.QTimer.singleShot</span><br><span class="line">delay_time = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, mesh <span class="keyword">in</span> enumerate(meshes):</span><br><span class="line">    defer(delay_time * i, partial(cls.capture, mesh))</span><br><span class="line">defer(delay_time * (i + <span class="number">1</span>), partial(cls.on_finished, vis_dict))</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;接着利用 singleShot 延时调用 capture ，等待 1000 毫秒基本就足够了。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">capture</span><span class="params">(cls, mesh)</span>:</span></span><br><span class="line">    capture_actor = level_lib.spawn_actor_from_object(BP, unreal.Vector())</span><br><span class="line">    capture_comp = capture_actor.get_editor_property(<span class="string">"capture"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isinstance(mesh, unreal.StaticMesh):</span><br><span class="line">        static_comp = capture_actor.get_editor_property(<span class="string">"static"</span>)</span><br><span class="line">        static_comp.set_editor_property(<span class="string">"static_mesh"</span>, mesh)</span><br><span class="line">        materials = get_static_materials(mesh)</span><br><span class="line">        comp = capture_actor.get_editor_property(<span class="string">"static"</span>)</span><br><span class="line">    <span class="keyword">elif</span> isinstance(mesh, unreal.SkeletalMesh):</span><br><span class="line">        skeletal_comp = capture_actor.get_editor_property(<span class="string">"skeletal"</span>)</span><br><span class="line">        skeletal_comp.set_editor_property(<span class="string">"skeletal_mesh"</span>, mesh)</span><br><span class="line">        materials = get_skeletal_materials(mesh)</span><br><span class="line">        <span class="comment"># NOTE 重新获取才可以设置 override_materials</span></span><br><span class="line">        comp = capture_actor.get_editor_property(<span class="string">"skeletal"</span>)</span><br><span class="line"></span><br><span class="line">    override_materials = [UV_MAT] * len(materials)</span><br><span class="line">    comp.set_editor_property(<span class="string">"override_materials"</span>, override_materials)</span><br><span class="line"></span><br><span class="line">    capture_comp.capture_scene()</span><br><span class="line">    <span class="comment"># NOTE 等待资源更新</span></span><br><span class="line">    defer(delay_time / <span class="number">2</span>, partial(cls.on_capture_finish, mesh, capture_actor))</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;capture 函数会将内置的蓝图生成到 场景里面，并且将模型和材质配置到蓝图相应的 component 上<br>&emsp;&emsp;然后调用 capture 组件的 <code>capture_scene</code> 来更新 <code>RenderTarget</code><br>&emsp;&emsp;最后还是要等待 半 秒，将获取的图输出到对应目录上。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_capture_finish</span><span class="params">(cls, mesh, capture_actor)</span>:</span></span><br><span class="line">    <span class="comment"># NOTE 生成 2D 贴图</span></span><br><span class="line">    name = os.path.basename(mesh.get_outer().get_name())</span><br><span class="line">    texture = render_lib.render_target_create_static_texture2d_editor_only(RT, name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE 导出图片</span></span><br><span class="line">    exporter = unreal.TextureExporterTGA()</span><br><span class="line">    output_path = os.path.join(cls.export_dir, <span class="string">"%s.tga"</span> % name)</span><br><span class="line">    export_asset(texture, output_path, exporter)</span><br><span class="line">    capture_actor.destroy_actor()</span><br><span class="line">    asset_lib.delete_asset(texture.get_path_name())</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;capture 完成的输出从 <code>RenderTarget</code> 生成静态图<br>&emsp;&emsp;然后将贴图导出到桌面上，最后删除生成的 Actor 和 静态图 资源。 </p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;这个方案有几个问题。<br>&emsp;&emsp;一个是需要用到 Unreal 的资产，高版本的资产无法兼容老版本。<br>&emsp;&emsp;第二个是，第一次拍屏的时候，shader可能需要进行编译，导致拍屏效果为空。<br>&emsp;&emsp;最后就是延时 1 秒的方案，还是有些许不确定性，如果需要渲染一个复杂的模型可能 capture 时间不够。</p></blockquote>]]></content>
    
    <summary type="html">
    
      利用延时命令等待 SceneCapture 组件输出
    
    </summary>
    
      <category term="游戏开发" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unreal" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/"/>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
      <category term="ࠃUnreal" scheme="https://blog.l0v0.com/tags/%E0%A0%83Unreal/"/>
    
  </entry>
  
</feed>
