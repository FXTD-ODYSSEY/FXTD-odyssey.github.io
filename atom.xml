<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>智伤帝的个人博客</title>
  
  <subtitle>岁月不饶人，我亦未曾饶过岁月。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.l0v0.com/"/>
  <updated>2022-08-11T11:40:18.041Z</updated>
  <id>https://blog.l0v0.com/</id>
  
  <author>
    <name>智伤帝</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maya CurveBrush 笔刷开发</title>
    <link href="https://blog.l0v0.com/posts/cacaf61d.html"/>
    <id>https://blog.l0v0.com/posts/cacaf61d.html</id>
    <published>2022-08-09T07:01:17.000Z</published>
    <updated>2022-08-11T11:40:18.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;最近因为比较特殊的原因，工作上突然闲下来了，于是我就去研究了我们组做的 Maya 毛发工具。<br>&emsp;&emsp;学习一下 Maya 做笔刷有哪些坑。</p></blockquote><blockquote><p>&emsp;&emsp;这次我的主要目的是模仿 <code>XGen</code> 的毛发笔刷效果，通过最小案例的实现，探讨不同的实现方案。</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/xgen_brush.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><p>官方文档: <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=GUID-496603B0-F929-45CD-B607-1CFCD3283DBE">XGen Interactive Grooming</a></p><blockquote><p>&emsp;&emsp;上面的视频就是 XGen 实现的笔刷效果，对于毛发制作非常丝滑好用。<br>&emsp;&emsp;只可惜这个笔刷不能对曲线直接生效。</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/curve_brush.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;上面是我用 C++ 写的曲线笔刷，下面我也会来探讨如何用 Python OpenMaya 结合 Qt 开发笔刷的流程。<br>&emsp;&emsp;具体代码已经开源到 <a href="https://github.com/FXTD-ODYSSEY/Maya-CurveBrush">https://github.com/FXTD-ODYSSEY/Maya-CurveBrush</a><br>&emsp;&emsp;C++ 插件提供了 2020 - 2023 支持<br>&emsp;&emsp;Python 插件有 <code>om1_curve_brush.py</code> 和 <code>om2_curve_brush.py</code></p></blockquote><h2 id="Maya-C-笔刷开发流程"><a href="#Maya-C-笔刷开发流程" class="headerlink" title="Maya C++ 笔刷开发流程"></a>Maya C++ 笔刷开发流程</h2><h3 id="Maya-C-MPxContext"><a href="#Maya-C-MPxContext" class="headerlink" title="Maya C++ MPxContext"></a>Maya C++ MPxContext</h3><blockquote><p>&emsp;&emsp;什么是 Maya Context ？ <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_Contexts_html">官方文档说明</a><br>&emsp;&emsp;Maya Context 就是一个开放的接口，可以用于自定义 鼠标 在 Viewport 上执行的逻辑，实现 绘制 修改选择物体 等操作。</p></blockquote><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_MPxContext_html">https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_MPxContext_html</a></p><blockquote><p>&emsp;&emsp;上面的链接是一个 Maya Devkit 里面的案例 <code>devkit\plug-ins\marqueeTool\marqueeTool.cpp</code><br>&emsp;&emsp;<a href="./Maya CMake 构建 C++ 插件编译环境.html">5875a169</a> 我的这篇文章有提到如何将 devkit 的源码编译生成 mll </p></blockquote><p><a href="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/marqueeTool.mll">maya2020 - marqueeTool.mll</a></p><blockquote><p>&emsp;&emsp;这里提供 Maya2020 windows 版本的 mll 插件<br>&emsp;&emsp;Maya 加载 mll 插件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line">ctx = cmds.marqueeToolContext()</span><br><span class="line">cmds.setToolTo(ctx)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;加载mll 插件后，可以使用上面的代码激活 Context</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/marqueeTool.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;上面实现的效果和默认的 框选物体是一样的。<br>&emsp;&emsp;只是框的颜色变成了自定义的 黄色。</p></blockquote><hr><blockquote><p>&emsp;&emsp;实现这个 context 需要继承实现两个类，一个是 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_html">MPxContext</a> 另一个是 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_command_html">MPxContextCommand</a><br>&emsp;&emsp;<a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_html">MPxContext</a> 类定义了鼠标拖拽 移动 等逻辑的虚函数，<a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_command_html">MPxContextCommand</a> 则是用来读取 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_html">MPxContext</a> 数据的 Mel 命令。<br>&emsp;&emsp;通过 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_command_html">MPxContextCommand</a> 就可以用 Mel 命令来修改 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_html">MPxContext</a> 的变量(比如笔刷大小之类的)</p></blockquote><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_MPxContextCommand_html">https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_MPxContextCommand_html</a></p><h3 id="Maya-C-MPxToolCommand"><a href="#Maya-C-MPxToolCommand" class="headerlink" title="Maya C++ MPxToolCommand"></a>Maya C++ MPxToolCommand</h3><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_MPxToolCommand_html">https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_MPxToolCommand_html</a></p><blockquote><p>&emsp;&emsp;上面提到的方案 Context 进行处理的时候是没有 Undo 功能的。<br>&emsp;&emsp;因此 Maya C++ 提供了 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_tool_command_html">MPxToolCommand</a> 这样将需要 undo 的逻辑放到 Command 当中实现，就可以 undo redo 操作了。<br>&emsp;&emsp;上面文档的案例来自于 <code>devkit\plug-ins\helixTool\helixTool.cpp</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/29da80e2a9a4b9a1513eb82a93e5ec30.jpeg" alt="image"></p><p><a href="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/helixTool.mll">maya2020 - helixTool.mll</a></p><blockquote><p>&emsp;&emsp;这里照样提供 Maya2020 windows 版本的 mll 插件<br>&emsp;&emsp;Maya 加载 mll 插件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line">ctx = cmds.helixToolContext()</span><br><span class="line">cmds.setToolTo(ctx)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;加载mll 插件后，可以使用上面的代码激活 Context<br>&emsp;&emsp;<strong>需要注意这个插件只能在旧的 Viewport 生效</strong> (我测了好久才明白过来)</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/4bb07f53fb16d1d0b3afe0449630340c.jpeg" alt="image"></p><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/helixTool.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;这个工具可以在 Maya Viewport 拖拽一个 圆柱预览 ，这个圆柱最后生成 螺旋线。<br>&emsp;&emsp;通过 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_tool_command_html">MPxToolCommand</a> 的方式就可以让生成的 螺旋线 undo。</p></blockquote><hr><blockquote><p>&emsp;&emsp;为何这个工具不能在 viewport2.0 下使用</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/581b6161891458d2098e7e062cd62bf2.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;从上面的 API 列表可以看到 <code>doDrag</code> <code>doPress</code> 好几个 API 都有两个实现。<br>&emsp;&emsp;一个是只传入 event 的，这个方法只在 老 Viewport 下调用。<br>&emsp;&emsp;Viewport2.0 调用的是传入 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a> 的方法。<br>&emsp;&emsp;<a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_helix_tool_2helix_tool_8cpp_example_html">helixTool</a> 没有实现 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a> 的方法，所以 Viewport2.0 下不起作用。</p></blockquote><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Viewport_2_0_API_Maya_Viewport_2_0_API_Guide_Plug_in_Entry_Points_Tool_Contexts_html">https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Viewport_2_0_API_Maya_Viewport_2_0_API_Guide_Plug_in_Entry_Points_Tool_Contexts_html</a></p><blockquote><p>&emsp;&emsp;官方文档被打散到 Viewport2.0 的目录下了，具体的说法可以参照上面</p></blockquote><h3 id="笔刷工具的-UI"><a href="#笔刷工具的-UI" class="headerlink" title="笔刷工具的 UI"></a>笔刷工具的 UI</h3><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_Tool_property_sheets_html">https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_Command_plug_ins_Tool_property_sheets_html</a></p><p><code>&lt;&gt;Properties.mel</code> 实现左侧的可修改界面<br><code>&lt;&gt;Values.mel</code> 获取笔刷数值 (更新到界面上)</p><blockquote><p>&emsp;&emsp;Context 激活之后，双击可以看到工具界面</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/5839bf8a5a103ef28fd5ee770f6b67cc.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;这个界面就是遵循上面两个 mel 的方法来实现的。</p></blockquote><hr><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/29da80e2a9a4b9a1513eb82a93e5ec30.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;可以继续参考 helixTool 的源码目录，它提供了 <code>helixProperties.mel</code> 和 <code>helixValues.mel</code> 脚本<br>&emsp;&emsp;那么上面的命名 <code>&lt;&gt;</code> 是怎么决定的，为啥用 <code>helixProperties</code> 而不是 <code>helixToolProperties</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/d9ae6102b9d5478f9956c83a03beb640.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;其实这是 <code>getClassName</code> 决定的。<br>&emsp;&emsp;mel脚本并不是重点，双击 Context 调用的时 <code>helixProperties</code> <code>helixValues</code> 两个 mel 方法。</p></blockquote><h3 id="用-Python-生成-Mel-Proc"><a href="#用-Python-生成-Mel-Proc" class="headerlink" title="用 Python 生成 Mel Proc"></a>用 Python 生成 Mel Proc</h3><blockquote><p>&emsp;&emsp;如果要编写自定义的 UI，一定要用 mel 才能编写吗？<br>&emsp;&emsp;能否用 Python 解决问题呢？</p></blockquote><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=GUID-8A96A8DB-FD6F-434F-A878-288DD84E99C7#GUID-8A96A8DB-FD6F-434F-A878-288DD84E99C7__WS73099CC142F48755F2FC9DF120970276F7-BBF">https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=GUID-8A96A8DB-FD6F-434F-A878-288DD84E99C7#GUID-8A96A8DB-FD6F-434F-A878-288DD84E99C7__WS73099CC142F48755F2FC9DF120970276F7-BBF</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/a3e91c75f34ee059bed5905ccd505edb.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;如果嫌弃使用 mel 确实可以参考上面的链接用 Python 创建的 Mel Proc</p></blockquote><p>C:\Program Files\Autodesk\Maya2020\Python\Lib\site-packages\maya\mel\melutils.py<br>具体的代码实现可以通过上面的路径找到。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/bef869fe72657a593b289fd018356fb2.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;我尝试了一下，默认 <code>returnCmd</code> 是 False 会打开文件窗口生成出 mel 脚本。<br>&emsp;&emsp;可以设置 <code>returnCmd=True</code> 这样就返回 mel 代码了。<br>&emsp;&emsp;后面可以用 <code>mel.eval</code> 来执行返回的代码</p></blockquote><blockquote><p>&emsp;&emsp;就是传入的Python <code>function</code> 如果不在模块之下会弹出警告</p></blockquote><hr><p><a href="https://help.autodesk.com/cloudhelp/2020/JPN/Maya-Tech-Docs/PyMel/generated/functions/pymel.tools.py2mel/pymel.tools.py2mel.py2melProc.html">https://help.autodesk.com/cloudhelp/2020/JPN/Maya-Tech-Docs/PyMel/generated/functions/pymel.tools.py2mel/pymel.tools.py2mel.py2melProc.html</a></p><blockquote><p>&emsp;&emsp;pymel 库也提供了 py2mel 的方法<br>&emsp;&emsp;使用这个方法会比 Maya 内置的处理好一些<br>&emsp;&emsp;实现的原理基本一致，都是通过 Python 构建出 Mel 代码， Mel 代码本质就是用 <code>python</code> 关键字执行 Python 代码 (一会 Python 一会 Mel 的似乎挺绕的<em>(:з」∠)</em>)</p></blockquote><blockquote><p>&emsp;&emsp;pymel 还提供了 <code>mel2pyStr</code> 的方法可以直接将 mel 代码转成 Python 的版本。<br>&emsp;&emsp;这样就可以避免 python 和 mel 混写。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymel.tools <span class="keyword">import</span> mel2py</span><br><span class="line">path = <span class="string">r&quot;C:\Program Files\Autodesk\Maya2018\scripts\others\customtoolPaint.mel&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> rf:</span><br><span class="line">    content = rf.read()</span><br><span class="line">py_str = mel2py.mel2pyStr(content, pymelNamespace=<span class="string">&quot;pm&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(py_str)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;比如上面就可以将一些内置的 mel 案例转换成 python 版本。<br>&emsp;&emsp;pymelNamespace 可以给所有的调用加上相应的前缀。</p></blockquote><blockquote><p>&emsp;&emsp;利用上面的方法就可以将 helixTool 的 mel 脚本转为 Python 实现</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/b4775fae8fea92958f3eee9ab6d8ef0d.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;转换完成之后需要注意 function 调用，要将 <code>pm.mel</code> 去掉</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/09520a8d62d92800c1bd8e8f7dd8b97d.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;另外一些变量名 mel 里面可能命名为了 <code>set</code> 但是这些是 Python 的关键字或者内置变量需要注意。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"><span class="keyword">from</span> pymel.tools <span class="keyword">import</span> py2mel</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helixProperties</span>():</span><br><span class="line">    pm.setUITemplate(<span class="string">&quot;DefaultTemplate&quot;</span>, pushTemplate=<span class="number">1</span>)</span><br><span class="line">    parent = <span class="built_in">str</span>(pm.toolPropertyWindow(q=<span class="number">1</span>, location=<span class="number">1</span>))</span><br><span class="line">    pm.setParent(parent)</span><br><span class="line">    pm.columnLayout(<span class="string">&quot;helix&quot;</span>)</span><br><span class="line">    pm.tabLayout(<span class="string">&quot;helixTabs&quot;</span>, childResizable=<span class="literal">True</span>)</span><br><span class="line">    pm.columnLayout(<span class="string">&quot;helixTab&quot;</span>)</span><br><span class="line">    pm.frameLayout(<span class="string">&quot;helixFrame&quot;</span>, cll=<span class="literal">True</span>, l=<span class="string">&quot;Helix Options&quot;</span>, cl=<span class="literal">False</span>)</span><br><span class="line">    pm.columnLayout(<span class="string">&quot;helixOptions&quot;</span>)</span><br><span class="line">    pm.separator(style=<span class="string">&quot;none&quot;</span>)</span><br><span class="line">    pm.intSliderGrp(</span><br><span class="line">        <span class="string">&quot;numCVs&quot;</span>, field=<span class="number">1</span>, minValue=<span class="number">20</span>, maxValue=<span class="number">100</span>, value=<span class="number">1</span>, label=<span class="string">&quot;Number of CVs&quot;</span></span><br><span class="line">    )</span><br><span class="line">    pm.checkBoxGrp(<span class="string">&quot;upsideDownGrp&quot;</span>, numberOfCheckBoxes=<span class="number">1</span>, l1=<span class="string">&quot; &quot;</span>, label=<span class="string">&quot;Upside Down&quot;</span>)</span><br><span class="line">    pm.setParent(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">    <span class="comment"># helixOptions</span></span><br><span class="line">    pm.setParent(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">    <span class="comment"># helixFrame</span></span><br><span class="line">    pm.setParent(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">    <span class="comment"># helixTab</span></span><br><span class="line">    pm.setParent(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">    <span class="comment"># helixTabs</span></span><br><span class="line">    pm.setParent(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">    <span class="comment"># helix</span></span><br><span class="line">    <span class="comment"># Name the tabs; -tl does not allow tab labelling upon creation</span></span><br><span class="line">    pm.tabLayout(<span class="string">&quot;helixTabs&quot;</span>, tl=(<span class="string">&quot;helixTab&quot;</span>, <span class="string">&quot;Tool Defaults&quot;</span>), e=<span class="number">1</span>)</span><br><span class="line">    pm.setUITemplate(popTemplate=<span class="number">1</span>)</span><br><span class="line">    helixSetCallbacks(parent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helixSetCallbacks</span>(<span class="params">parent</span>):</span><br><span class="line">    pm.setParent(parent)</span><br><span class="line">    pm.checkBoxGrp(</span><br><span class="line">        <span class="string">&quot;upsideDownGrp&quot;</span>,</span><br><span class="line">        e=<span class="number">1</span>,</span><br><span class="line">        on1=<span class="keyword">lambda</span> *args: pm.helixToolContext(pm.currentCtx(), upsideDown=<span class="literal">True</span>, e=<span class="number">1</span>),</span><br><span class="line">        of1=<span class="keyword">lambda</span> *args: pm.helixToolContext(pm.currentCtx(), upsideDown=<span class="literal">False</span>, e=<span class="number">1</span>),</span><br><span class="line">    )</span><br><span class="line">    pm.intSliderGrp(</span><br><span class="line">        <span class="string">&quot;numCVs&quot;</span>,</span><br><span class="line">        e=<span class="number">1</span>,</span><br><span class="line">        cc=<span class="keyword">lambda</span> *args: pm.helixToolContext(pm.currentCtx(), numCVs=args[<span class="number">0</span>], e=<span class="number">1</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helixValues</span>(<span class="params">toolName</span>):</span><br><span class="line">    parent=(<span class="built_in">str</span>(pm.toolPropertyWindow(q=<span class="number">1</span>, location=<span class="number">1</span>)) + <span class="string">&quot;|helix|helixTabs|helixTab&quot;</span>)</span><br><span class="line">    pm.setParent(parent)</span><br><span class="line">    icon=<span class="string">&quot;helixTool.xpm&quot;</span></span><br><span class="line">    <span class="built_in">help</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">    pm.mel.toolPropertySetCommon(toolName, icon, <span class="built_in">help</span>)</span><br><span class="line">    pm.frameLayout(<span class="string">&#x27;helixFrame&#x27;</span>, en=<span class="literal">True</span>, e=<span class="number">1</span>, cl=<span class="literal">False</span>)</span><br><span class="line">    helixOptionValues(toolName)</span><br><span class="line">    pm.mel.toolPropertySelect(<span class="string">&#x27;helix&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helixOptionValues</span>(<span class="params">toolName</span>):</span><br><span class="line">    </span><br><span class="line">    cv_num = <span class="number">0</span></span><br><span class="line">    cv_num=<span class="built_in">int</span>(pm.mel.<span class="built_in">eval</span>(<span class="string">&quot;helixToolContext -q -numCVs &quot;</span> + toolName))</span><br><span class="line">    pm.intSliderGrp(<span class="string">&#x27;numCVs&#x27;</span>, e=<span class="number">1</span>, value=cv_num)</span><br><span class="line">    cv_num=<span class="built_in">int</span>(pm.mel.<span class="built_in">eval</span>(<span class="string">&quot;helixToolContext -q -upsideDown &quot;</span> + toolName))</span><br><span class="line">    <span class="keyword">if</span> cv_num:</span><br><span class="line">        pm.checkBoxGrp(<span class="string">&#x27;upsideDownGrp&#x27;</span>, e=<span class="number">1</span>, value1=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pm.checkBoxGrp(<span class="string">&#x27;upsideDownGrp&#x27;</span>, e=<span class="number">1</span>, value1=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">py2mel.py2melProc(helixProperties, procName=<span class="string">&quot;helixProperties&quot;</span>)</span><br><span class="line">py2mel.py2melProc(helixValues, procName=<span class="string">&quot;helixValues&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;经过一些修改之后，可以用 Python 的方式来编写 Mel 的 Proc 具体的调用了。</p></blockquote><h2 id="Maya-C-CurveBrush"><a href="#Maya-C-CurveBrush" class="headerlink" title="Maya C++ CurveBrush"></a>Maya C++ CurveBrush</h2><blockquote><p>&emsp;&emsp;通过上面一番探讨之后，我们终于是理清楚了做一个笔刷需要什么。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/31a73f4c83ccff69f92bc03bde499e99.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;所以我在 C++ 代码层面拆分三个头文件，分别对应 <code>MPxContext</code> <code>MPxContextCommand</code> <code>MPxContextToolCommand</code> 的实现。<br>&emsp;&emsp;如何开发也可以参考 helixTool 的代码。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/9fff8010770bff57783e3e1fdd93120a.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;注册插件的时候需要同时注册 <code>MPxContextCommand</code> 和 <code>MPxContextToolCommand</code><br>&emsp;&emsp;这样 Maya 就知道这两个命令是关联在一起的， <code>MPxContext</code> 里面调用 <code>newToolCommand</code> 方法就可以获取到 <code>MPxContextToolCommand</code></p></blockquote><h3 id="笔刷属性调整"><a href="#笔刷属性调整" class="headerlink" title="笔刷属性调整"></a>笔刷属性调整</h3><blockquote><p>&emsp;&emsp;我先要让笔刷按住 B 键的时候可以实现 大小 调整。<br>&emsp;&emsp;默认 Maya API 没有提供键盘事件的监听。<br>&emsp;&emsp;于是查找官方的案例，找到了 <code>devkit\plug-ins\grabUVMain.cpp</code>   </p></blockquote><p><a href="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/grabUV.mll">maya2020 - grabUV.mll</a></p><blockquote><p>&emsp;&emsp;这里提供 Maya2020 windows 版本的 mll 插件<br>&emsp;&emsp;Maya 加载 mll 插件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line">ctx = cmds.grabUVContext()</span><br><span class="line">cmds.setToolTo(ctx)</span><br></pre></td></tr></table></figure><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/helixTool.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;这个插件可以按住 B 键调整笔刷的大小。<br>&emsp;&emsp;原理是利用 Qt 的 eventFilter 监听全局的键盘响应，所以编译的 include 需要有 Qt 的头文件，默认的 include 路径只有 Qt 头文件压缩包，需要解压缩来索引。</p></blockquote><blockquote><p>&emsp;&emsp;所以我也是用同样的方式监听是否有按 B 键。<br>&emsp;&emsp;左键拖拽调整笔刷大小，中键拖拽调整笔刷强度。</p></blockquote><h3 id="曲线衰变颜色"><a href="#曲线衰变颜色" class="headerlink" title="曲线衰变颜色"></a>曲线衰变颜色</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/63b2f06b1f337413c94aee582df735de.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;笔刷覆盖的范围呈现颜色，这个是用 <code>Viewport2.0</code> 的 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a> 实现的。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/8917c29ae2838d566878dd7f92c712a3.jpeg" alt="image"></p><p><a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html">https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html</a></p><blockquote><p>&emsp;&emsp;<a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a> 提供了 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html#ab7479336abc018548fe68277932d848a">mesh</a> 的 API 进行曲线模型等的绘制。<br>&emsp;&emsp;最重要的第一点是可以传入颜色数组，根据每个点自定义颜色，其他的 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html#abe48ac82aa2ede6d0efd3c9cfadb068c">line</a> API 无法实现这个功能</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">MStatus <span class="title">curveBrushContext::doPtrMoved</span><span class="params">(MEvent &amp;event, MHWRender::MUIDrawManager &amp;drawMgr, <span class="type">const</span> MHWRender::MFrameContext &amp;context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">short</span> x, y;</span><br><span class="line">    event.<span class="built_in">getPosition</span>(x, y);</span><br><span class="line">    mBrushCenterScreenPoint = <span class="built_in">MPoint</span>(x, y);</span><br><span class="line">    <span class="keyword">auto</span> radius = mBrushConfig.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    drawMgr.<span class="built_in">beginDrawable</span>();</span><br><span class="line">    <span class="keyword">if</span> (bFalloffMode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> index = <span class="number">0</span>; index &lt; objDagPathArray.<span class="built_in">length</span>(); ++index)</span><br><span class="line">        &#123;</span><br><span class="line">            MPointArray pointArray;</span><br><span class="line">            MColorArray colorArray;</span><br><span class="line">            <span class="function">MFnNurbsCurve <span class="title">curveFn</span><span class="params">(objDagPathArray[index])</span></span>;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> segmentCount = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> pointIndex = <span class="number">0</span>; pointIndex &lt; segmentCount; ++pointIndex)</span><br><span class="line">            &#123;</span><br><span class="line">                MPoint point;</span><br><span class="line">                <span class="keyword">auto</span> param = curveFn.<span class="built_in">findParamFromLength</span>(curveFn.<span class="built_in">length</span>() * pointIndex / segmentCount);</span><br><span class="line">                curveFn.<span class="built_in">getPointAtParam</span>(param, point, MSpace::kWorld);</span><br><span class="line">                pointArray.<span class="built_in">append</span>(point);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// NOTE(timmyliang): draw falloff</span></span><br><span class="line">                <span class="type">short</span> x_pos, y_pos;</span><br><span class="line">                view.<span class="built_in">worldToView</span>(point, x_pos, y_pos);</span><br><span class="line">                <span class="function">MPoint <span class="title">screenPoint</span><span class="params">(x_pos, y_pos)</span></span>;</span><br><span class="line">                <span class="keyword">auto</span> distance = (mBrushCenterScreenPoint - screenPoint).<span class="built_in">length</span>();</span><br><span class="line">                <span class="keyword">auto</span> field = <span class="number">1</span> - distance / radius;</span><br><span class="line">                <span class="comment">// NOTE(timmyliang): transparent</span></span><br><span class="line">                colorArray.<span class="built_in">append</span>(distance &gt; radius ? <span class="built_in">MColor</span>(<span class="number">0.f</span>) : <span class="built_in">MColor</span>(field, field, field));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            drawMgr.<span class="built_in">setLineWidth</span>(<span class="number">12.0f</span>);</span><br><span class="line">            drawMgr.<span class="built_in">mesh</span>(MHWRender::MUIDrawManager::kLineStrip, pointArray, <span class="literal">NULL</span>, &amp;colorArray);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    drawMgr.<span class="built_in">setColor</span>(<span class="built_in">MColor</span>(<span class="number">1.f</span>, <span class="number">1.f</span>, <span class="number">1.f</span>));</span><br><span class="line">    drawMgr.<span class="built_in">setLineWidth</span>(<span class="number">2.0f</span>);</span><br><span class="line">    drawMgr.<span class="built_in">circle2d</span>(mBrushCenterScreenPoint, radius);</span><br><span class="line"></span><br><span class="line">    drawMgr.<span class="built_in">endDrawable</span>();</span><br><span class="line">    <span class="keyword">return</span> MS::kSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;那么问题就变成怎么获取顶点上色了，如果曲线的顶点数量很少就很难有好的显示效果。</p></blockquote><blockquote><p>&emsp;&emsp;因此这里使用 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_fn_nurbs_curve_html#a6fc77e351e95b453079bbad771940d9f">findParamFromLength</a> <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_fn_nurbs_curve_html#ab2f1acb5a0653b12d7430d5786ef2e3e">getPointAtParam</a>  的方式重新采样曲线的顶点。<br>&emsp;&emsp;对采样的顶点再判断一下是否在笔刷的圆圈范围内，范围外的附上透明的颜色，范围内的根据距离附上黑白色。</p></blockquote><h3 id="曲线-CV-移动"><a href="#曲线-CV-移动" class="headerlink" title="曲线 CV 移动"></a>曲线 CV 移动</h3><blockquote><p>&emsp;&emsp;首先要获取 drag 偏移的向量。<br>&emsp;&emsp;通过 <code>doPress</code> 方法可以获取到点击的时候的向量偏移。<br>&emsp;&emsp;再通过 <code>doDrag</code> 获取拖拽的时候鼠标的位置。<br>&emsp;&emsp;两个位置坐标就可以得到偏移的向量。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MStatus <span class="title">curveBrushContext::doPress</span><span class="params">(MEvent &amp;event, MHWRender::MUIDrawManager &amp;drawMgr, <span class="type">const</span> MHWRender::MFrameContext &amp;context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    view = M3dView::<span class="built_in">active3dView</span>();</span><br><span class="line">    event.<span class="built_in">getPosition</span>(startPosX, startPosY);</span><br><span class="line">    fStartBrushSize = mBrushConfig.<span class="built_in">size</span>();</span><br><span class="line">    fStartBrushStrength = mBrushConfig.<span class="built_in">strength</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MS::kSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">MStatus <span class="title">curveBrushContext::doDrag</span><span class="params">(MEvent &amp;event, MHWRender::MUIDrawManager &amp;drawMgr, <span class="type">const</span> MHWRender::MFrameContext &amp;context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    view.<span class="built_in">refresh</span>(<span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="type">short</span> currentPosX, currentPosY;</span><br><span class="line">    event.<span class="built_in">getPosition</span>(currentPosX, currentPosY);</span><br><span class="line">    <span class="keyword">auto</span> currentPos = <span class="built_in">MPoint</span>(currentPosX, currentPosY);</span><br><span class="line"></span><br><span class="line">    <span class="function">MPoint <span class="title">start</span><span class="params">(startPosX, startPosY)</span></span>;</span><br><span class="line">    MVector delta = <span class="built_in">MVector</span>(currentPos - start);</span><br><span class="line"></span><br><span class="line">    drawMgr.<span class="built_in">beginDrawable</span>();</span><br><span class="line">    drawMgr.<span class="built_in">setColor</span>(<span class="built_in">MColor</span>(<span class="number">1.f</span>, <span class="number">1.f</span>, <span class="number">1.f</span>));</span><br><span class="line">    drawMgr.<span class="built_in">setLineWidth</span>(<span class="number">2.0f</span>);</span><br><span class="line">    <span class="comment">// NOTE(timmyliang): hold down `B` key</span></span><br><span class="line">    <span class="keyword">if</span> (eDragMode == kBrushSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">float</span> deltaValue;</span><br><span class="line">        <span class="type">char</span> info[<span class="number">64</span>];</span><br><span class="line">        <span class="comment">// NOTES(timmyliang): left mouse for size</span></span><br><span class="line">        <span class="keyword">if</span> (event.<span class="built_in">mouseButton</span>() == MEvent::kLeftMouse)</span><br><span class="line">        &#123;</span><br><span class="line">            deltaValue = delta.x &gt; <span class="number">0</span> ? delta.<span class="built_in">length</span>() : -delta.<span class="built_in">length</span>();</span><br><span class="line">            mBrushConfig.<span class="built_in">setSize</span>(fStartBrushSize + deltaValue);</span><br><span class="line">            <span class="built_in">sprintf</span>(info, <span class="string">&quot;Brush Size: %.2f&quot;</span>, mBrushConfig.<span class="built_in">size</span>());</span><br><span class="line">            drawMgr.<span class="built_in">text2d</span>(currentPos, info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// NOTES(timmyliang): middle mouse for strength</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (event.<span class="built_in">mouseButton</span>() == MEvent::kMiddleMouse)</span><br><span class="line">        &#123;</span><br><span class="line">            deltaValue = delta.y &gt; <span class="number">0</span> ? delta.<span class="built_in">length</span>() : -delta.<span class="built_in">length</span>();</span><br><span class="line">            mBrushConfig.<span class="built_in">setStrength</span>(fStartBrushStrength + deltaValue);</span><br><span class="line">            <span class="built_in">sprintf</span>(info, <span class="string">&quot;Brush Strength: %.2f&quot;</span>, mBrushConfig.<span class="built_in">strength</span>());</span><br><span class="line">            drawMgr.<span class="built_in">text2d</span>(currentPos, info);</span><br><span class="line">        &#125;</span><br><span class="line">        drawMgr.<span class="built_in">line2d</span>(start, <span class="built_in">MPoint</span>(startPosX, startPosY + mBrushConfig.<span class="built_in">strength</span>() * <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MPoint startNearPos, startFarPos, currNearPos, currFarPos;</span><br><span class="line">        view.<span class="built_in">viewToWorld</span>(currentPosX, currentPosY, currNearPos, currFarPos);</span><br><span class="line">        view.<span class="built_in">viewToWorld</span>(startPosX, startPosY, startFarPos, startFarPos);</span><br><span class="line">        <span class="comment">// NOTE(timmyliang): use tool command for undo</span></span><br><span class="line">        curveBrushTool *cmd = (curveBrushTool *)<span class="built_in">newToolCommand</span>();</span><br><span class="line">        cmd-&gt;<span class="built_in">setStrength</span>(mBrushConfig.<span class="built_in">strength</span>());</span><br><span class="line">        cmd-&gt;<span class="built_in">setRadius</span>(mBrushConfig.<span class="built_in">size</span>());</span><br><span class="line">        cmd-&gt;<span class="built_in">setMoveVector</span>((currFarPos - startFarPos).<span class="built_in">normal</span>());</span><br><span class="line">        cmd-&gt;<span class="built_in">setStartPoint</span>(start);</span><br><span class="line">        cmd-&gt;<span class="built_in">setDagPathArray</span>(objDagPathArray);</span><br><span class="line">        cmd-&gt;<span class="built_in">redoIt</span>();</span><br><span class="line">        cmd-&gt;<span class="built_in">finalize</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    drawMgr.<span class="built_in">circle2d</span>(start, mBrushConfig.<span class="built_in">size</span>());</span><br><span class="line">    drawMgr.<span class="built_in">endDrawable</span>();</span><br><span class="line">    <span class="keyword">return</span> MS::kSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>doDrag</code> 还会判断是否按住 <code>B</code> 键，按住的话就调整笔刷的大小。<br>&emsp;&emsp;反之则调用 <code>newToolCommand</code> 执行 CV 移动的逻辑</p></blockquote><hr><blockquote><p>&emsp;&emsp;<code>ToolCommand</code> 会获取曲线上 CV 点的位置，将空间坐标转为屏幕坐标。<br>&emsp;&emsp;这样可以判断这些 CV 点是否在笔刷范围内。<br>&emsp;&emsp;如果在范围的 CV 点根据笔刷提供的方向进行偏移。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MStatus <span class="title">curveBrushTool::redoIt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    MVector offsetVector = moveVector * <span class="number">0.002</span> * strength;</span><br><span class="line">    M3dView view = M3dView::<span class="built_in">active3dView</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// NOTE(timmyliang): move curves cv in radius</span></span><br><span class="line">    <span class="type">short</span> x_pos, y_pos;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> index = <span class="number">0</span>; index &lt; dagPathArray.<span class="built_in">length</span>(); ++index)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">MFnNurbsCurve <span class="title">curveFn</span><span class="params">(dagPathArray[index])</span></span>;</span><br><span class="line">        std::map&lt;<span class="type">int</span>, MVector&gt; offsetMap;</span><br><span class="line">        <span class="keyword">for</span> (MItCurveCV <span class="built_in">cvIter</span>(dagPathArray[index]); !cvIter.<span class="built_in">isDone</span>(); cvIter.<span class="built_in">next</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            MPoint pos = cvIter.<span class="built_in">position</span>(MSpace::kWorld);</span><br><span class="line">            <span class="type">int</span> cvIndex = cvIter.<span class="built_in">index</span>();</span><br><span class="line">            curvePointMap[index][cvIndex] = pos;</span><br><span class="line">            view.<span class="built_in">worldToView</span>(pos, x_pos, y_pos);</span><br><span class="line">            <span class="keyword">if</span> ((startPoint - <span class="built_in">MPoint</span>(x_pos, y_pos)).<span class="built_in">length</span>() &lt; radius)</span><br><span class="line">            &#123;</span><br><span class="line">                offsetMap[cvIndex] = pos + offsetVector;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;it : offsetMap)</span><br><span class="line">        &#123;</span><br><span class="line">            curveFn.<span class="built_in">setCV</span>(it.first, it.second, MSpace::kWorld);</span><br><span class="line">        &#125;</span><br><span class="line">        curveFn.<span class="built_in">updateCurve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MStatus::kSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_it_curve_c_v_html">MItCurveCV</a> 遍历曲线上所有的 CV 点。<br>&emsp;&emsp;利用 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_fn_nurbs_curve_html#a48b56f4698e7040883822351234c8c63">setCV</a> 方法可以实现顶点的偏移<br>&emsp;&emsp;C++ 这边我发现不能在 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_it_curve_c_v_html">MItCurveCV</a> 的遍历过程中调用 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_fn_nurbs_curve_html#a48b56f4698e7040883822351234c8c63">setCV</a> ，它会导致遍历中断。<br>&emsp;&emsp;但是用 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_it_curve_c_v_html">MItCurveCV</a> 提供的 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_it_curve_c_v_html#a0cb9d81962afa9947eb5aa0b4465f217">setCVPosition</a> 无法实现位置的刷新。<br>&emsp;&emsp;最后只好将 CV序号 和 位置通过 Map 保存起来，通过 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_fn_nurbs_curve_html#a48b56f4698e7040883822351234c8c63">setCV</a> API 去偏移。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MStatus <span class="title">curveBrushTool::undoIt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// NOTE(timmyliang): reset point position</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;kv : curvePointMap)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">MFnNurbsCurve <span class="title">curveFn</span><span class="params">(dagPathArray[kv.first])</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;it : kv.second)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cvIndex = it.first;</span><br><span class="line">            MPoint pos = it.second;</span><br><span class="line">            curveFn.<span class="built_in">setCV</span>(cvIndex, pos, MSpace::kWorld);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MStatus::kSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 <code>curvePointMap</code> 变量保存了上一次所有 CV 点的位置，undo 只要遍历这个字典去重置 CV 位置即可。</p></blockquote><h2 id="OpenMaya-2-0-笔刷开发"><a href="#OpenMaya-2-0-笔刷开发" class="headerlink" title="OpenMaya 2.0 笔刷开发"></a>OpenMaya 2.0 笔刷开发</h2><blockquote><p>&emsp;&emsp;既然 C++ 可以开发出如上看到的笔刷，理论上也可以通过 Python OpenMaya 库进行笔刷开发。<br>&emsp;&emsp;但是我发现 OpenMaya 1.0 不支持 Viewport 2.0 的 API，比如上面关键的 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_h_w_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a><br>&emsp;&emsp;在 OpenMaya1.0 下是不不存在的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> OpenMayaRender</span><br><span class="line">OpenMayaRender.MUIDrawManager </span><br><span class="line"><span class="comment"># Error: AttributeError: file &lt;maya console&gt; line 2: &#x27;module&#x27; object has no attribute &#x27;MUIDrawManager&#x27; # </span></span><br><span class="line"><span class="keyword">from</span> maya.api <span class="keyword">import</span> OpenMayaRender</span><br><span class="line">OpenMayaRender.MUIDrawManager</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;可以看到 OpenMaya 2.0 才有 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__py_ref_class_open_maya_render_1_1_m_u_i_draw_manager_html">MUIDrawManager</a></p></blockquote><p><a href="https://matiascodesal.com/blog/maya-python-api-20-it-ready-yet/">https://matiascodesal.com/blog/maya-python-api-20-it-ready-yet/</a></p><blockquote><p>&emsp;&emsp;以前 18 年的时候还看到有人了文章介绍 OpenMaya 2.0 到底是否可以已经完善了。<br>&emsp;&emsp;OpenMaya 2.0 与 OpenMaya 1.0 相比还缺了挺多的 C++ 类的。<br>&emsp;&emsp;而且 OpenMaya2.0 的案例都有一些代码错误，比如 <code>plug-ins\python\api2\py2LassoTool.py</code> (已经是 2023 的最新版本了)<br>&emsp;&emsp;这实在是令人失望，脚本的第 224 行有明显 <code>true</code> 使用不当，并且 <code>MItCurveCV</code> 这个类 OpenMaya 2.0 不支持的。<br>&emsp;&emsp;我启用这个脚本框选 CV 点直接给我报错<em>(:з」∠)</em><br>&emsp;&emsp;也因为 OpenMaya 2.0 各种不完善， <a href="http://tw.l0v0.com/#%F0%9F%91%A8%E2%80%8D%F0%9F%92%BBmottosso">👨‍💻mottosso</a> 大佬才会做自己的 Pyd wrapper 封装 C++ API <a href="https://github.com/mottosso/cmdc">cmdc</a> ，只是目前的进度还需要更多人加入支持开发。</p></blockquote><hr><blockquote><p>&emsp;&emsp;那是用 OpenMaya 2.0 能否完成我上面的 C++ 曲线笔刷的复刻呢？<br>&emsp;&emsp;我查了一下，发现 Maya 2020 之后添加了 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_tool_command_html">MPxToolCommand</a> 命令，似乎可以实现和 C++ 一样的 undo 命令。<br>&emsp;&emsp;然而我的实测却让我非常失望。</p></blockquote><p><a href="https://github.com/FXTD-ODYSSEY/Maya-CurveBrush/blob/main/plug-ins/om2_curve_brush.py">https://github.com/FXTD-ODYSSEY/Maya-CurveBrush/blob/main/plug-ins/om2_curve_brush.py</a></p><h3 id="MPxContextCommand-缺失-syntax-parser-方法"><a href="#MPxContextCommand-缺失-syntax-parser-方法" class="headerlink" title="MPxContextCommand 缺失 syntax parser 方法"></a>MPxContextCommand 缺失 syntax parser 方法</h3><blockquote><p>&emsp;&emsp;基于 OpenMaya 2.0 版本的插件我已经写完了，只是被它的不完整气得不轻。<br>&emsp;&emsp;首先 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_context_command_html">MPxContextCommand</a> 缺失了 <code>syntax</code> <code>parser</code> 方法<br>&emsp;&emsp;即便提供了 <code>doQueryFlags</code> <code>doEditFlags</code> 的 API 但是没法和 C++ 一样进行调用，但是 OpenMaya 1.0 提供了 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_command_html#a7d98dc216bb8f7089f649230e06f6da9">_syntax</a> <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_command_html#aa367dd5b853c97af707d0fb44aa37971">_parser</a> 方法给 Python 调用。</p></blockquote><h3 id="registerContextCommand-不支持-MPxToolCommand-注册"><a href="#registerContextCommand-不支持-MPxToolCommand-注册" class="headerlink" title="registerContextCommand 不支持 MPxToolCommand 注册"></a>registerContextCommand 不支持 MPxToolCommand 注册</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    pluginFn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pluginFn.registerContextCommand(CONTEXT_NAME, CurveBrushContextCmd.creator)</span><br><span class="line">        <span class="comment"># TODO(timmyliang): not support MPxToolCommand registered</span></span><br><span class="line">        <span class="comment"># pluginFn.registerContextCommand(</span></span><br><span class="line">        <span class="comment">#     CONTEXT_NAME,</span></span><br><span class="line">        <span class="comment">#     CurveBrushContextCmd.creator,</span></span><br><span class="line">        <span class="comment">#     CONTEXT_TOOL_NAME,</span></span><br><span class="line">        <span class="comment">#     CurveBrushTool.creator,</span></span><br><span class="line">        <span class="comment">#     CurveBrushTool.newSyntax,</span></span><br><span class="line">        <span class="comment"># )</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register command: %s\n&quot;</span> % CONTEXT_NAME)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;OpenMaya 2.0 终于在 Maya 2020 提供了 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_tool_command_html">MPxToolCommand</a> 的接口。<br>&emsp;&emsp;但是 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_tool_command_html">MPxToolCommand</a> 需要通过 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_1_1_m_fn_plugin_html#af866d7403152d0a96ab838a9dd16d460">registerContextCommand</a> 来注册进去。<br>&emsp;&emsp;但是它目前不支持 5 个参数的调用，导致 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_tool_command_html">MPxToolCommand</a> 无法注册。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Error: TypeError: file F:/repo/CMakeMaya/modules/Maya-CurveBrush/plug-ins/om2_curve_brush.py line 448: function takes exactly 2 arguments (5 given) # </span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;注册的时候会提示 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_1_1_m_fn_plugin_html#af866d7403152d0a96ab838a9dd16d460">registerContextCommand</a> 只接受两个参数。</p></blockquote><h3 id="MPxToolCommand-doFinalize-无法传入参数"><a href="#MPxToolCommand-doFinalize-无法传入参数" class="headerlink" title="MPxToolCommand doFinalize 无法传入参数"></a>MPxToolCommand doFinalize 无法传入参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CurveBrushTool</span>(omui.MPxToolCommand):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">finalize</span>(<span class="params">self</span>):</span><br><span class="line">        command = om.MArgList()</span><br><span class="line">        command.addArg(self.commandString)</span><br><span class="line">        <span class="keyword">for</span> flag, config <span class="keyword">in</span> self.flags_data.items():</span><br><span class="line">            long_flag = config.get(<span class="string">&quot;long&quot;</span>)</span><br><span class="line">            command.addArg(flag)</span><br><span class="line">            command.addArg(<span class="built_in">getattr</span>(self, long_flag[<span class="number">1</span>:]))</span><br><span class="line">        <span class="comment"># TODO(timmyliang): not accept the command argument</span></span><br><span class="line">        <span class="comment"># return self.doFinalize(command)</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;虽然 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_1_1_m_fn_plugin_html#af866d7403152d0a96ab838a9dd16d460">registerContextCommand</a> 无法注册 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_tool_command_html">MPxToolCommand</a> 导致 <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_context_html#a8e65ca6ff1d97d4b49ac94897462dc72">newToolCommand</a> 没有正常的返回。<br>&emsp;&emsp;但我可以单独实例化 <code>MPxToolCommand</code> 从而实现 undo<br>&emsp;&emsp;可是还是不行，而且这个坑爹的情况明显是官方的问题。<br>&emsp;&emsp;<a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__py_ref_class_open_maya_u_i_1_1_m_px_tool_command_html#adf6d293860cfea905a954f2931f7c3c5">doFinalize</a> 明明可以接受一个 <code>MArgList</code> 类型的参数，但是这个 Python 函数却不接受任何参数<em>(:з」∠)</em></p></blockquote><h3 id="OpenMaya-2-0-展示"><a href="#OpenMaya-2-0-展示" class="headerlink" title="OpenMaya 2.0 展示"></a>OpenMaya 2.0 展示</h3><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/om2.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;虽然 2.0 有上述的诸多问题，笔刷的基础功能还是可以实现的。<br>&emsp;&emsp;只是 undo 功能解决不了，倒是可以将曲线的 tweak 操作转移到另一个 Command 上从而实现 undo 的。<br>&emsp;&emsp;不过我这里就点到为止，主要踩了 OpenMaya 2.0 的坑，对它好感度降低了不少<em>(:з」∠)</em></p></blockquote><h2 id="Python-Qt-Overlay-实现自定义绘制"><a href="#Python-Qt-Overlay-实现自定义绘制" class="headerlink" title="Python Qt Overlay 实现自定义绘制"></a>Python Qt Overlay 实现自定义绘制</h2><blockquote><p>&emsp;&emsp;上面提到了 OpenMaya 1.0 缺失了 <code>MUIDrawManager</code> 所以无法在 Viewport 2.0 下进行图像绘制。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/581b6161891458d2098e7e062cd62bf2.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;C++ 文档也注明了带 <code>MUIDrawManager</code> 是无法在 Python 下使用的。<br>&emsp;&emsp;我也测试了不传入 <code>MUIDrawManager</code> 的几个方法，他们只能在 Legacy Viewport 下响应触发。</p></blockquote><blockquote><p>&emsp;&emsp;那还有什么方法不用 C++ 也可以实现 Python 的绘制呢？<br>&emsp;&emsp;这就可以参考非常棒的一个 Maya Python 工具 <a href="https://github.com/wiremas/spore">spore</a></p></blockquote><blockquote><p>&emsp;&emsp;spore 也实现了自己的笔刷工具，并且对低版本 Maya 兼容。<br>&emsp;&emsp;它的做法是不通过 Maya API 实现，而是利用 Qt 的 API 进行绘制。<br>&emsp;&emsp;因此先对 Maya 的 Viewport 叠加一层透明的 QWidget 层，通过 <a href="https://doc.qt.io/qtforpython-5/PySide2/QtWidgets/QWidget.html?highlight=paintevent#PySide2.QtWidgets.PySide2.QtWidgets.QWidget.paintEvent">paintEvent</a> 的实现，绘制自定义图形叠加到 Viewport 上。</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/om1.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;实现效果如上图，基本和 Maya API 的绘制效果很接近。</p></blockquote><h3 id="Overlay-组件实现"><a href="#Overlay-组件实现" class="headerlink" title="Overlay 组件实现"></a>Overlay 组件实现</h3><blockquote><p>&emsp;&emsp;组件叠加的方案我之前的文章也有过 <a href="./Unreal Python 路径定位启动器.html">5905c2c9</a><br>&emsp;&emsp;核心思路就是取消 Widget 的边框，忽略输入影响，透明化背景并且永远保持在最前面。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CanvasOverlay</span>(QtWidgets.QWidget):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, context</span>):</span><br><span class="line">        <span class="comment"># type: (CurveBrushContext) -&gt; <span class="literal">None</span></span></span><br><span class="line">        <span class="built_in">super</span>(CanvasOverlay, self).__init__()</span><br><span class="line">        self.setWindowFlags(</span><br><span class="line">            QtCore.Qt.FramelessWindowHint</span><br><span class="line">            | QtCore.Qt.SplashScreen</span><br><span class="line">            | QtCore.Qt.WindowStaysOnTopHint</span><br><span class="line">            | QtCore.Qt.WindowTransparentForInput</span><br><span class="line">        )</span><br><span class="line">        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)</span><br><span class="line">        self.setAttribute(QtCore.Qt.WA_NoSystemBackground)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这样就是一个无边框透明的窗口，如果不加上颜色用户是无感知的。</p></blockquote><p><a href="https://github.com/wiremas/spore/blob/b1ec511017cc9ba05d9034321369e5e404550232/scripts/ui/canvas.py#L18">spore 参考</a></p><h3 id="多个-Viewport-叠加支持"><a href="#多个-Viewport-叠加支持" class="headerlink" title="多个 Viewport 叠加支持"></a>多个 Viewport 叠加支持</h3><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/overlay.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;我添加了多个 Viewport 的 Overlay 支持，spore 默认是只对笔刷激活时的 Viewport 进行 Overlay 操作。<br>&emsp;&emsp;如果切换到多视图或者单独的 Viewport 窗口就会让 Overlay 显示不正常。<br>&emsp;&emsp;这里的 Overlay 加上了大色块方便观察。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AppFilter</span>(QtCore.QObject):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, canvas</span>):</span><br><span class="line">        <span class="comment"># type: (CurveBrushContext) -&gt; <span class="literal">None</span></span></span><br><span class="line">        <span class="built_in">super</span>(AppFilter, self).__init__()</span><br><span class="line">        self.canvas = canvas</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eventFilter</span>(<span class="params">self, receiver, event</span>):</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span>() == QtCore.QEvent.MouseButtonPress:</span><br><span class="line">            widget = QtWidgets.QApplication.widgetAt(QtGui.QCursor.pos())</span><br><span class="line">            panel = <span class="built_in">isinstance</span>(widget, QtCore.QObject) <span class="keyword">and</span> widget.parent()</span><br><span class="line">            name = panel <span class="keyword">and</span> panel.objectName()</span><br><span class="line">            <span class="keyword">if</span> name:</span><br><span class="line">                is_model_editor = cmds.objectTypeUI(name, i=<span class="string">&quot;modelEditor&quot;</span>)</span><br><span class="line">                self.canvas.setVisible(is_model_editor)</span><br><span class="line">                <span class="keyword">if</span> is_model_editor:</span><br><span class="line">                    QtCore.QTimer.singleShot(<span class="number">0</span>, self.canvas.setup_active_viewport)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(AppFilter, self).eventFilter(receiver, event)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CurveBrushContext</span>(OpenMayaMPx.MPxContext):</span><br><span class="line">    <span class="comment"># 省略 ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOnSetup</span>(<span class="params">self</span>):</span><br><span class="line">        self.canvas = CanvasOverlay(self)</span><br><span class="line">        <span class="comment"># NOTES(timmyliang): 获取 QApplication 进行监听</span></span><br><span class="line">        app = QtWidgets.QApplication.instance()</span><br><span class="line">        app_filter = AppFilter(self.canvas)</span><br><span class="line">        app.installEventFilter(app_filter)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;我这里的做法是利用 <a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__cpp_ref_class_m_px_context_html#a658f83d3a196c6c8e77e7ed2655eb6d7">toolOnSetup</a> API ，激活笔刷的时候监听 Maya QApplication 全局的点击事件<br>&emsp;&emsp;如果点击的 Widget 是 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/modelEditor.html">modelEditor</a> 就将 overlay 同步过去。<br>&emsp;&emsp;Qt 的 objectName 就是 Maya 的 UI control Name ，所以从 <code>objectName()</code> 获取的 API 可以直接用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/objectTypeUI.html">objectTypeUI</a> 判断类型<br>&emsp;&emsp;利用这个方法任何 Viewport 点击都可以直接 Overlay 上去</p></blockquote><h3 id="监听-Viewport-事件"><a href="#监听-Viewport-事件" class="headerlink" title="监听 Viewport 事件"></a>监听 Viewport 事件</h3><blockquote><p>&emsp;&emsp;正如上面所说的 <code>doDrag</code> <code>doPress</code> 等一系列 API 在 Viewport 2.0 下是失效的。<br>&emsp;&emsp;通过 Qt 的 <a href="https://doc.qt.io/qtforpython-5/PySide2/QtCore/QObject.html?highlight=installeventfilter#PySide2.QtCore.PySide2.QtCore.QObject.installEventFilter">installEventFilter</a> 可以实现对 Viewport 的事件监听。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shiboken2</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide2.QtWidgets <span class="keyword">import</span> QWidget</span><br><span class="line"><span class="keyword">from</span> PySide2.QtCore <span class="keyword">import</span> QObject</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">active_view</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; return the active 3d view &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> omui.M3dView.active3dView()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">active_view_wdg</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; return the active 3d view wrapped in a QWidget &quot;&quot;&quot;</span></span><br><span class="line">    view = active_view()</span><br><span class="line">    active_view_widget = shiboken2.wrapInstance(long(view.widget()), QWidget)</span><br><span class="line">    <span class="keyword">return</span> active_view_widget</span><br></pre></td></tr></table></figure><p><a href="https://github.com/wiremas/spore/blob/b1ec511017cc9ba05d9034321369e5e404550232/scripts/utils/window_utils.py#L15">spore 参考</a></p><blockquote><p>&emsp;&emsp;通过 OpenMaya 1.0 的 API 可以获取当前激活的 Viewport QWidget<br>&emsp;&emsp;拦截这个 Viewport QWidget 的事件可以实现鼠标点击拖拽等等的响应。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MouseFilter</span>(QtCore.QObject):</span><br><span class="line">    wheel = QtCore.Signal(QtCore.QEvent)</span><br><span class="line">    moved = QtCore.Signal(QtCore.QEvent)</span><br><span class="line">    clicked = QtCore.Signal(QtCore.QEvent)</span><br><span class="line">    dragged = QtCore.Signal(QtCore.QEvent)</span><br><span class="line">    released = QtCore.Signal(QtCore.QEvent)</span><br><span class="line">    entered = QtCore.Signal()</span><br><span class="line">    leaved = QtCore.Signal()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(MouseFilter, self).__init__(*args, **kwargs)</span><br><span class="line">        self.is_clicked = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eventFilter</span>(<span class="params">self, receiver, event</span>):</span><br><span class="line">        event_type = event.<span class="built_in">type</span>()</span><br><span class="line">        <span class="keyword">if</span> event_type == QtCore.QEvent.MouseMove:</span><br><span class="line">            self.moved.emit(event)</span><br><span class="line">            <span class="keyword">if</span> self.is_clicked:</span><br><span class="line">                self.dragged.emit(event)</span><br><span class="line">        <span class="keyword">elif</span> (</span><br><span class="line">            event_type == QtCore.QEvent.MouseButtonPress</span><br><span class="line">            <span class="keyword">or</span> event_type == QtCore.QEvent.MouseButtonDblClick</span><br><span class="line">        ):</span><br><span class="line">            self.is_clicked = <span class="literal">True</span></span><br><span class="line">            self.clicked.emit(event)</span><br><span class="line">        <span class="keyword">elif</span> event_type == QtCore.QEvent.MouseButtonRelease:</span><br><span class="line">            self.is_clicked = <span class="literal">False</span></span><br><span class="line">            self.released.emit(event)</span><br><span class="line">        <span class="keyword">elif</span> event_type == QtCore.QEvent.Enter:</span><br><span class="line">            self.entered.emit()</span><br><span class="line">        <span class="keyword">elif</span> event_type == QtCore.QEvent.Leave:</span><br><span class="line">            self.leaved.emit()</span><br><span class="line">        <span class="keyword">elif</span> event_type == QtCore.QEvent.Wheel:</span><br><span class="line">            self.wheel.emit(event)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(MouseFilter, self).eventFilter(receiver, event)</span><br><span class="line"></span><br><span class="line">viewport = active_view_wdg()</span><br><span class="line">mouse_filter = MouseFilter()</span><br><span class="line">viewport.installEventFilter(mouse_filter)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过上面的方式就可以拦截 viewport 的 event 通过 <code>MouseFilter</code> 的信号槽做相应的触发。</p></blockquote><h3 id="绘制实现"><a href="#绘制实现" class="headerlink" title="绘制实现"></a>绘制实现</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/ca328c45d71ebda1041ee55d0eac4a97.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;基本上和 Maya API 绘制的效果相差不多了。<br>&emsp;&emsp;Maya API 的 <code>MUIDrawManager</code> 提供了 mesh API 来绘制复杂推行。<br>&emsp;&emsp;Qt API 并没有类似的方法，不过 Qt 也有 <a href="https://doc.qt.io/qtforpython-5/PySide2/QtGui/QGradient.html">QGradient</a><br>&emsp;&emsp;通过 <a href="https://doc.qt.io/qtforpython-5/PySide2/QtGui/QLinearGradient.html#qlineargradient">QLinearGradient</a> 可以实现上面的效果。<br>&emsp;&emsp;同样地需要对曲线进行二次采样，提高分段数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">    self.draw_shape(self.create_brush_cricle(), QtCore.Qt.white, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> self.is_press_B:</span><br><span class="line">        self.draw_shape(self.create_brush_line(), QtCore.Qt.white, <span class="number">2</span>)</span><br><span class="line">    self.draw_text(self._message_info)</span><br><span class="line">    <span class="keyword">for</span> curve, data <span class="keyword">in</span> self.color_data.items():</span><br><span class="line">        self.draw_shape(data.get(<span class="string">&quot;points&quot;</span>), data.get(<span class="string">&quot;colors&quot;</span>), <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>(CanvasOverlay, self).paintEvent(event)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_brush_cricle</span>(<span class="params">self, count=<span class="number">60</span></span>):</span><br><span class="line">    shape = []</span><br><span class="line">    radius = self.radius</span><br><span class="line">    pt = self.start_pos <span class="keyword">if</span> self.is_press_B <span class="keyword">else</span> self.current_pos</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(count + <span class="number">1</span>):</span><br><span class="line">        theta = math.radians(<span class="number">360</span> * index / count)</span><br><span class="line">        pos_x = pt.x() + radius * math.cos(theta)</span><br><span class="line">        pos_y = pt.y() + radius * math.sin(theta)</span><br><span class="line">        shape.append(QtCore.QPointF(pos_x, pos_y))</span><br><span class="line">    <span class="keyword">return</span> shape</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_brush_line</span>(<span class="params">self</span>):</span><br><span class="line">    shape = []</span><br><span class="line">    start_pt = self.start_pos <span class="keyword">if</span> self.is_press_B <span class="keyword">else</span> self.current_pos</span><br><span class="line">    shape.append(start_pt)</span><br><span class="line">    shape.append(QtCore.QPoint(start_pt.x(), start_pt.y() - self.strength))</span><br><span class="line">    <span class="keyword">return</span> shape</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_shape</span>(<span class="params">self, line_shapes, colors, width=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(line_shapes) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    colors = colors <span class="keyword">or</span> QtCore.Qt.white</span><br><span class="line">    painter = QtGui.QPainter(self)</span><br><span class="line"></span><br><span class="line">    painter.setRenderHint(painter.Antialiasing)</span><br><span class="line">    painter.begin(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        <span class="built_in">isinstance</span>(colors, Iterable)</span><br><span class="line">        <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(colors, six.string_types)</span><br><span class="line">        <span class="keyword">and</span> <span class="built_in">len</span>(colors) == <span class="built_in">len</span>(line_shapes)</span><br><span class="line">    ):</span><br><span class="line">        <span class="comment"># NOTES(timmyliang): paint falloff</span></span><br><span class="line">        <span class="keyword">for</span> index, point <span class="keyword">in</span> <span class="built_in">enumerate</span>(line_shapes[:-<span class="number">1</span>]):</span><br><span class="line">            start_point = point</span><br><span class="line">            end_point = line_shapes[index + <span class="number">1</span>]</span><br><span class="line">            grandient_color = QtGui.QLinearGradient(start_point, end_point)</span><br><span class="line">            start_color = colors[index]</span><br><span class="line">            end_color = colors[index + <span class="number">1</span>]</span><br><span class="line">            grandient_color.setColorAt(<span class="number">0</span>, start_color)</span><br><span class="line">            grandient_color.setColorAt(<span class="number">1</span>, end_color)</span><br><span class="line">            pen = QtGui.QPen(grandient_color, width)</span><br><span class="line">            pen.setCapStyle(QtCore.Qt.RoundCap)</span><br><span class="line">            pen.setJoinStyle(QtCore.Qt.RoundJoin)</span><br><span class="line">            painter.setPen(pen)</span><br><span class="line">            painter.drawLine(start_point, end_point)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        path = QtGui.QPainterPath()</span><br><span class="line">        path.moveTo(line_shapes[<span class="number">0</span>])</span><br><span class="line">        [path.lineTo(point) <span class="keyword">for</span> point <span class="keyword">in</span> line_shapes]</span><br><span class="line">        color = QtGui.QColor(colors)</span><br><span class="line">        pen = QtGui.QPen(color, width)</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawPath(path)</span><br><span class="line"></span><br><span class="line">    painter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_text</span>(<span class="params">self, text, pos=<span class="literal">None</span>, color=QtCore.Qt.white, width=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    painter = QtGui.QPainter(self)</span><br><span class="line">    pen = QtGui.QPen(color, width)</span><br><span class="line">    painter.setPen(pen)</span><br><span class="line">    pos = pos <span class="keyword">or</span> self.current_pos + QtCore.QPoint(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">    painter.drawText(pos, text)</span><br><span class="line">    painter.end()</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面是绘制用到的 一些 API<br>&emsp;&emsp;核心就是 <code>draw_shape</code> 里面如果传入了多个 color ，获取color每个顶点画一条渐变的线<br>&emsp;&emsp;多条线组合成圆形，由此有了衰变颜色的圆形。</p></blockquote><blockquote><p>&emsp;&emsp;其他的绘制比如 绘制文字，Qt 有 <code>drawText</code> API<br>&emsp;&emsp;绘制圆圈可以利用 <code>sin</code> <code>cos</code> 数学函数来生成圆形的顶点进行绘制。</p></blockquote><h3 id="踩坑注意"><a href="#踩坑注意" class="headerlink" title="踩坑注意"></a>踩坑注意</h3><blockquote><p>&emsp;&emsp;<code>QtCore.QPoint</code> 和 <code>OpenMaya.MPoint</code> 两者的 Y 轴坐标起始不一样，所以通过 M3dView 将世界坐标转换为屏幕坐标的时候需要额外的处理。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">world_to_view</span>(<span class="params">position, invertY=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    convert the given 3d position to  2d viewport coordinates</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    view = OpenMayaUI.M3dView.active3dView()</span><br><span class="line">    arg_x = OpenMaya.MScriptUtil(<span class="number">0</span>)</span><br><span class="line">    arg_y = OpenMaya.MScriptUtil(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    arg_x_ptr = arg_x.asShortPtr()</span><br><span class="line">    arg_y_ptr = arg_y.asShortPtr()</span><br><span class="line">    view.worldToView(position, arg_x_ptr, arg_y_ptr)</span><br><span class="line">    x_pos = arg_x.getShort(arg_x_ptr)</span><br><span class="line">    y_pos = arg_y.getShort(arg_y_ptr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> invertY:</span><br><span class="line">        y_pos = view.portHeight() - y_pos</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (x_pos, y_pos)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/wiremas/spore/blob/b1ec511017cc9ba05d9034321369e5e404550232/scripts/utils/window_utils.py#L30">spore 参考</a></p><h2 id="基于-draggerContext-笔刷"><a href="#基于-draggerContext-笔刷" class="headerlink" title="基于 draggerContext 笔刷"></a>基于 draggerContext 笔刷</h2><p><a href="https://www.highend3d.com/maya/script/curve-paint-and-tweak-tool-for-maya#google_vignette">https://www.highend3d.com/maya/script/curve-paint-and-tweak-tool-for-maya#google_vignette</a></p><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/ysv.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;最后在 <a href="https://www.highend3d.com">highend3d</a> 里面也找到了一个直接 tweak CV 点的方案。<br>&emsp;&emsp;这个方案采用 <a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/draggerContext.html">draggerContext</a> 实现<br>&emsp;&emsp;<code>draggerContext</code> 的案例就可以实现在 viewport 拖拽的时候实现回调。<br>&emsp;&emsp;<code>highend3d</code> 的 ysd 曲线工具集还结合软选择的范围作为笔刷移动的参数，是个非常聪明的做法。<br>&emsp;&emsp;也可以通过这个方式实现拖拽生成一条曲线。<br>&emsp;&emsp;结合 OpenMaya API 可以做更多的事情，比如散布物体等等，用这个的方案比起 从零构建一个 MPxContext 要简单许多。</p></blockquote><blockquote><p>&emsp;&emsp;绘制功能还是无法解决，不过可以用上面 Qt Overlay 方案来解决。</p></blockquote><h2 id="artisan-笔刷"><a href="#artisan-笔刷" class="headerlink" title="artisan 笔刷"></a>artisan 笔刷</h2><blockquote><p>&emsp;&emsp;<a href="./Maya 根据贴图在模型表面散列物体.html">77ed9d8</a> 以前也写过散列物体的文章，不过实现方式是非笔刷的。<br>&emsp;&emsp;利用 artisan 就可以实现笔刷的方式散布物体了。</p></blockquote><p>官方文档: <a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=GUID-72D60883-07A4-4536-AE72-226A2AD0845E">Overview of MEL script painting</a></p><blockquote><p>&emsp;&emsp;官方提到有 <code>spherePaint</code> <code>geometryPaint</code> <code>emitterPaint</code> 几个案例。<br>&emsp;&emsp;具体的代码可以在 mel 脚本库里面找到 eg: <code>C:\Program Files\Autodesk\Maya2018\scripts\others\spherePaint.mel</code><br>&emsp;&emsp;从最简单的 <code>spherePaint</code> 介绍</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/d0c515791bd2c9e96e5347e4cb3865dc.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;在 <code>Modify</code> 页面下找到 <code>Paint Scripts Tool</code> 工具<br>&emsp;&emsp;打开工具属性面板，在 <code>Setup</code> 标签页的 <code>Tool setup cmd</code> 输入 <code>spherePaint</code> 就可以激活笔刷</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/cacaf61d/spherePaint.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;可以很好得在球面上刷 Sphere</p></blockquote><hr><blockquote><p>&emsp;&emsp;只可惜 artisan 笔刷它不响应 <code>NurbsCurve</code> ，只支持 mesh。<br>&emsp;&emsp;所以无法实现上面探讨的 曲线笔刷 的功能。<br>&emsp;&emsp;artisan 方案更适合颜色绘制或者是物体散布。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;以上就是我发现的 Maya 笔刷的多种使用姿势。<br>&emsp;&emsp;后面有机会可以再探讨一下 artisan 笔刷的关于顶点色编辑相关的内容。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Maya 笔刷开发的各种姿势汇总
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/CG/Maya/C/"/>
    
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Unreal C++ 工具开发最小实践</title>
    <link href="https://blog.l0v0.com/posts/cab0d099.html"/>
    <id>https://blog.l0v0.com/posts/cab0d099.html</id>
    <published>2022-07-15T08:00:58.000Z</published>
    <updated>2022-08-11T11:40:18.128Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;Unreal 的学习浩瀚且博杂，有时候一个最小 Demo 就是很好的学习起点。<br>&emsp;&emsp;想起我以前翻阅 UE 的源码一大堆的文件，看得我是无比头疼。<br>&emsp;&emsp;偶然间发现 CSDN YakSue 写了好多篇 Unreal 工具开发的 介绍。<br>&emsp;&emsp;虽然没有配上 Github 链接，但是源码都在文章里面体现了。<br>&emsp;&emsp;对于工具开发的不同模块都大有裨益。<br>&emsp;&emsp;于是我将这些内容整合到一起，并且详细讲解其中实现的核心点。</p></blockquote><h2 id="Custom-Asset"><a href="#Custom-Asset" class="headerlink" title="Custom Asset"></a>Custom Asset</h2><p><a href="https://yaksue.blog.csdn.net/article/details/107646900">https://yaksue.blog.csdn.net/article/details/107646900</a><br><a href="https://github.com/FXTD-ODYSSEY/Unreal-Playground/tree/main/Plugins/Yaksue/TestAssetEditorPlg">https://github.com/FXTD-ODYSSEY/Unreal-Playground/tree/main/Plugins/Yaksue/TestAssetEditorPlg</a></p><blockquote><p>&emsp;&emsp;创建一个自定义的 Asset 需要有三个类</p><ol><li>Asset (UObject)</li><li>AssetFactory (UFactory)</li><li>AssetTypeActions (FAssetTypeActions_Base)</li></ol></blockquote><blockquote><p>&emsp;&emsp;Asset 描述对象本身的数据<br>&emsp;&emsp;AssetFactory 描述如何创建对象<br>&emsp;&emsp;AssetTypeActions 返回对象显示的信息</p></blockquote><blockquote><p>&emsp;&emsp;<code>AssetTypeActions</code> 包含方法 <code>GetName</code> <code>GetTypeColor</code> <code>GetSupportedClass</code> <code>GetCategories</code> 用来描述对应的信息。<br>&emsp;&emsp;<code>GetCategories</code> 会分配 Asset 所属的位置。</p></blockquote><blockquote><p>&emsp;&emsp;这个方式默认打开的窗口是 Details Panel.<br>&emsp;&emsp;如果想要自定义打开的窗口需要添加 <code>FAssetEditorToolkit</code> 类<br>&emsp;&emsp;<code>AssetTypeActions</code> 添加 <code>OpenAssetEditor</code> 方法将 Toolkit 生成并初始化。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FAssetEditorToolkit</span><br><span class="line">  GetToolkitFName</span><br><span class="line">  GetBaseToolkitName</span><br><span class="line">  GetWorldCentricTabPrefix</span><br><span class="line">  GetWorldCentricTabColorScale</span><br><span class="line">  Initialize</span><br><span class="line">  RegisterTabSpawners</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>RegisterTabSpawners</code> 通过这个方法注册生产 Tab 的 ID<br>&emsp;&emsp;后续通过 <code>Initialize</code> 方法调用 AddTab 将 Register 的 Tab 生成。<br>&emsp;&emsp;最后通过 <code>FAssetEditorToolkit::InitAssetEditor</code> 完成 Toolkit 的初始化</p></blockquote><hr><blockquote><p>&emsp;&emsp;如果不想将 Asset 放到 <code>EAssetTypeCategories::Misc</code> 的分类中。<br>&emsp;&emsp;也可以构建一个新的标签附上去。<br>&emsp;&emsp;只是需要将 factory 相关的 <code>GetMenuCategories</code> 放入去掉。<br>&emsp;&emsp;我之前没有去掉，一直很疑惑为啥自定义菜单没有生效。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FYaksueTestAssetTypeActions::<span class="built_in">FYaksueTestAssetTypeActions</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> 注册新的分类</span></span><br><span class="line">IAssetTools &amp;AssetTools = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FAssetToolsModule&gt;(<span class="string">&quot;AssetTools&quot;</span>).<span class="built_in">Get</span>();</span><br><span class="line">    AssetCategory = AssetTools.<span class="built_in">RegisterAdvancedAssetCategory</span>(<span class="built_in">FName</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Custom Assets&quot;</span>)), <span class="built_in">LOCTEXT</span>(<span class="string">&quot;CustomAssetCategory&quot;</span>, <span class="string">&quot;Custom Assets&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">uint32 <span class="title">FYaksueTestAssetTypeActions::GetCategories</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> AssetCategory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;构造函数注册新的分类，头文件需要添加上定义 <code>FYaksueTestAssetTypeActions();</code> <code>EAssetTypeCategories::Type AssetCategory;</code></p></blockquote><h2 id="Custom-Filter"><a href="#Custom-Filter" class="headerlink" title="Custom Filter"></a>Custom Filter</h2><p><a href="https://yaksue.blog.csdn.net/article/details/120929455">https://yaksue.blog.csdn.net/article/details/120929455</a><br><a href="https://github.com/FXTD-ODYSSEY/Unreal-Playground/tree/main/Plugins/Yaksue/TestCustomFilter">https://github.com/FXTD-ODYSSEY/Unreal-Playground/tree/main/Plugins/Yaksue/TestCustomFilter</a></p><blockquote><p>&emsp;&emsp;继承 <code>UContentBrowserFrontEndFilterExtension</code> 可以通过 override <code>AddFrontEndFilterExtensions</code> 方法扩展 filter。<br>&emsp;&emsp;生成一个 <code>FFrontendFilter</code> 子类，然后通过 <code>AddFrontEndFilterExtensions</code> 将过滤对象添加到过滤列表里面。<br>&emsp;&emsp;<code>FFrontendFilter</code> 最核心的方法就是 <code>PassesFilter</code> 它会将每个 item 传到这个函数返回 bool 来决定是否显示。</p></blockquote><!-- TODO PassesFilter item wrong --><h2 id="Slate"><a href="#Slate" class="headerlink" title="Slate"></a>Slate</h2><p><a href="https://yaksue.blog.csdn.net/article/details/110084013">https://yaksue.blog.csdn.net/article/details/110084013</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Put your tab content here!</span></span><br><span class="line"><span class="built_in">SNew</span>(SOverlay)</span><br><span class="line">+ SOverlay::<span class="built_in">Slot</span>()<span class="comment">//底层</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SHorizontalBox)</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>().<span class="built_in">FillWidth</span>(<span class="number">0.3f</span>)<span class="comment">//占30%</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)<span class="number">1</span></span><br><span class="line">]</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>().<span class="built_in">FillWidth</span>(<span class="number">0.7f</span>)<span class="comment">//占70%</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SVerticalBox)</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>().<span class="built_in">FillHeight</span>(<span class="number">0.5f</span>)<span class="comment">//占50%</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">]</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>().<span class="built_in">FillHeight</span>(<span class="number">0.5f</span>)<span class="comment">//占50%</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">+ SOverlay::<span class="built_in">Slot</span>()<span class="comment">//顶层</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SHorizontalBox)</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>().<span class="built_in">FillWidth</span>(<span class="number">1.0f</span>)<span class="comment">//占满剩余空间</span></span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>().<span class="built_in">AutoWidth</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SVerticalBox)</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>().<span class="built_in">FillHeight</span>(<span class="number">1.0f</span>)<span class="comment">//占满剩余空间</span></span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>().<span class="built_in">AutoHeight</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SBox)</span><br><span class="line">.<span class="built_in">HeightOverride</span>(<span class="number">128</span>)</span><br><span class="line">.<span class="built_in">WidthOverride</span>(<span class="number">128</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>().<span class="built_in">FillHeight</span>(<span class="number">1.0f</span>)<span class="comment">//占满剩余空间</span></span><br><span class="line">]</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>().<span class="built_in">FillWidth</span>(<span class="number">1.0f</span>)<span class="comment">//占满剩余空间</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用 Unreal Slate 构建窗口，通过代码的属性结构来描述 UI 的构成和配置。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201124215104568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM0MTIzOTE=,size_16,color_FFFFFF,t_70#pic_center" alt="alt"></p><h2 id="DockTab-Layout"><a href="#DockTab-Layout" class="headerlink" title="DockTab Layout"></a>DockTab Layout</h2><p><a href="https://yaksue.blog.csdn.net/article/details/109321869">https://yaksue.blog.csdn.net/article/details/109321869</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FTestLayoutWindowModule::StartupModule</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module</span></span><br><span class="line"></span><br><span class="line">FTestLayoutWindowStyle::<span class="built_in">Initialize</span>();</span><br><span class="line">FTestLayoutWindowStyle::<span class="built_in">ReloadTextures</span>();</span><br><span class="line"></span><br><span class="line">FTestLayoutWindowCommands::<span class="built_in">Register</span>();</span><br><span class="line"></span><br><span class="line">PluginCommands = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> FUICommandList);</span><br><span class="line"></span><br><span class="line">PluginCommands-&gt;<span class="built_in">MapAction</span>(</span><br><span class="line">FTestLayoutWindowCommands::<span class="built_in">Get</span>().OpenLayoutWindow,</span><br><span class="line">FExecuteAction::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FTestLayoutWindowModule::PluginButtonClicked),</span><br><span class="line"><span class="built_in">FCanExecuteAction</span>());</span><br><span class="line"></span><br><span class="line">FLevelEditorModule&amp; LevelEditorModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FLevelEditorModule&gt;(<span class="string">&quot;LevelEditor&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">TSharedPtr&lt;FExtender&gt; MenuExtender = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FExtender</span>());</span><br><span class="line">MenuExtender-&gt;<span class="built_in">AddMenuExtension</span>(<span class="string">&quot;WindowLayout&quot;</span>, EExtensionHook::After, PluginCommands, FMenuExtensionDelegate::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FTestLayoutWindowModule::AddMenuExtension));</span><br><span class="line"></span><br><span class="line">LevelEditorModule.<span class="built_in">GetMenuExtensibilityManager</span>()-&gt;<span class="built_in">AddExtender</span>(MenuExtender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">TSharedPtr&lt;FExtender&gt; ToolbarExtender = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> FExtender);</span><br><span class="line">ToolbarExtender-&gt;<span class="built_in">AddToolBarExtension</span>(<span class="string">&quot;Settings&quot;</span>, EExtensionHook::After, PluginCommands, FToolBarExtensionDelegate::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FTestLayoutWindowModule::AddToolbarExtension));</span><br><span class="line"></span><br><span class="line">LevelEditorModule.<span class="built_in">GetToolBarExtensibilityManager</span>()-&gt;<span class="built_in">AddExtender</span>(ToolbarExtender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">RegisterNomadTabSpawner</span>(TestLayoutWindowTabName, FOnSpawnTab::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FTestLayoutWindowModule::OnSpawnPluginTab))</span><br><span class="line">.<span class="built_in">SetDisplayName</span>(<span class="built_in">LOCTEXT</span>(<span class="string">&quot;FTestLayoutWindowTabTitle&quot;</span>, <span class="string">&quot;TestLayoutWindow&quot;</span>))</span><br><span class="line">.<span class="built_in">SetMenuType</span>(ETabSpawnerMenuType::Hidden);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ! InnerTab的内容：</span></span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">RegisterNomadTabSpawner</span>(InnerTabName, FOnSpawnTab::<span class="built_in">CreateLambda</span>([](<span class="type">const</span> FSpawnTabArgs&amp; SpawnTabArgs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="built_in">SNew</span>(SDockTab)</span><br><span class="line">.<span class="built_in">TabRole</span>(ETabRole::NomadTab)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(STextBlock)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromString</span>(<span class="string">&quot;InnerTab&quot;</span>))</span><br><span class="line">];</span><br><span class="line">&#125;))</span><br><span class="line">.<span class="built_in">SetDisplayName</span>(<span class="built_in">LOCTEXT</span>(<span class="string">&quot;InnerTab&quot;</span>, <span class="string">&quot;InnerTab&quot;</span>))</span><br><span class="line">.<span class="built_in">SetMenuType</span>(ETabSpawnerMenuType::Hidden);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ! InnerTab2的内容：</span></span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">RegisterNomadTabSpawner</span>(InnerTabName2, FOnSpawnTab::<span class="built_in">CreateLambda</span>([](<span class="type">const</span> FSpawnTabArgs&amp; SpawnTabArgs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="built_in">SNew</span>(SDockTab)</span><br><span class="line">.<span class="built_in">TabRole</span>(ETabRole::NomadTab)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(STextBlock)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromString</span>(<span class="string">&quot;InnerTab2&quot;</span>))</span><br><span class="line">];</span><br><span class="line">&#125;))</span><br><span class="line">.<span class="built_in">SetDisplayName</span>(<span class="built_in">LOCTEXT</span>(<span class="string">&quot;InnerTab2&quot;</span>, <span class="string">&quot;InnerTab2&quot;</span>))</span><br><span class="line">.<span class="built_in">SetMenuType</span>(ETabSpawnerMenuType::Hidden);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;核心处理是在插件加载的时候 <code>StartupModule</code> 调用 <code>RegisterNomadTabSpawner</code> 注册 Tab</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FTestLayoutWindowModule::PluginButtonClicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">InvokeTab</span>(TestLayoutWindowTabName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;点击 GUI 会触发 Tab 生成，调用 <code>OnSpawnPluginTab</code> 方法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedRef&lt;SDockTab&gt; <span class="title">FTestLayoutWindowModule::OnSpawnPluginTab</span><span class="params">(<span class="type">const</span> FSpawnTabArgs&amp; SpawnTabArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//原来的分页：</span></span><br><span class="line"><span class="type">const</span> TSharedRef&lt;SDockTab&gt; NomadTab = <span class="built_in">SNew</span>(SDockTab)</span><br><span class="line">.<span class="built_in">TabRole</span>(ETabRole::NomadTab);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建TabManager</span></span><br><span class="line"><span class="keyword">if</span> (!TabManager.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">TabManager = FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">NewTabManager</span>(NomadTab);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建布局：</span></span><br><span class="line"><span class="keyword">if</span> (!TabManagerLayout.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">TabManagerLayout = FTabManager::<span class="built_in">NewLayout</span>(<span class="string">&quot;TestLayoutWindow&quot;</span>)</span><br><span class="line">-&gt;<span class="built_in">AddArea</span></span><br><span class="line">(</span><br><span class="line">FTabManager::<span class="built_in">NewPrimaryArea</span>()</span><br><span class="line">-&gt;<span class="built_in">SetOrientation</span>(Orient_Vertical)</span><br><span class="line">-&gt;<span class="built_in">Split</span></span><br><span class="line">(</span><br><span class="line">FTabManager::<span class="built_in">NewStack</span>()</span><br><span class="line">-&gt;<span class="built_in">SetSizeCoefficient</span>(<span class="number">.4</span>f)</span><br><span class="line">-&gt;<span class="built_in">AddTab</span>(InnerTabName, ETabState::OpenedTab)</span><br><span class="line">)</span><br><span class="line">-&gt;<span class="built_in">Split</span></span><br><span class="line">(</span><br><span class="line">FTabManager::<span class="built_in">NewStack</span>()</span><br><span class="line">-&gt;<span class="built_in">SetSizeCoefficient</span>(<span class="number">.4</span>f)</span><br><span class="line">-&gt;<span class="built_in">AddTab</span>(InnerTabName2, ETabState::OpenedTab)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从布局中恢复得到控件</span></span><br><span class="line">TSharedRef&lt;SWidget&gt; TabContents = TabManager-&gt;<span class="built_in">RestoreFrom</span>(TabManagerLayout.<span class="built_in">ToSharedRef</span>(), <span class="built_in">TSharedPtr</span>&lt;SWindow&gt;()).<span class="built_in">ToSharedRef</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置内容控件</span></span><br><span class="line">NomadTab-&gt;<span class="built_in">SetContent</span>(</span><br><span class="line">TabContents</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NomadTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这里将之前注册的 Tab 唤起。</p></blockquote><h2 id="Viewport"><a href="#Viewport" class="headerlink" title="Viewport"></a>Viewport</h2><p><a href="https://yaksue.blog.csdn.net/article/details/109258860">https://yaksue.blog.csdn.net/article/details/109258860</a></p><blockquote><p>&emsp;&emsp;引入默认的 <code>SEditorViewport</code> 类<br>&emsp;&emsp;然后 override 方法 <code>MakeEditorViewportClient</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedRef&lt;FEditorViewportClient&gt; <span class="title">STestLevelEditorViewport::MakeEditorViewportClient</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TSharedPtr&lt;FEditorViewportClient&gt; EditorViewportClient = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FEditorViewportClient</span>(<span class="literal">nullptr</span>));</span><br><span class="line"><span class="keyword">return</span> EditorViewportClient.<span class="built_in">ToSharedRef</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;然后Slate 代码直接使用 <code>SNew(STestLevelEditorViewport)</code> 初始化界面即可。<br>&emsp;&emsp;不过这个方式沿用了 Viewport ，如何构建一个自定义 Viewport 呢？</p></blockquote><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedRef&lt;FEditorViewportClient&gt; <span class="title">STestEditorViewport::MakeEditorViewportClient</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PreviewScene = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FPreviewScene</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//向预览场景中加一个测试模型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//读取模型</span></span><br><span class="line">UStaticMesh* SM = <span class="built_in">LoadObject</span>&lt;UStaticMesh&gt;(<span class="literal">NULL</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;StaticMesh&#x27;/Engine/EngineMeshes/Cube.Cube&#x27;&quot;</span>), <span class="literal">NULL</span>, LOAD_None, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line">UStaticMeshComponent* SMC = <span class="built_in">NewObject</span>&lt;UStaticMeshComponent&gt;();</span><br><span class="line">SMC-&gt;<span class="built_in">SetStaticMesh</span>(SM);</span><br><span class="line"><span class="comment">//向预览场景中增加组件</span></span><br><span class="line">PreviewScene-&gt;<span class="built_in">AddComponent</span>(SMC, FTransform::Identity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TSharedPtr&lt;FEditorViewportClient&gt; EditorViewportClient = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FEditorViewportClient</span>(<span class="literal">nullptr</span>, PreviewScene.<span class="built_in">Get</span>()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EditorViewportClient.<span class="built_in">ToSharedRef</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;新建一个自定义的 <code>FPreviewScene</code> ，可以将物体实例化添加到场景当中。<br>&emsp;&emsp;将 <code>PreviewScene</code> 传入到  <code>FEditorViewportClient</code> 中，这样 Viewport 就显示独立的场景。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedPtr&lt;SWidget&gt; <span class="title">STestEditorViewport::MakeViewportToolbar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SNew</span>(SCommonEditorViewportToolbarBase, <span class="built_in">SharedThis</span>(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用上面的代码可以构建出默认 Viewport 的 Toolbar。</p></blockquote><h2 id="GraphEditor"><a href="#GraphEditor" class="headerlink" title="GraphEditor"></a>GraphEditor</h2><p><a href="https://yaksue.blog.csdn.net/article/details/107945507">https://yaksue.blog.csdn.net/article/details/107945507</a><br><a href="https://yaksue.blog.csdn.net/article/details/108020797">https://yaksue.blog.csdn.net/article/details/108020797</a><br><a href="https://yaksue.blog.csdn.net/article/details/108227439">https://yaksue.blog.csdn.net/article/details/108227439</a><br><a href="https://yaksue.blog.csdn.net/article/details/109347063">https://yaksue.blog.csdn.net/article/details/109347063</a></p><h2 id="EditorMode"><a href="#EditorMode" class="headerlink" title="EditorMode"></a>EditorMode</h2><!-- TODO -->]]></content>
    
    <summary type="html">
    
      YakSue 工具开发文章学习
    
    </summary>
    
      <category term="游戏开发" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unreal" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/C/"/>
    
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
      <category term="ࠃUnreal" scheme="https://blog.l0v0.com/tags/%E0%A0%83Unreal/"/>
    
  </entry>
  
  <entry>
    <title>Maya C++ pyd 模块开发</title>
    <link href="https://blog.l0v0.com/posts/ce449c32.html"/>
    <id>https://blog.l0v0.com/posts/ce449c32.html</id>
    <published>2022-07-14T02:52:30.000Z</published>
    <updated>2022-08-11T11:40:18.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作者: <a href="http://tw.l0v0.com/#%F0%9F%91%A8%E2%80%8D%F0%9F%92%BBsonictk">👨‍💻sonictk</a></p><p><a href="https://github.com/sonictk/maya_python_c_extension">https://github.com/sonictk/maya_python_c_extension</a></p><blockquote><p>&emsp;&emsp;这篇文章也是参考 sonictk 大佬的提供的 pyd 开发文章。<br>&emsp;&emsp;文章也提到之前的 hot reload 方案已经解决了很多 C++ 开发困难的问题。<br>&emsp;&emsp;然而还是有很多情况需要开发一个 python 的 C++ 模块实现 Maya C++ API 的 调用。<br>&emsp;&emsp;这个情况有点像是 Unreal 暴露 C++ API 到 Python 一样。</p></blockquote><p><a href="./Maya 编译 c 相关 Python 库 &amp; pyd 编译.html">1a24f2d2</a></p><blockquote><p>&emsp;&emsp;之前我也写过关于 Maya pyd 编译的文章，但是这个文章是用 Cython 自动生成 C 代码编译实现的，这次是手写 pyd。</p></blockquote><h2 id="什么是-pyd"><a href="#什么是-pyd" class="headerlink" title="什么是 pyd"></a>什么是 pyd</h2><blockquote><p>&emsp;&emsp;pyd 本质上也是一个 dll 文件，就像 Maya 插件的 mll 一样。<br>&emsp;&emsp;只是 pyd 规定了一些暴露规则，从而让 python 解释器可以读取。<br>&emsp;&emsp;这也是 Python 称之为胶水语言的一大特点，它可以无缝和 C++ 编译的模块进行交互。<br>&emsp;&emsp;因此很多 C++ 的包 比如 Qt 等可以暴露接口到 Python 实现调用。</p></blockquote><h2 id="pyd-hello-world-案例"><a href="#pyd-hello-world-案例" class="headerlink" title="pyd hello world 案例"></a>pyd hello world 案例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Python.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;maya/MGlobal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> MAYA_PYTHON_C_EXT_DOCSTRING[] = <span class="string">&quot;An example Python C extension that makes use of Maya functionality.&quot;</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> HELLO_WORLD_MAYA_DOCSTRING[] = <span class="string">&quot;Says hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(timmyliang): 调用 MGlobal API 打印 Python 传递的字符串</span></span><br><span class="line"><span class="function"><span class="type">static</span> PyObject *<span class="title">pyHelloWorldMaya</span><span class="params">(PyObject *<span class="keyword">module</span>, PyObject *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *inputString;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">PyArg_ParseTuple</span>(args, <span class="string">&quot;s&quot;</span>, &amp;inputString))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PyGILState_STATE pyGILState = <span class="built_in">PyGILState_Ensure</span>();</span><br><span class="line"></span><br><span class="line">MGlobal::<span class="built_in">displayInfo</span>(inputString);</span><br><span class="line"></span><br><span class="line">PyObject *result = <span class="built_in">Py_BuildValue</span>(<span class="string">&quot;s&quot;</span>, inputString);</span><br><span class="line"></span><br><span class="line"><span class="built_in">PyGILState_Release</span>(pyGILState);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(timmyliang): 定义模块的函数列表</span></span><br><span class="line"><span class="type">static</span> PyMethodDef mayaPythonCExtMethods[] = &#123;</span><br><span class="line">&#123;<span class="string">&quot;hello_world_maya&quot;</span>, pyHelloWorldMaya, METH_VARARGS, HELLO_WORLD_MAYA_DOCSTRING&#125;,</span><br><span class="line">&#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>&#125; <span class="comment">// <span class="doctag">NOTE:</span> (sonictk) Sentinel value for Python</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(timmyliang): python2 初始化函数规范 init&lt;module_name&gt; </span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> PY_MAJOR_VERSION == 2</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">PyMODINIT_FUNC <span class="title">initpy_hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Py_InitModule3</span>(<span class="string">&quot;py_hello&quot;</span>,</span><br><span class="line">  mayaPythonCExtMethods,</span><br><span class="line">  MAYA_PYTHON_C_EXT_DOCSTRING);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NOTE(timmyliang): python3 初始化函数规范 PyInit_&lt;module_name&gt; </span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> PY_MAJOR_VERSION == 3</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">PyMODINIT_FUNC <span class="title">PyInit_py_hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> PyModuleDef hello_module = &#123;</span><br><span class="line">PyModuleDef_HEAD_INIT,</span><br><span class="line"><span class="string">&quot;py_hello&quot;</span>, <span class="comment">// Module name to use with Python import statements</span></span><br><span class="line">MAYA_PYTHON_C_EXT_DOCSTRING, <span class="comment">// Module description</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">mayaPythonCExtMethods <span class="comment">// Structure that defines the methods of the module</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">PyModule_Create</span>(&amp;hello_module);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的代码就是一个小案例，将 C++ 编译成 pyd 给 python 调用。<br>&emsp;&emsp;并且这里引用了 Maya 的 API ，因此只能使用 Maya 的 Python Interpreter (mayapy.exe) 进行加载。<br>&emsp;&emsp;如果使用其他 Python 导入这个模块会出现如下的错误</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent <span class="keyword">call</span> last):</span><br><span class="line">  File &quot;d:/Obsidian/Personal/<span class="number">2</span>_Area/📝Blog/CG/Maya/C++/test_load.py&quot;, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    import py_hello</span><br><span class="line"><span class="function">ImportError: <span class="title">DLL</span> <span class="title">load</span> <span class="title">failed</span> <span class="title">while</span> <span class="title">importing</span> <span class="title">py_hello</span>: 找不到指定的程序。</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;pyd 的 C++ 代码包含三个部分</p><ol><li>python 定义的函数</li><li>函数列表定义 (需要传入上面的 C++ 编写的 Python 函数)</li><li>模块定义 (传入上面的 函数列表)</li></ol></blockquote><blockquote><p>&emsp;&emsp;最后生成模块部分，Python2 和 Python3 暴露的 API 不一致，可以用宏来区分。</p></blockquote><blockquote><p>&emsp;&emsp;编译这个 cpp 需要加上 Maya include 目录的头文件，以及链接 Maya lib 的静态库文件。<br>&emsp;&emsp;另外编译 pyd 需要特别注意的是，它也需要想 mll 一样暴露出初始化的函数。<br>&emsp;&emsp;在 python2 下是 <code>init&lt;module_name&gt;</code> 开头，在 python3 下是 <code>PyInit_&lt;module_name&gt;</code> 开头。<br>&emsp;&emsp;在 cpp 里面配置编译环境是个相当让人头疼的问题。<br>&emsp;&emsp;我在自己的 <a href="https://github.com/FXTD-ODYSSEY/CMakeMaya">CMakeMaya</a> 库里面已经配置好了编译用的环境，<br>&emsp;&emsp;具体的使用方法可以看 readme 或者参考我的文章 <a href="./Maya CMake 构建 C++ 插件编译环境.html">5875a169</a> </p></blockquote><blockquote><p>&emsp;&emsp;在我提供的环境下执行 <code>doit c -p pyd -v 2020</code> 即可编译出 pyd 到 <code>plug-ins\Release\maya2022\pyd\py_hello.pyd</code><br>&emsp;&emsp;需要注意 pyd 在不同的平台不同Maya版本都需要单独编译。这里我提供了编译好给 Windows64 Maya2020 的 <a href="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/ce449c32/py_hello.pyd">pyd</a> </p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/ce449c32/ea63da79573f07279f606f9b77b16f21.jpeg" alt="image"></p><h3 id="导入-pyd-引入-Maya-C-节点"><a href="#导入-pyd-引入-Maya-C-节点" class="headerlink" title="导入 pyd 引入 Maya C++ 节点"></a>导入 pyd 引入 Maya C++ 节点</h3><blockquote><p>&emsp;&emsp;在相应的版本执行就可以看到如期触发了 maya API 的方法。<br>&emsp;&emsp;也可以用这个方式注册 Maya 的节点和 Mel 命令，具体可以看 <a href="https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/pyd/pyDeformer">pyDeformer</a> 的代码。<br>&emsp;&emsp;只是由于没有 <code>initializePlugin</code> 拿不到传进来的 <code>MObject</code> 实例化 <code>MFnPlugin</code>。<br>&emsp;&emsp;我测试的 py_deformer 用了 <code>MFnPlugin::findPlug</code> 拿到内置插件 <code>matrixNodes</code> 提供的 MObject 来注册节点。<br>&emsp;&emsp;答案是可以实现的，而且新加入的节点也会显示在 <code>matrixNodes</code> 上。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/ce449c32/877d402bb3650b6b9d965467d2811829.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;这种骚操作不建议使用，而且也不知道会不会有什么 BUG 导致 Maya 崩溃。<br>&emsp;&emsp;另外没有办法触发 <code>uninitializePlugin</code> 来注销这个节点的注册。</p></blockquote><h3 id="pyd-mll-缝合怪"><a href="#pyd-mll-缝合怪" class="headerlink" title="pyd mll 缝合怪"></a>pyd mll 缝合怪</h3><blockquote><p>&emsp;&emsp;基于上面的测试我发现还可以生成出既是 Maya 插件又是 Python 模块的 缝合怪文件。<br>&emsp;&emsp;因为 C++ 只要编译的时候 export 出对应的方法就可以加载。</p></blockquote><blockquote><p>&emsp;&emsp;只是 Python 加载二进制包要求文件后缀为 pyd ，Maya 加载二进制插件要求文件命名为 mll 才可以。<br>&emsp;&emsp;解决这个问题，可以用软连接或者拆分成两个文件来实现，经过测试是可以的，具体可以看 <a href="https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/pyd/pyCommand">pyCommand</a> 的 <a href="https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/pyd/scripts/test_py_deformer.py">测试代码</a> 。</p></blockquote><h2 id="使用-mll-嵌入-python-模块"><a href="#使用-mll-嵌入-python-模块" class="headerlink" title="使用 mll 嵌入 python 模块"></a>使用 mll 嵌入 python 模块</h2><blockquote><p>&emsp;&emsp;上面主要实现按照 python 的规范加载包的操作，<code>sonitck</code> 的文章还提供了一个方案，加载 mll 获取到 python 包的方式。<br>&emsp;&emsp;做法也不复杂，就是在 <code>initializePlugin</code> 的时候加上加上 C++ 的模块。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Python.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;maya/MFnPlugin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;maya/MGlobal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *kAUTHOR = <span class="string">&quot;TimmyLiang&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *kVERSION = <span class="string">&quot;1.0.0&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *kREQUIRED_API_VERSION = <span class="string">&quot;Any&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> HELLO_WORLD_MAYA_DOCSTRING[] = <span class="string">&quot;Says hello world!&quot;</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> MAYA_PYTHON_C_EXT_DOCSTRING[] = <span class="string">&quot;An example Python C extension that makes use of Maya functionality.&quot;</span>;</span><br><span class="line"></span><br><span class="line">PyObject *<span class="keyword">module</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> PyObject *<span class="title">pyHelloWorldMaya</span><span class="params">(PyObject *<span class="keyword">module</span>, PyObject *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *inputString;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">PyArg_ParseTuple</span>(args, <span class="string">&quot;s&quot;</span>, &amp;inputString)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">PyGILState_STATE pyGILState = <span class="built_in">PyGILState_Ensure</span>();</span><br><span class="line">MGlobal::<span class="built_in">displayInfo</span>(inputString);</span><br><span class="line">PyObject *result = <span class="built_in">Py_BuildValue</span>(<span class="string">&quot;s&quot;</span>, inputString);</span><br><span class="line"><span class="built_in">PyGILState_Release</span>(pyGILState);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> PyMethodDef mayaPythonCExtMethods[] = &#123;</span><br><span class="line">&#123;<span class="string">&quot;hello_world_maya&quot;</span>, pyHelloWorldMaya, METH_VARARGS, HELLO_WORLD_MAYA_DOCSTRING&#125;,</span><br><span class="line">&#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">MStatus <span class="title">initializePlugin</span><span class="params">(MObject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">MFnPlugin <span class="title">plugin</span><span class="params">(obj, kAUTHOR, kVERSION, kREQUIRED_API_VERSION)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Py_IsInitialized</span>())</span><br><span class="line"><span class="built_in">Py_Initialize</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Py_IsInitialized</span>())</span><br><span class="line">&#123;</span><br><span class="line">PyGILState_STATE pyGILState = <span class="built_in">PyGILState_Ensure</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(TimmyLiang): python2 直接初始化模块就不会变成 built-in 模块</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> PY_MAJOR_VERSION == 2</span></span><br><span class="line"><span class="keyword">module</span> = <span class="built_in">Py_InitModule3</span>(<span class="string">&quot;mll_py&quot;</span>,</span><br><span class="line">mayaPythonCExtMethods,</span><br><span class="line">MAYA_PYTHON_C_EXT_DOCSTRING);</span><br><span class="line"><span class="comment">// NOTE(TimmyLiang): python3 用官方的方式添加模块不行，可能是因为 Py_Initialize 已经执行了</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> PY_MAJOR_VERSION == 3</span></span><br><span class="line"><span class="comment">// NOTE(TimmyLiang): 参考 https://github.com/LinuxCNC/linuxcnc/issues/825 将模块加到 sys.modules 里面</span></span><br><span class="line"><span class="type">static</span> PyModuleDef hello_module = &#123;</span><br><span class="line">PyModuleDef_HEAD_INIT,</span><br><span class="line"><span class="string">&quot;mll_py&quot;</span>, <span class="comment">// Module name to use with Python import statements</span></span><br><span class="line">MAYA_PYTHON_C_EXT_DOCSTRING, <span class="comment">// Module description</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">mayaPythonCExtMethods <span class="comment">// Structure that defines the methods of the module</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> = <span class="built_in">PyModule_Create</span>(&amp;hello_module);</span><br><span class="line">PyObject *sys_modules = <span class="built_in">PyImport_GetModuleDict</span>();</span><br><span class="line"><span class="built_in">PyDict_SetItemString</span>(sys_modules, <span class="string">&quot;mll_py&quot;</span>, <span class="keyword">module</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">MGlobal::<span class="built_in">displayInfo</span>(<span class="string">&quot;Registered Python bindings!&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">module</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> MStatus::kFailure;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// NOTE(timmyliang): 增加引用计数(确保不会 gc)</span></span><br><span class="line"><span class="built_in">Py_INCREF</span>(<span class="keyword">module</span>);</span><br><span class="line"><span class="built_in">PyGILState_Release</span>(pyGILState);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MStatus::kSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">MStatus <span class="title">uninitializePlugin</span><span class="params">(MObject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MStatus status;</span><br><span class="line">  <span class="comment">// NOTE(timmyliang): 减少引用计数</span></span><br><span class="line"><span class="built_in">Py_DECREF</span>(<span class="keyword">module</span>);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的代码兼容 python2 python3 版本。<br>&emsp;&emsp;python2 直接用默认的 <code>Py_InitModule</code> 方法就可以添加，如果在 Python 打印模块会提示 <code>&lt;module &#39;mll_py&#39; (built-in)&gt;</code><br>&emsp;&emsp;但是 python3 下面不行，后来查找了 Github 的 <a href="https://github.com/LinuxCNC/linuxcnc/issues/825">issue</a> 通过将模块添加到 <code>sys.modules</code> 下面解决问题。<br>&emsp;&emsp;只是模块打印就是普通的模块。<br>&emsp;&emsp;那为什么将模块放到 sys.modules 就可以了，这 Python 的 import 机制有关。 <a href="./Python - Import 机制.html">5e6e2bc7</a></p></blockquote><blockquote><p>&emsp;&emsp;这个方式可以将一些 C++ 的 API 暴露给 Python，只是这个操作需要更多的说明。<br>&emsp;&emsp;否则没人知道这个 mll 居然添加一个 Python 模块。</p></blockquote><h2 id="pybind11-自动绑定"><a href="#pybind11-自动绑定" class="headerlink" title="pybind11 自动绑定"></a>pybind11 自动绑定</h2><blockquote><p>&emsp;&emsp;通过上面一顿操作，也可以深刻体会到如果跨版本兼容 C++ 需要做很多宏的判断，相当繁琐。<br>&emsp;&emsp;包括 Python2 和 Python3 暴露的方法名不一样，需要在 CMake 上进行判断。<br>&emsp;&emsp;使用 pybind11 进行转换相对方便许多</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Python.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;maya/MGlobal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pybind11/pybind11.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://zhuanlan.zhihu.com/p/80884925</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">displayInfo</span><span class="params">(<span class="type">char</span> *inputString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MGlobal::<span class="built_in">displayInfo</span>(inputString);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">PYBIND11_MODULE</span>( pybind11cpp, m )&#123;</span><br><span class="line">    m.<span class="built_in">doc</span>() = <span class="string">&quot;pybind11 example&quot;</span>;</span><br><span class="line">    m.<span class="built_in">def</span>(<span class="string">&quot;display_info&quot;</span>, &amp;displayInfo, <span class="string">&quot;Maya Display Info&quot;</span> ,pybind11::<span class="built_in">arg</span>(<span class="string">&quot;inputString&quot;</span>) = <span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;pybind11 会自动将 Python 的参数进行转换<br>&emsp;&emsp;这样只要将纯粹的 C++ 函数放入到 <code>PYBIND11_MODULE</code> 宏<br>&emsp;&emsp;并且 pybind11 的 2.9 版本支持 python2 python3 的 pyd 编译。<br>&emsp;&emsp;只要在 cmake 里面配置 <code>/export</code> 对应的方法即可。</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(Pybind11 REQUIRED) </span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(pybind11cpp) <span class="comment">#project name</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB SRCS <span class="string">&quot;pybind11/*.cpp&quot;</span> <span class="string">&quot;pybind11/*.h&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;MAYA_INCLUDE_DIR&#125;</span> <span class="variable">$&#123;MAYA_PYTHON_INCLUDE_DIR&#125;</span> <span class="variable">$&#123;PYBIND11_INCLUDE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;MAYA_LIBRARY_DIR&#125;</span>) <span class="comment">#specifies a directory where a linker should search for libraries</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> SHARED <span class="variable">$&#123;SRCS&#125;</span>) <span class="comment">#Add a dynamic library to the project using the specified source files</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pybind11_add_module($&#123;PROJECT_NAME&#125; $&#123;SRCS&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;MAYA_LIBRARIES&#125;</span>) <span class="comment">#specifies list of libraries to use when linking the terget and its dependents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$&#123;MAYA_VERSION&#125;</span> <span class="keyword">GREATER</span> <span class="number">2020</span>) </span><br><span class="line">    <span class="keyword">set</span>(PYBIND_LINK_FLAGS <span class="string">&quot;/export:PyInit_pybind11cpp&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>() </span><br><span class="line">    <span class="keyword">set</span>(PYBIND_LINK_FLAGS <span class="string">&quot;/export:initpybind11cpp&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">set_target_properties</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PROPERTIES</span><br><span class="line">    LINK_FLAGS <span class="variable">$&#123;PYBIND_LINK_FLAGS&#125;</span></span><br><span class="line">    SUFFIX <span class="string">&quot;.pyd&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;pybind11 可以使用 <code>pybind11_add_module</code> 来生成 pyd<br>&emsp;&emsp;但是它是自动查找 Python 环境，指定 Maya 的 Python 需要额外的配置。<br>&emsp;&emsp;所以我就不用这个，自己来配置好了。</p></blockquote><blockquote><p>&emsp;&emsp;通过上面的方式可以大大简化 C++ 的编写。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;以上就是 pyd 编译的各种折腾结果。<br>&emsp;&emsp;社区里面值得说道的有 <a href="https://github.com/mottosso/cmdc">cmdc</a> 基于 pybind11 编译的二次封装 C++ API 库。</p></blockquote><blockquote><p>&emsp;&emsp;Python 调用 C++ 还有利用 <code>ctypes</code> 库访问 dll 的方式<br>&emsp;&emsp;后续也可以实验一下在 Python 中从 dll 里面调用 function 实现 参考:<a href="https://github.com/Autodesk/animx">https://github.com/Autodesk/animx</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      Python C++ Extension
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/CG/Maya/C/"/>
    
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Unreal C++ VScode 配置</title>
    <link href="https://blog.l0v0.com/posts/51c731db.html"/>
    <id>https://blog.l0v0.com/posts/51c731db.html</id>
    <published>2022-07-12T06:47:30.000Z</published>
    <updated>2022-08-11T11:40:18.127Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;这次尝试在 VScode 进行引擎编译。<br>&emsp;&emsp;网上一查发现，官方其实有做支持的，具体可以参考这篇文章 <a href="http://jollymonsterstudio.com/2018/11/02/unreal-c-with-visual-studio-code">链接</a><br>&emsp;&emsp;这篇文章传播甚广，可以参照和这个方式配置 VScode 编译。</p></blockquote><p><a href="https://www.youtube.com/watch?v=fydvKedIxKk">https://www.youtube.com/watch?v=fydvKedIxKk</a><br><a href="https://github.com/boocs/ue4-tellisense-fixes">https://github.com/boocs/ue4-tellisense-fixes</a></p><h2 id="C-编译过程"><a href="#C-编译过程" class="headerlink" title="C++ 编译过程"></a>C++ 编译过程</h2><p>深度参考学习这边文章 <a href="https://ericlemes.com/2018/11/21/compiling-c-code/">https://ericlemes.com/2018/11/21/compiling-c-code/</a><br>鉴于本人的 C++ 水平一般，建议阅读原文</p><h3 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h3><blockquote><p>&emsp;&emsp;C++ 编译可能会用到下面的文件。</p></blockquote><ul><li>.cpp 文件编译成 .obj</li><li>生成静态库 .lib</li><li>生成动态库 .dll </li><li>生成可执行文件 executable</li></ul><h3 id="VS-工具链"><a href="#VS-工具链" class="headerlink" title="VS 工具链"></a>VS 工具链</h3><blockquote><p>&emsp;&emsp;.sln 全称是 solution 解决方案，是 VS 的项目配置文件。 (整合了 .vcxproj .csproj)<br>&emsp;&emsp;他可以同时配置多个项目，最后通过 MSBuild 来构建<br>&emsp;&emsp;sln 包含了项目的各种头文件依赖，库引用等描述，执行顺序，通过这个 IDE 就知道怎么编译你的项目。</p></blockquote><blockquote><p>&emsp;&emsp;Xcode 的情况也是类似的。<br>&emsp;&emsp;其中比较特别的时 CMake ，通过 CMakeLists.txt 文件可以根据不同平台生成工程配置文件。</p></blockquote><h3 id="第一步-编译"><a href="#第一步-编译" class="headerlink" title="第一步 编译"></a>第一步 编译</h3><p>输入:</p><ul><li>Defines</li><li>Include 文件夹路径Include directories</li><li>预编译头文件 (如果有用到的话)</li><li>源代码</li></ul><p>输出:</p><ul><li>.obj 文件</li></ul><blockquote><p>&emsp;&emsp;MSBuild 使用 CL.exe 进行 C++ 编译。 可能的路径 <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\cl.exe</code><br>&emsp;&emsp;需要安装 VS 或者用 choco 来安装</p></blockquote><blockquote><p>&emsp;&emsp;编译的时候会根据 宏定义(比如 <code>#ifdef</code>)动态 改变编译行为<br>&emsp;&emsp;通过这个方式可以在不同的平台编译出不同的行为。<br>&emsp;&emsp;C++ 最终编译成对应平台的二进制，这个设计和 Java C# 都不同。</p></blockquote><blockquote><p>&emsp;&emsp;头文件最终会拼接到 C++ 里面进行编译，所以需要加上 <code>#pragma once</code> 或者 <code>#if</code> 来避免多次定义。<br>&emsp;&emsp;预编译头则可以生成 <code>.pch</code> 文件实现头文件复用。</p></blockquote><h3 id="第二步-链接"><a href="#第二步-链接" class="headerlink" title="第二步 链接"></a>第二步 链接</h3><p>输入:</p><ul><li>一些源码生成 .obj 文件</li><li>一些源码生成 .lib 文件</li><li>第三方的 lib 和 obj 文件</li></ul><p>输出:</p><ul><li>.dll 或者 .exe</li></ul><blockquote><p>&emsp;&emsp;这一步会将生成的中间文件合并成 dll 或者 exe<br>&emsp;&emsp;这个过程会完成很多优化的步骤，把不运行的部分清理掉。<br>&emsp;&emsp;最后会将一些平台的 lib 引入确保它在平台上可以运行，比如 wincrt (Windows C Runtime library) 等等<br>&emsp;&emsp;并且 lib 也有很多种类，有 release 版本和 debug 版本等等。</p></blockquote><h2 id="Unreal-Build-Tool"><a href="#Unreal-Build-Tool" class="headerlink" title="Unreal Build Tool"></a>Unreal Build Tool</h2><p><a href="https://ericlemes.com/2018/11/23/understanding-unreal-build-tool/">https://ericlemes.com/2018/11/23/understanding-unreal-build-tool/</a></p><h3 id="CS-配置文件说明"><a href="#CS-配置文件说明" class="headerlink" title="CS 配置文件说明"></a>CS 配置文件说明</h3><p><a href="https://www.bilibili.com/read/cv15297017/">https://www.bilibili.com/read/cv15297017/</a></p><blockquote><p>&emsp;&emsp;<code>Unreal</code> 使用自己开发的 <code>UnrealBuildTool</code> 来编译自己的 C++ 代码<br>&emsp;&emsp;与 <a href="http://tw.l0v0.com/#%F0%9F%92%BECMake">💾CMake</a> 类似的，<code>UnrealBuildTool</code> 会引用你需要在相应的模块添加 <code>.build.cs</code> 的代码文件来描述仓库链接的东西。<br>&emsp;&emsp;<code>.build.cs</code> 之上配套了 <code>Private</code> <code>Public</code> 文件夹分别放置暴露和不暴露的代码。<br>&emsp;&emsp;<code>.target.cs</code> 则可以用来定义输出的类型，有 <code>Game</code> <code>Editor</code> <code>Client</code> <code>Server</code> 几种类型。</p></blockquote><h3 id="生成工程文件"><a href="#生成工程文件" class="headerlink" title="生成工程文件"></a>生成工程文件</h3><blockquote><p>&emsp;&emsp;当我们对 <code>uproject</code> 文件右键生成 project 的时候背后执行就是 <code>UnrealBuildTool</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/51c731db/a897c17f0e8725cfdc7eef597edbc464.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/EpicGames/git/UnrealEngine-4.27/Engine/Binaries/DotNET/UnrealBuildTool.exe  -projectfiles -project=&quot;D:/EpicGames/test_plugin/test_plugin.uproject&quot; -game -engine -progress -log=&quot;D:\EpicGames\test_plugin/Saved/Logs/UnrealVersionSelector-2022.07.12-15.50.08.log&quot;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>UnrealBuildTool</code> 会根据 <code>.build.cs</code> 和 <code>.target.cs</code> 里面配置模块路径生成 sln 工程文件。</p></blockquote><h3 id="编译-C"><a href="#编译-C" class="headerlink" title="编译 C++"></a>编译 C++</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/51c731db/00ffce7125f34d3a93cc992f7d154c3c.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:/EpicGames/UE_4.27/Engine/Binaries/DotNET/UnrealBuildTool.exe Development Win64 -Project=&quot;D:/EpicGames/Unreal_Playground/Unreal_Playground.uproject&quot; -TargetType=Editor -Progress -NoEngineChanges -NoHotReloadFromIDE</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这个 <code>Build.bat</code> 背后还是调用 <code>UnrealBuildTool.exe</code> 通过它来编译 C++<br>&emsp;&emsp;上面生成工程时候 <code>.build.cs</code> 和 <code>.target.cs</code> 只是收集了路径。<br>&emsp;&emsp;现在会再次读取这两个文件来获取一些编译用的属性。<br>&emsp;&emsp;然根据配置解决各个模块的依赖关系。</p></blockquote><blockquote><p>&emsp;&emsp;最后会运行 <code>UnrealHeaderTool</code> 将 UObject 的一些特性注入到 UObject 的 cpp 文件当中。<br>&emsp;&emsp;这也说明了为什么需要引入 <code>.generated.h</code> 的头文件。<br>&emsp;&emsp;准备好了所有代码之后再调用相应的编译工具去构建 C++。</p></blockquote><h2 id="VScode-编译配置"><a href="#VScode-编译配置" class="headerlink" title="VScode 编译配置"></a>VScode 编译配置</h2><blockquote><p>&emsp;&emsp;了解了 C++ 编译和 Unreal 全家桶的编译逻辑之后。<br>&emsp;&emsp;我们终于可以回归到本篇文章的正题。</p></blockquote><p><a href="http://jollymonsterstudio.com/2018/11/02/unreal-c-with-visual-studio-code/">http://jollymonsterstudio.com/2018/11/02/unreal-c-with-visual-studio-code/</a></p><blockquote><p>&emsp;&emsp;按照这里提供的文章就可以用 Unreal 官方的方式配置好 <code>.vscode</code> 目录的编译配置。<br>&emsp;&emsp;后续只要 <code>Ctrl + shift + B</code> 就可以触发编译。<br>&emsp;&emsp;编译背后的逻辑就在上面解释了。</p></blockquote><blockquote><p>&emsp;&emsp;相应的我也可以用 python 脚本来触发编译。<br>&emsp;&emsp;sln 工程并不是必须的，不过 VS 有 VA 查找代码比较快。</p></blockquote>]]></content>
    
    <summary type="html">
    
      UnrealBuildTool 实现编译
    
    </summary>
    
      <category term="游戏开发" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unreal" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/C/"/>
    
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
      <category term="ࠃUnreal" scheme="https://blog.l0v0.com/tags/%E0%A0%83Unreal/"/>
    
  </entry>
  
  <entry>
    <title>Maya C++ mll hot reload 研究</title>
    <link href="https://blog.l0v0.com/posts/e6dc9087.html"/>
    <id>https://blog.l0v0.com/posts/e6dc9087.html</id>
    <published>2022-07-08T02:41:12.000Z</published>
    <updated>2022-08-11T11:40:18.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作者: <a href="http://tw.l0v0.com/#%F0%9F%91%A8%E2%80%8D%F0%9F%92%BBsonictk">👨‍💻sonictk</a></p><p><a href="https://sonictk.github.io/maya_hot_reload_example_public/">https://sonictk.github.io/maya_hot_reload_example_public/</a></p><blockquote><p>&emsp;&emsp;详细的说明 &amp; 教程在上面的链接。</p></blockquote><blockquote><p>&emsp;&emsp;Maya 用写 C++ 开发会比较痛苦，一方面是编译问题总是让人烦躁，另一方面加载了 mll 会导致占用，测试起来很不方便。<br>&emsp;&emsp;所以我之前推崇用 Python OpenMaya 做原型设计再转 C++<br>&emsp;&emsp;当然 sonictk 也提到 Fabric Engine 和 Maya Bifrost 使用的时 LLVM IR 的方案来实现 JIT 编译。<br>&emsp;&emsp;具体可以参考另一个项目 <a href="https://github.com/giordi91/babycpp">giordi91/babycpp</a></p></blockquote><h2 id="LLVM-热加载"><a href="#LLVM-热加载" class="headerlink" title="LLVM 热加载"></a>LLVM 热加载</h2><blockquote><p>&emsp;&emsp;<code>babycpp</code> 基于 LLVM 的解决方案我编译没有通过，代码报类型错误，因此也没有测试成功。<br>&emsp;&emsp;不过也了解了 LLVM 是怎么实现热更新的，运行逻辑和 Python 有点像，但是从本质上不一样。</p></blockquote><blockquote><p>&emsp;&emsp;传统的编译器需要有 前端 优化器 后端组成，一般前端是语言，通过 tokenize 和 AST 等方案将语言解析然后通过优化器生成后端的二进制文件。<br>&emsp;&emsp;LLVM 推出了 LLVM IR 中间语言，这样不管前端用什么语言开发，只要有对应的解析工具生成出 LLVM IR ，j就可以利用 LLVM IR 的优化生成 二进制机器语言高效运行。<br>&emsp;&emsp;<code>babycpp</code> 项目就基于 LLVM IR 的机制开发了一个自己的简化版 C++ 语言，通过 LLVM IR JIT 编译动态改变运行逻辑。</p></blockquote><blockquote><p>&emsp;&emsp;我目前个人理解来看，LLVM IR 模式和 Python 模式还是不一样的，Python 是调用自己编译好的模块来运行的，而 LLVM IR 是直接运行时(JIT)生成机器语言，JIT模式的运行效率有时候比 C++ 的静态编译还要高，因为 JIT 可以根据运行过程推断程序下一步的执行来优化非必要的运行逻辑，所以 LLVM IR 的性能要比 Python 好得多。其实我后面了解了一下 numba 提速 Python 的原理就是利用 LLVM 标准实现的。</p></blockquote><blockquote><p>&emsp;&emsp;不过也正如 sonictk 的文章所提到的，这个方案只能调用暴露的东西，无法对内存的细节进行处理。</p></blockquote><h2 id="基于-dll-加载"><a href="#基于-dll-加载" class="headerlink" title="基于 dll 加载"></a>基于 dll 加载</h2><p><a href="https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/hot_reload">https://github.com/FXTD-ODYSSEY/CMakeMaya/tree/master/projects/sonictk/hot_reload</a></p><blockquote><p>&emsp;&emsp;如果使用作者提供的 github 仓库的代码编译会有问题，作者的 thirdparty 仓库编译不通过。<br>&emsp;&emsp;所以我后面是根据作者文章的代码稍微调整组装到一起实现的。</p></blockquote><blockquote><p>&emsp;&emsp;详细讲解之前，我先用最简单的话说明这个 hotreload 方案。</p><ol><li>编译一个变形器的 mll 插件 和 带逻辑的 dll 文件</li><li>mll 加载之后会调用 dll 的function进行计算</li><li>修改逻辑之后重新编译 dll</li><li>mll 会重新健在最新的 dll 实现热更新。</li></ol></blockquote><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p><a href="https://sonictk.github.io/maya_hot_reload_example_public/getting_started/">https://sonictk.github.io/maya_hot_reload_example_public/getting_started/</a></p><blockquote><p>&emsp;&emsp;这篇文章非常好，不仅仅讲解了作者 hot reload 的思路，还附带了 windows lib dll 之间的运行逻辑等知识。</p></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/90f7f29f4db2deb75e3cad0924734436.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;代码结构上需要将插件分成两个部分，一个是调用 logic 生成 dll<br>&emsp;&emsp;另一个是 deformer 的代码生成 mll<br>&emsp;&emsp;具体编译配置通过 cmake 配置两个 project 实现。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── logic</span><br><span class="line">│   ├── logic.cpp                  dll 代码逻辑</span><br><span class="line">│   └── logic.h</span><br><span class="line">├── maya_deformer</span><br><span class="line">│   ├── deformer_platform.cpp      调用 &lt;windows.h&gt; API 加载 dll</span><br><span class="line">│   ├── deformer_platform.h</span><br><span class="line">│   ├── deformer.cpp               Maya 变形器 deform 调用 deform_platform 提供的方法</span><br><span class="line">│   ├── deformer.h</span><br><span class="line">│   ├── plugin_main.cpp            Maya mll 插件初始化函数</span><br><span class="line">│   └── plugin_main.h</span><br><span class="line">├── scripts</span><br><span class="line">│   └── test_deformer.py           测试插件是否修改</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── readme.md</span><br></pre></td></tr></table></figure><h3 id="dll-加载方案"><a href="#dll-加载方案" class="headerlink" title="dll 加载方案"></a>dll 加载方案</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/f1b64e13564f1397cbfbe5c238e4f86a.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;上面三个函数调用了 window API 提供的 <code>LoadLibrary</code> <code>FreeLibrary</code> <code>GetProcAddress</code> 加载 dll </p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/0d97569dbeef6f0dac0f5d7a4f960fe4.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;然后将分装到 <code>loadDeformerLogicDLL</code> 和 <code>unloadDeformerLogicDLL</code> 方法里面。<br>&emsp;&emsp;deformer 在触发计算的时候调用加载 dll。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/3b60f5c6dd778aca372e3c8525a0561f.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;这样每次触发节点运算的时候会自动按照 dll 的路径进行加载。</p></blockquote><blockquote><p>&emsp;&emsp;问题是怎么在 C++ 动态获取到当前 dll 的路径呢？</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/e6dc9087/38411b72f163aada48c813abf905b0d0.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;在插件加载的时候通过 <code>plugin.loadPath</code> 可以拿到当前 mll 加载的路径。<br>&emsp;&emsp;只要在同一个路径找 <code>logic.dll</code> 路径即可。</p></blockquote><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><h4 id="编译-dll-占用问题"><a href="#编译-dll-占用问题" class="headerlink" title="编译 dll 占用问题"></a>编译 dll 占用问题</h4><blockquote><p>&emsp;&emsp;需要注意的是，mll 被 Maya 加载会产生占用，mll 去加载 dll 也会造成占用。<br>&emsp;&emsp;只有执行 <code>unloadDeformerLogicDLL</code> 才会解除 dll 的占用<br>&emsp;&emsp;但是占用会造成编译失败。</p></blockquote><blockquote><p>&emsp;&emsp;于是我用 CMake 的 API 将旧的 <code>logic.dll</code> 改名叫 <code>logic_old.dll</code><br>&emsp;&emsp;windows 下被占用的文件还是可以改名的。<br>&emsp;&emsp;然后执行编译生成新的 <code>logic.dll</code><br>&emsp;&emsp;这时候需要手动触发 Maya 节点的更新，这样就会按照原来的路径加载新的 dll。</p></blockquote><blockquote><p>&emsp;&emsp;CMake 怎么判断 dll 是否占用，我也没有找到合适方法，于是我想到直接删除这个 dll 在判断 dll 是否存在的方法。</p></blockquote><h3 id="extern-问题"><a href="#extern-问题" class="headerlink" title="extern 问题"></a>extern 问题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> MString kPluginLogicLibraryPath;</span><br><span class="line"><span class="type">static</span> DeformerLogicLibrary kLogicLibrary;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;源码这两个变量用的是 static 静态变量。<br>&emsp;&emsp;但是不知道为什么在其他 cpp 文件里面调动得到的是不同的 内存 地址。</p></blockquote><p><a href="https://blog.csdn.net/sksukai/article/details/105612235">https://blog.csdn.net/sksukai/article/details/105612235</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> MString kPluginLogicLibraryPath;</span><br><span class="line"><span class="keyword">extern</span> DeformerLogicLibrary kLogicLibrary;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;后续是改成 extern<br>&emsp;&emsp;然后在 <code>plugin_main.cpp</code> 里面初始化变量解决问题。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;这个方法切实解决了 节点热加载的问题，不需要 <code>unloadPlugin</code> 清空场景之类的操作，测试起来方便了许多。</p></blockquote>]]></content>
    
    <summary type="html">
    
      C++ 变形器热更新方案
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/CG/Maya/C/"/>
    
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Maya CMake 构建 C++ 插件编译环境</title>
    <link href="https://blog.l0v0.com/posts/5875a169.html"/>
    <id>https://blog.l0v0.com/posts/5875a169.html</id>
    <published>2022-07-01T06:21:00.000Z</published>
    <updated>2022-08-11T11:40:18.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;过去构建 Maya C++ 插件是按照 Autodesk 官方提供的流程，在 VS 里面配置项目工程。 <a href="https://blog.csdn.net/hp_cpp/article/details/80265856">参考链接</a><br>&emsp;&emsp;通过配置 devkit 的 pluginwizard 来构建项目。<br>&emsp;&emsp;但是使用 VS 配置 Maya 依赖的头文件和 lib 其实挺不方便的。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/dedb5d9005f1dff970148bf91c26311a.jpeg" alt="image"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/cfafe1377b6d4e6bb1382f53c76c91da.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;依赖和修改都在不同选项里面，配置起来要搞半天。<br>&emsp;&emsp;而且这个工程配置只能兼容 Windows ，如果我们要在 Linux 环境下编译，整个流程又完全不一样了。<br>&emsp;&emsp;其实解决这种问题，有专门的工具去做。<br>&emsp;&emsp;这就是 <a href="https://cmake.org/">CMake</a><br>&emsp;&emsp;通过 cmake 配置可以生成不同平台的工程文件，不需要打开 IDE 就可以调用 compiler 编译结果。</p></blockquote><p><a href="https://github.com/volodinroman/CMakeMaya">https://github.com/volodinroman/CMakeMaya</a></p><blockquote><p>&emsp;&emsp;这个仓库是别人配置好的基于 CMake 构建 Maya 插件的仓库。</p></blockquote><h2 id="Doit-自动构建环境"><a href="#Doit-自动构建环境" class="headerlink" title="Doit 自动构建环境"></a>Doit 自动构建环境</h2><blockquote><p>&emsp;&emsp;但是构建编译环境还是挺麻烦的，一方面需要下载 VS 和 CMake<br>&emsp;&emsp;另外还要配置好 Maya 提供的 SDK</p></blockquote><p><a href="https://github.com/FXTD-ODYSSEY/CMakeMaya">https://github.com/FXTD-ODYSSEY/CMakeMaya</a></p><blockquote><p>&emsp;&emsp;我这个仓库提供了懒人包环境，只需要配置有 Python 环境和poetry 库。<br>&emsp;&emsp;在仓库的目录，执行 <code>poetry install</code> 和 <code>poetry shell</code> 就可以进入开发虚拟环境。(注: 需要管理员权限)<br>&emsp;&emsp;poetry 会自动安装配置好的依赖，包括 <code>doit 框架</code><br>&emsp;&emsp;执行 <code>doit init</code> 会调用 <code>choco</code> 安装 VS 的依赖，以及 CMake<br>&emsp;&emsp;这个过程需要等待一段时间。</p></blockquote><blockquote><p>&emsp;&emsp;执行完之后 VS Build Tool 就添加到系统了。<br>&emsp;&emsp;但还是找不到 C++ compiler ，需要手动打开 installer 下载 C++ CMake 开发包。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/911e11826073a3058551680de9aba826.png" alt="image"></p><blockquote><p>&emsp;&emsp;使用 <code>doit SDK -v 2020</code> 会下载 Maya 官方的 devkit 到仓库的 SDK 目录。<br>&emsp;&emsp;准备好环境之后，还需要安装好 maya 2020<br>&emsp;&emsp;如此就是完备的编译环境，只需要用 <code>doit c</code> 执行 cmake 编译命令来编译 C++ 插件。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doit c -p weightDriver -v 2020</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用 -p 可以指定编译的项目，-v 可以指定编译的 Maya 版本，默认不指定会编译全部项目的 2020 版本<br>&emsp;&emsp;-p 支持完整的projects 相对路径或者最终目录指定</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doit c -p IngoClemens/weightDriver</span><br><span class="line">doit c -p weightDriver</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;执行 doit 的时候会用 python 识别将末端目录变成完整的相对目录</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/12a58e2b26c25afaa90321434254ccb4.png" alt="image"></p><hr><blockquote><p>&emsp;&emsp;下面是完整执行编译的流程</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/105b5139b33ef1c83e10c9a0e171243e.png" alt="image"></p><blockquote><p>&emsp;&emsp;doit 背后执行的是 拼接输入 执行 cmake 命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -Wno-dev -G &quot;Visual Studio 16 2019&quot; -DMAYA_VERSION=&#123;version&#125; -DMAYA_PROJECT=&#123;project&#125;. -B build</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;DMAYA_VERSION 指定 Maya 版本号<br>&emsp;&emsp;DMAYA_PROJECT 指定 Maya 项目，多个项目可以用 ; 分割。<br>&emsp;&emsp;这个命令会读取根目录的 CMakeLists.txt 根据 VS2019 的配置生成 sln 文件到 Build 目录。<br>&emsp;&emsp;windows 下如果需要 Debug 也可以用 VS 打开 sln 去配置 Debug 工具。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build build --config Release</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;后面会执行 build 命令根据配置编译输出到指定目录。</p></blockquote><h3 id="中文乱码坑"><a href="#中文乱码坑" class="headerlink" title="中文乱码坑"></a>中文乱码坑</h3><p><a href="http://tw.l0v0.com/#%F0%9F%92%A1Vscode%20terminal%20%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81">💡Vscode terminal 中文乱码</a></p><blockquote><p>&emsp;&emsp;Window Terminal 默认不支持 MSBuild 的字符输出。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/07a6a6d0ef789b42617075a90cb84b8f.png" alt="image"></p><blockquote><p>&emsp;&emsp;需要在 terminal 上执行 <code>chcp 65001</code> 切换字符集。</p></blockquote><h2 id="添加新工程"><a href="#添加新工程" class="headerlink" title="添加新工程"></a>添加新工程</h2><blockquote><p>&emsp;&emsp;如果需要添加自己的 mll 需要自己填充 CMakeLists.txt 配置<br>&emsp;&emsp;使用 <code>doit new</code> 可以快速生成 插件 编译模板</p></blockquote><h3 id="cmake-配置说明"><a href="#cmake-配置说明" class="headerlink" title="cmake 配置说明"></a>cmake 配置说明</h3><p><code>projects</code> 下每个项目目录都有对应的  <code>CMakeLists.txt</code> </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置输出目录</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE <span class="variable">$&#123;CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE&#125;</span>/maya<span class="variable">$&#123;MAYA_VERSION&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置项目名称 (一般编译的文件名取项目名)</span></span><br><span class="line"><span class="keyword">project</span>(&#123;&#123;cookiecutter.project_name&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加编译的文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SRCS <span class="string">&quot;*.cpp&quot;</span> <span class="string">&quot;*.h&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加头文件依赖</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;MAYA_INCLUDE_DIR&#125;</span>) </span><br><span class="line"><span class="comment"># 添加 lib 库目录</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;MAYA_LIBRARY_DIR&#125;</span>) </span><br><span class="line"><span class="comment"># 链接源码</span></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> SHARED <span class="variable">$&#123;SRCS&#125;</span>) </span><br><span class="line"><span class="comment"># 链接 lib</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;MAYA_LIBRARIES&#125;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># mll 输出配置</span></span><br><span class="line">MAYA_PLUGIN(<span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;大部分的结构如上图，默认模板如上。<br>&emsp;&emsp;我加上了注释说明。</p></blockquote><blockquote><p>&emsp;&emsp;<code>MAYA_PLUGIN</code>方法将 mll 的 <code>initializePlugin</code> <code>uninitializePlugin</code> 两个方法暴露出来(Maya 加载用)，并且将 dll 的后缀改为 mll。</p></blockquote><h2 id="用-CMake-编译-Devkit-的案例代码"><a href="#用-CMake-编译-Devkit-的案例代码" class="headerlink" title="用 CMake 编译 Devkit 的案例代码"></a>用 CMake 编译 Devkit 的案例代码</h2><blockquote><p>&emsp;&emsp;上面提到的 CMake 是基于 <a href="https://github.com/volodinroman/CMakeMaya">https://github.com/volodinroman/CMakeMaya</a> 的方案搭建的。<br>&emsp;&emsp;cmake 文件基本上是自己编写，可以控制每一处的细节。</p></blockquote><blockquote><p>&emsp;&emsp;其实 Maya 的 Devkit 也提供了一套 CMake 的方案。<br>&emsp;&emsp;每个插件都保留了 CMakeLists.txt 用于编译。<br>&emsp;&emsp;如何顺利编译 Maya C++ 的案例插件是一个好问题。<br>&emsp;&emsp;我过去看 Maya 的文档但是因为不会折腾这个编译(编译出错不知道怎么解决) ，导致无法深入学习 C++ 插件。<br>&emsp;&emsp;只能拿 Devkit 提供的 Python 文件进行学习。<br>&emsp;&emsp;通过上面的折腾与学习，自己也算是对 CMake 有了基础的入门，终于有能力搞定这个问题了~</p></blockquote><p><a href="https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_A_First_Plugin_HelloWorld_html">https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=__developer_Maya_SDK_MERGED_A_First_Plugin_HelloWorld_html</a></p><blockquote><p>&emsp;&emsp;上面的链接是官方文档提供的一个 Maya 插件最简案例。<br>&emsp;&emsp;相应的代码在 <code>devkit\plug-ins\helloCmd</code> 找到</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/307f99197358b87b94dc4bb1629731b8.jpeg" alt="image"></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># include the project setting file</span></span><br><span class="line"><span class="keyword">include</span>($ENV&#123;DEVKIT_LOCATION&#125;/cmake/pluginEntry.cmake)</span><br><span class="line"></span><br><span class="line"><span class="comment"># specify project name</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_NAME helloCmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set SOURCE_FILES</span></span><br><span class="line"><span class="keyword">set</span>(SOURCE_FILES</span><br><span class="line">   helloCmd.cpp</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set linking libraries</span></span><br><span class="line"><span class="keyword">set</span>(LIBRARIES</span><br><span class="line">     OpenMaya</span><br><span class="line">     Foundation</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build plugin</span></span><br><span class="line">build_plugin()</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;构建插件的 cmake 代码如上，核心部分是 <code>$ENV&#123;DEVKIT_LOCATION&#125;</code> 通过环境变量获取 Devkit 的路径<br>&emsp;&emsp;所以执行 CMake 之前可以配置一下环境变量。</p></blockquote><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> DEVKIT_LOCATION=F:\maya_devkit\devkitBase</span><br><span class="line">cmake -G &quot;Visual Studio <span class="number">16</span> <span class="number">2019</span>&quot; . -B build</span><br><span class="line">cmake --build build --config Release</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5875a169/237ae7978ede1e82be485148ff36e526.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;如此操作，就可以编译出 mll 了。(前提是要配置好 VS 的环境)</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;这个环境我通过 虚拟机 测试过，在 win10 环境是没有问题。<br>&emsp;&emsp;通过 cmake 配置可以快速构建好 C++ 编译环境，比起以前折腾 VS 来方便太多了。<br>&emsp;&emsp;利用 <code>choco</code> 来安装依赖也解决了各种缺库导致起不来的问题。<br>&emsp;&emsp;通过这个人懒人包可以极大降低 Maya 写 C++ 的难度。</p></blockquote><!-- TODO多进程执行 choco自动添加管理员权限 --><h3 id="2022-7-8-补充说明"><a href="#2022-7-8-补充说明" class="headerlink" title="2022-7-8 补充说明"></a>2022-7-8 补充说明</h3><blockquote><p>&emsp;&emsp;最近利用 submodule 添加了很多社区的 C++ 库。<br>&emsp;&emsp;clone 仓库之后需要用执行 <code>git submodule update --init</code> 来拉取 submodule</p></blockquote><blockquote><p>&emsp;&emsp;一些注意事项请参阅 readme 文档</p></blockquote>]]></content>
    
    <summary type="html">
    
      CMake 编译
    
    </summary>
    
      <category term="CG" scheme="https://blog.l0v0.com/categories/CG/"/>
    
      <category term="Maya" scheme="https://blog.l0v0.com/categories/CG/Maya/"/>
    
      <category term="C++" scheme="https://blog.l0v0.com/categories/CG/Maya/C/"/>
    
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
      <category term="ࠇCpp" scheme="https://blog.l0v0.com/tags/%E0%A0%87Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Unreal Python 导出 MetaHuman 控制器关键帧</title>
    <link href="https://blog.l0v0.com/posts/1b238b83.html"/>
    <id>https://blog.l0v0.com/posts/1b238b83.html</id>
    <published>2022-06-24T08:57:06.000Z</published>
    <updated>2022-08-11T11:40:18.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;MetaHuman 已经在数字人领域里面相当成熟的解决方案。<br>&emsp;&emsp;并且 UE 官方开发了源码工程。<br>&emsp;&emsp;目前 github 上有不少人演示自己套用 MetaHuman 动画的效果。<br>&emsp;&emsp;于是我自己也尝试着想将它 UE 里面的控制器动画导出来。<br>&emsp;&emsp;然而却发现行不通。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1b238b83/01.png" alt="image.png"></p><blockquote><p>&emsp;&emsp;它的控制器关键帧是在 sequencer 里面。<br>&emsp;&emsp;最初是尝试将 sequencer 的资源全部导出成 FBX。<br>&emsp;&emsp;然而控制器的关键帧并没有跟随导入到 FBX 当中。</p></blockquote><blockquote><p>&emsp;&emsp;于是我想到可以用 unreal python 读取关键帧数据导出 json<br>&emsp;&emsp; Maya 再读取数据设置关键帧到控制器上。</p></blockquote><h2 id="unreal-python-导出关键帧"><a href="#unreal-python-导出关键帧" class="headerlink" title="unreal python 导出关键帧"></a>unreal python 导出关键帧</h2><blockquote><p>&emsp;&emsp;有思路之后就好办。<br>&emsp;&emsp;之前我也写过脚本来获取 sequencer 关键帧的。<br>&emsp;&emsp;需要注意如果想要使用 unreal python 的 API 需要开启相应的 C++ 插件。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1b238b83/02.png" alt="image.png"></p><blockquote><p>&emsp;&emsp;否则 python 会获取不到相应的 API 报错。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import built-in modules</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import local modules</span></span><br><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unreal_progress</span>(<span class="params">tasks, label=<span class="string">&quot;进度&quot;</span>, total=<span class="literal">None</span></span>):</span><br><span class="line">    total = total <span class="keyword">if</span> total <span class="keyword">else</span> <span class="built_in">len</span>(tasks)</span><br><span class="line">    <span class="keyword">with</span> unreal.ScopedSlowTask(total, label) <span class="keyword">as</span> task:</span><br><span class="line">        task.make_dialog(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(tasks):</span><br><span class="line">            <span class="keyword">if</span> task.should_cancel():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            task.enter_progress_frame(<span class="number">1</span>, <span class="string">&quot;%s %s/%s&quot;</span> % (label, i, total))</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> 读取 sequence</span></span><br><span class="line">    sequence = unreal.load_asset(<span class="string">&#x27;/Game/Sequencer/MetaHumanSample_Sequence.MetaHumanSample_Sequence&#x27;</span>)</span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> 收集 sequence 里面所有的 binding</span></span><br><span class="line">    binding_dict = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">    <span class="keyword">for</span> binding <span class="keyword">in</span> sequence.get_bindings():</span><br><span class="line">        binding_dict[binding.get_name()].append(binding)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> 遍历命名为 Face 的 binding</span></span><br><span class="line">    <span class="keyword">for</span> binding <span class="keyword">in</span> unreal_progress(binding_dict.get(<span class="string">&quot;Face&quot;</span>, []), <span class="string">&quot;导出 Face 数据&quot;</span>):</span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> 获取关键帧 channel 数据</span></span><br><span class="line">        keys_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> track <span class="keyword">in</span> binding.get_tracks():</span><br><span class="line">            <span class="keyword">for</span> section <span class="keyword">in</span> track.get_sections():</span><br><span class="line">                <span class="keyword">for</span> channel <span class="keyword">in</span> unreal_progress(section.get_channels(), <span class="string">&quot;导出关键帧&quot;</span>):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> channel.get_num_keys():</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    keys = []</span><br><span class="line">                    <span class="keyword">for</span> key <span class="keyword">in</span> channel.get_keys():</span><br><span class="line">                        frame_time = key.get_time()</span><br><span class="line">                        frame = frame_time.frame_number.value + frame_time.sub_frame</span><br><span class="line">                        keys.append(&#123;<span class="string">&quot;frame&quot;</span>: frame, <span class="string">&quot;value&quot;</span>: key.get_value()&#125;)</span><br><span class="line"></span><br><span class="line">                    keys_dict[channel.get_name()] = keys</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> 导出 json</span></span><br><span class="line">        name = binding.get_parent().get_name()</span><br><span class="line">        export_path = os.path.join(DIR, <span class="string">&quot;&#123;0&#125;.json&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(export_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> wf:</span><br><span class="line">            json.dump(keys_dict, wf, indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的脚本会定位 MetaHuman 的 sequence 资源，然后导出关键帧的信息为 json</p></blockquote><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1b238b83/meta_export.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;导出会在脚本目录输出两个 json 文件。<br>&emsp;&emsp;Maya 可以解析这个这两个 json 将关键帧设置到 控制器上。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import built-in modules</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import third-party modules</span></span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line">DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">seq, status=<span class="string">&quot;&quot;</span>, title=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    pm.progressWindow(status=status, title=title, progress=<span class="number">0.0</span>, isInterruptable=<span class="literal">True</span>)</span><br><span class="line">    total = <span class="built_in">len</span>(seq)</span><br><span class="line">    <span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(seq):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> pm.progressWindow(query=<span class="literal">True</span>, isCancelled=<span class="literal">True</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            pm.progressWindow(e=<span class="literal">True</span>, progress=<span class="built_in">float</span>(i) / total * <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">yield</span> item  <span class="comment"># with body executes here</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            pm.progressWindow(ep=<span class="number">1</span>)</span><br><span class="line">    pm.progressWindow(ep=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> 读取数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(DIR, <span class="string">&quot;BP_metahuman_001.json&quot;</span>), <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> rf:</span><br><span class="line">        data = json.load(rf)</span><br><span class="line"></span><br><span class="line">    attr_map = &#123;<span class="string">&quot;location&quot;</span>: <span class="string">&quot;t&quot;</span>, <span class="string">&quot;rotation&quot;</span>: <span class="string">&quot;r&quot;</span>&#125;</span><br><span class="line">    status = <span class="string">&quot;Import Keyframe to metahuman controller&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> undo 支持</span></span><br><span class="line">    pm.undoInfo(ock=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> channel, frame_list <span class="keyword">in</span> progress(data.items(), status=status):</span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> 解析 channel_name</span></span><br><span class="line">        has_attr = channel.count(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> has_attr:</span><br><span class="line">            <span class="comment"># <span class="doctag">NOTE:</span> 处理 `CTRL_C_eye_parallelLook_4311` 格式</span></span><br><span class="line">            ctrl_name = channel.rsplit(<span class="string">&quot;_&quot;</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            attr = <span class="string">&quot;ty&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parts = <span class="built_in">iter</span>(channel.split(<span class="string">&quot;.&quot;</span>))</span><br><span class="line">            ctrl_name = <span class="built_in">next</span>(parts, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            param = <span class="built_in">next</span>(parts, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            axis = <span class="built_in">next</span>(parts, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> axis:</span><br><span class="line">                <span class="comment"># <span class="doctag">NOTE:</span> 处理 `CTRL_C_teethD.Y_4330` 格式</span></span><br><span class="line">                attr = <span class="string">&quot;t&quot;</span></span><br><span class="line">                axis = param</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># <span class="doctag">NOTE:</span> 处理 `CTRL_L_eyeAim.Rotation.Y_4387` 格式</span></span><br><span class="line">                attr = attr_map.get(param.lower())</span><br><span class="line">            attr += axis.split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>].lower()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> 解析出控制器属性设置关键帧</span></span><br><span class="line">        attribute = pm.PyNode(<span class="string">&quot;.&quot;</span>.join([ctrl_name, attr]))</span><br><span class="line">        <span class="keyword">for</span> frame_data <span class="keyword">in</span> frame_list:</span><br><span class="line">            frame = frame_data.get(<span class="string">&quot;frame&quot;</span>)</span><br><span class="line">            value = frame_data.get(<span class="string">&quot;value&quot;</span>)</span><br><span class="line">            attribute.setKey(t=frame, v=value)</span><br><span class="line"></span><br><span class="line">    pm.undoInfo(cck=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><video src="//cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1b238b83/maya_load.mp4" autoplay="autoplay" loop="loop" style="width: 100%; height:100%;"></video><blockquote><p>&emsp;&emsp;加载 unreal 导出的数据。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;其实整个流程不复杂，有思路就很好处理。</p></blockquote>]]></content>
    
    <summary type="html">
    
      python 导出 sequencer 关键帧
    
    </summary>
    
      <category term="游戏开发" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unreal" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/"/>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Unreal/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
      <category term="ࠀMaya" scheme="https://blog.l0v0.com/tags/%E0%A0%80Maya/"/>
    
      <category term="ࠃUnreal" scheme="https://blog.l0v0.com/tags/%E0%A0%83Unreal/"/>
    
  </entry>
  
  <entry>
    <title>TA 工具人知乎分享</title>
    <link href="https://blog.l0v0.com/posts/4831b5c7.html"/>
    <id>https://blog.l0v0.com/posts/4831b5c7.html</id>
    <published>2022-05-13T07:01:29.000Z</published>
    <updated>2022-08-11T11:40:18.211Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好, 这里需要密码. 提示(神秘号码 + 光子)</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="fb2a28db5cfcf9c9721b69dcf0363b14040b5af44b27fd3fff3b68c3375036b0"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      围绕一些主题的约稿
    
    </summary>
    
      <category term="光子" scheme="https://blog.l0v0.com/categories/%E5%85%89%E5%AD%90/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python - Import 机制</title>
    <link href="https://blog.l0v0.com/posts/5e6e2bc7.html"/>
    <id>https://blog.l0v0.com/posts/5e6e2bc7.html</id>
    <published>2022-04-15T01:23:50.000Z</published>
    <updated>2022-08-11T11:40:18.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;你是否也会为 reload Python 的模块干到烦恼。<br>&emsp;&emsp;需要在不同的脚本加上 reload 导入的模块确保可以看到代码的更新。<br>&emsp;&emsp;Python 是怎么缓存 import 的模块的。</p></blockquote><p>TLDR;</p><blockquote><p>&emsp;&emsp;我后来了解了 Python 的加载机制之后弄了一个函数，只要将我们开发的包命名加上，就可以实现整个开发包 reload 。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">module_cleanup</span>(<span class="params">module_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Cleanup module_name in sys.modules cache.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        module_name (str): Module Name</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> module_name <span class="keyword">in</span> sys.builtin_module_names:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    packages = [mod <span class="keyword">for</span> mod <span class="keyword">in</span> sys.modules <span class="keyword">if</span> mod.startswith(<span class="string">&quot;%s.&quot;</span> % module_name)]</span><br><span class="line">    <span class="keyword">for</span> package <span class="keyword">in</span> packages + [module_name]:</span><br><span class="line">        module = sys.modules.get(package)</span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">del</span> sys.modules[package]  <span class="comment"># noqa:WPS420</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTES(timmyliang): 这个操作等同于对 test_module 下所有的 module 进行 reload</span></span><br><span class="line">module_cleanup(<span class="string">&quot;test_module&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;如果我们的 test_module 下有众多脚本就不需要逐个去添加 reload 了。<br>&emsp;&emsp;万一不小心把 reload 发布出去了也会稍微降低脚本运行的性能。</p></blockquote><h2 id="Python-Import"><a href="#Python-Import" class="headerlink" title="Python Import"></a>Python Import</h2><p><a href="https://docs.python.org/3/reference/import.html">https://docs.python.org/3/reference/import.html</a></p><!-- https://docs.python.org/3/library/sys.html#sys.modules --><blockquote><p>&emsp;&emsp;上面是 Python 的官方文档讲述 Python的 import 的时候背后的运行机理，也可以切换成中文进行阅读。<br>&emsp;&emsp;这里我将上面的文章结合自己的实践总结一番。</p></blockquote><blockquote><p>&emsp;&emsp;Python import 模块可以用关键字 <code>import</code> 或者 <code>importlib.import_module()</code><br>备注: 关键字调用无法放到 lambda 函数里面，这也是为什么 Python2 下默认 <code>print</code> 无法放入 lambda 里面， python3 <code>print</code> 不再是关键字可以放入 lambda<br>&emsp;&emsp;使用 <code>import</code> 关键字其实别后执行的时 <code>__import__()</code> 内置方法。<br>&emsp;&emsp;import 触发之后会从 <code>sys.modules</code> 查找缓存，找不到就从 <code>sys.path</code> 里面匹配模块 (这个过程也会触发 meta_path 等触发自定义的 import 行为)<br>&emsp;&emsp;找到匹配的模块就会创建模块 否则 <code>raise ModuleNotFoundError</code><br>&emsp;&emsp;生成的模块会放入到 <code>sys.modules</code> 进行缓存。</p></blockquote><p>import 执行操作(不考虑自定义 import 情况)</p><ol><li>从 <code>sys.modules</code> 查找模块缓存</li><li>从 <code>sys.path</code> 匹配脚本 生成模块 放入  <code>sys.modules</code> 缓存</li></ol><h3 id="sys-modules"><a href="#sys-modules" class="headerlink" title="sys.modules"></a>sys.modules</h3><blockquote><p>&emsp;&emsp;由于 <code>sys.modules</code> 的缓存机制，Python 下次导入就从已经加载的缓存中获取模块，导致模块用的还是旧的代码逻辑。<br>&emsp;&emsp;相应的也可以修改 sys.modules 的字典实现骚操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> a</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 打印 1</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;当然这种骚操作不推荐使用就是了。<br>&emsp;&emsp;另外还有一些危险的操作，比如 <code>del sys.modules[&quot;builtins&quot;]</code> 会让 Python 变得不正常<em>(:з」∠)</em></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> sys.modules[<span class="string">&quot;builtins&quot;</span>]  </span><br><span class="line"><span class="built_in">map</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment"># RuntimeError: lost builtins module</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;基于这个原理，如果将缓存清理了，下次 Python import 就会重新加载这个模块，实现 reload 的效果。<br>&emsp;&emsp;我最初也是在 mGear 的代码里面学习它们的 reload 方法学习到的。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5e6e2bc7/f00532dcd9c19a47bf2caf9012f31df4.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;它背后实现的代码就是 <code>del sys.modules[&quot;mgear&quot;]</code> 等相关的模块</p></blockquote><p><a href="https://docs.python.org/3/reference/import.html#the-module-cache">https://docs.python.org/3/reference/import.html#the-module-cache</a></p><blockquote><p>&emsp;&emsp;根据官方文档的说明，如果一个大模块下有很多子模块，都是单独键值缓存的。<br>&emsp;&emsp;所以要 reload 所有的子模块需要编译键值将匹配的都删除掉。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">module_cleanup</span>(<span class="params">module_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Cleanup module_name in sys.modules cache.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        module_name (str): Module Name</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> module_name <span class="keyword">in</span> sys.builtin_module_names:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    packages = [mod <span class="keyword">for</span> mod <span class="keyword">in</span> sys.modules <span class="keyword">if</span> mod.startswith(<span class="string">&quot;%s.&quot;</span> % module_name)]</span><br><span class="line">    <span class="keyword">for</span> package <span class="keyword">in</span> packages + [module_name]:</span><br><span class="line">        module = sys.modules.get(package)</span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">del</span> sys.modules[package]  <span class="comment"># noqa:WPS420</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTES(timmyliang): 这个操作等同于对 test_module 下所有的 module 进行 reload</span></span><br><span class="line">module_cleanup(<span class="string">&quot;test_module&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这个就是我整理的遍历所有匹配的模块进行缓存删除的函数，<code>sys.builtin_module_names</code> 通过规避对内置模块的清理。<br>&emsp;&emsp;这样源代码不需要添加 reload ，我们只在开发用的调试脚本添加这个函数执行 reload 即可。<br>&emsp;&emsp;另外有一个小小注意点，用这个删除缓存的方式 reload 会将之前的 module 删除生成新的 module 对象，但是如果用 <code>reload</code> 的话是沿用之前的 module 对象。<br>&emsp;&emsp;目前我实践上还没遇到过因为这个导致出现问题的情况。</p></blockquote><h2 id="packages-命名空间包"><a href="#packages-命名空间包" class="headerlink" title="packages 命名空间包"></a>packages 命名空间包</h2><p><a href="https://packaging.python.org/en/latest/guides/packaging-namespace-packages/">https://packaging.python.org/en/latest/guides/packaging-namespace-packages/</a></p><blockquote><p>&emsp;&emsp;按照上面链接提供的目录结构</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mynamespace-subpackage-a/</span><br><span class="line">    setup.py</span><br><span class="line">    mynamespace/</span><br><span class="line">        subpackage_a/</span><br><span class="line">            __init__.py</span><br><span class="line"></span><br><span class="line">mynamespace-subpackage-b/</span><br><span class="line">    setup.py</span><br><span class="line">    mynamespace/</span><br><span class="line">        subpackage_b/</span><br><span class="line">            __init__.py</span><br><span class="line">        module_b.py</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;然后就可以 <code>from mynamespace import subpackage_b</code> <code>from mynamespace import subpackage_a</code><br>&emsp;&emsp;用同一个 <code>mynamespace</code> 包导入两个不同路径的模块。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/5e6e2bc7/db4d5d1b1d1d7fe61a561b13a9c00e2d.jpeg" alt="image"></p><blockquote><p>&emsp;&emsp;但是上面的链接也提到 命名空间包并不适用所有的情况，反而是用前缀包会更好。</p></blockquote><h3 id="模块遍历查找"><a href="#模块遍历查找" class="headerlink" title="模块遍历查找"></a>模块遍历查找</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pkgutil</span><br><span class="line"><span class="keyword">import</span> xml</span><br><span class="line"><span class="keyword">for</span> finder,name,ispkg <span class="keyword">in</span> pkgutil.walk_packages(xml.__path__,xml.__name__+<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(finder,name,ispkg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml&#x27;) xml.dom True</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.NodeFilter False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.domreg False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.expatbuilder False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.minicompat False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.minidom False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.pulldom False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\dom&#x27;) xml.dom.xmlbuilder False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml&#x27;) xml.etree True</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\etree&#x27;) xml.etree.ElementInclude False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\etree&#x27;) xml.etree.ElementPath False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\etree&#x27;) xml.etree.ElementTree False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\etree&#x27;) xml.etree.cElementTree False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml&#x27;) xml.parsers True</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\parsers&#x27;) xml.parsers.expat False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml&#x27;) xml.sax True</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\sax&#x27;) xml.sax._exceptions False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\sax&#x27;) xml.sax.expatreader False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\sax&#x27;) xml.sax.handler False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\sax&#x27;) xml.sax.saxutils False</span></span><br><span class="line"><span class="comment"># FileFinder(&#x27;C:\\tools\\Anaconda3\\lib\\xml\\sax&#x27;) xml.sax.xmlreader False</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 <code>pkgutil.walk_packages</code> 可以遍历一个模块所有的子模块。<br>&emsp;&emsp;<code>from setuptools import find_packages</code> 也可以实现类似的功能<br>&emsp;&emsp;但是 <code>find_packages</code> 面对命名空间模块不好使，但是 <code>walk_packages</code> 好使。(原因是 <code>find_packages</code> 通过 <code>os.walk</code> 去查找路径的)<br>&emsp;&emsp;也可以通过这个方式将对应模块的缓存进行删除~</p></blockquote><h3 id="判断模块是否存在"><a href="#判断模块是否存在" class="headerlink" title="判断模块是否存在"></a>判断模块是否存在</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">importable</span>(<span class="params">module_name</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">__import__</span>(module_name)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;过去判断一模块是否可以 import 通常使用异常进行处理。<br>&emsp;&emsp;其实 <code>pkgutil.find_loader</code> 也可以返回模块是否可以 import</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pkgutil</span><br><span class="line">loader = pkgutil.find_loader(<span class="string">&quot;os&quot;</span>)</span><br><span class="line">maya = loader.load_module(<span class="string">&quot;os&quot;</span>) <span class="keyword">if</span> loader <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"><span class="built_in">print</span>(maya)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;如果模块可以导入会返回对应的 <code>loader</code>，使用 <code>load_module</code> 可以进行加载。<br>注: py2 的 <code>load_module</code> 必须要传参。</p></blockquote><h2 id="自定义-import-行为"><a href="#自定义-import-行为" class="headerlink" title="自定义 import 行为"></a>自定义 import 行为</h2><blockquote><p>&emsp;&emsp;除了 <code>sys.path</code> 通过系统路径查找 python 包进行加载之外。<br>&emsp;&emsp;Python 还有 <code>sys.meta_path</code> 存储一系列 Finder 类 (Py3还需要 <code>Loader</code> 类) 来自定义 import 逻辑。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomFinder</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.submodule_search_locations = []</span><br><span class="line">        self.has_location = <span class="literal">False</span></span><br><span class="line">        self.origin = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_module</span>(<span class="params">self, spec</span>):</span><br><span class="line">        <span class="keyword">return</span> self.load_module(spec.name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exec_module</span>(<span class="params">self, module</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Execute the given module in its own namespace</span></span><br><span class="line"><span class="string">        This method is required to be present by importlib.abc.Loader,</span></span><br><span class="line"><span class="string">        but since we know our module object is already fully-formed,</span></span><br><span class="line"><span class="string">        this method merely no-ops.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_spec</span>(<span class="params">self, fullname,*args</span>):</span><br><span class="line">        self.name = fullname</span><br><span class="line">        self.loader = self</span><br><span class="line">        <span class="keyword">return</span> self.find_module()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># NOTES(timmyliang): compat with Python2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_module</span>(<span class="params">self,*args</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_module</span>(<span class="params">self, fullname</span>):</span><br><span class="line">        module = sys.modules.get(fullname)</span><br><span class="line">        <span class="keyword">if</span> module:</span><br><span class="line">            <span class="keyword">return</span> module</span><br><span class="line">        </span><br><span class="line">        new_module = types.ModuleType(fullname)</span><br><span class="line">        sys.modules[fullname] = new_module</span><br><span class="line">        new_module.__name__ = fullname</span><br><span class="line">        new_module.__loader__ = self</span><br><span class="line">        <span class="keyword">return</span> new_module</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sys.meta_path.append(CustomFinder())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">import</span> myapp</span><br><span class="line">    <span class="built_in">print</span>(myapp)  </span><br><span class="line">    <span class="comment"># Py3: &lt;module &#x27;myapp&#x27; (&lt;__main__.CustomFinder object at 0x000002A2A2904808&gt;)&gt;</span></span><br><span class="line">    <span class="comment"># Py2: &lt;module &#x27;myapp&#x27; (built-in)&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面的代码实现了 py2 py3 的 Finder 兼容。<br>&emsp;&emsp;可以实现加载任意名称的模块都能成功返回而不会引发 ImportError<br>&emsp;&emsp;当然这种操作如果用到项目里面，肯定会被人打死 😄</p></blockquote><blockquote><p>&emsp;&emsp;在 Py2 环境下 Finder 需要实现 <code>find_module</code> 和 <code>load_module</code> 方法<br>&emsp;&emsp;Py3 环境可以参考下面的链接。</p></blockquote><p><a href="https://stackoverflow.com/a/58275573/13452951">https://stackoverflow.com/a/58275573/13452951</a></p><blockquote><p>&emsp;&emsp;需要有 Finder 需要实现 <code>find_spec</code> 返回 <code>ModuleSpec</code> 类，这个类需要有 <code>Loader</code> 进行加载逻辑</p></blockquote><blockquote><p>&emsp;&emsp;官方提供的 <code>zipimport.zipimporter</code> 在 Py2 下是 Finder ，在 Py3 下是 Loader。<br>&emsp;&emsp;可以从下面官方文档的类方法中看出来。</p></blockquote><p><a href="https://docs.python.org/2.7/library/zipimport.html?highlight=zip#module-zipimport">https://docs.python.org/2.7/library/zipimport.html?highlight=zip#module-zipimport</a><br><a href="https://docs.python.org/3.10/library/zipimport.html?highlight=zip#module-zipimport">https://docs.python.org/3.10/library/zipimport.html?highlight=zip#module-zipimport</a></p><blockquote><p>&emsp;&emsp;通过需改 import 机制，可以实现很多黑科技，但是推荐使用侵入性较小的使用方式。<br>&emsp;&emsp;这个机制可以让，某个模块可以虚空导入不报错，这不符合正常使用 Python 的逻辑，可能会让团队其他人很懵逼的。<br>&emsp;&emsp;如果某个 BUG 是因为这个机制导致的，其他人又不熟悉这块的话，那这问题查半天也不一定有结果 😢</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;本次深入浅出地学习了 Python Import 的各种底层逻辑。<br>&emsp;&emsp;以后有机会的话也想好好学习一下 CPython 的底层实现。</p></blockquote>]]></content>
    
    <summary type="html">
    
      自动 unload 模块 &amp; meta import 学习
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
      <category term="工具开发" scheme="https://blog.l0v0.com/categories/Python/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python doit 库</title>
    <link href="https://blog.l0v0.com/posts/b552c0c3.html"/>
    <id>https://blog.l0v0.com/posts/b552c0c3.html</id>
    <published>2022-03-28T07:50:36.000Z</published>
    <updated>2022-08-11T11:40:18.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;代码开发的过程中可能遇到一些情况想要通过 代码 来自动执行命令行生成一些东西的情况。<br>&emsp;&emsp;如果不使用框架进行管理，这些代码脚本就很零碎地散落在各个地方。<br>&emsp;&emsp;因此就找到这个框架可以很方便管理多个任务，实现</p></blockquote><p><a href="https://github.com/pydoit/doit">Github 地址</a><br><a href="https://pydoit.org/">官方说明文档</a></p><h2 id="doit-的基本用法"><a href="#doit-的基本用法" class="headerlink" title="doit 的基本用法"></a>doit 的基本用法</h2><blockquote><p>&emsp;&emsp;在 doit 执行命令的地方添加一个 <code>dodo.py</code> 的脚本<br>&emsp;&emsp;doit 会去读取 <code>dodo.py</code> 里面命名开头为 <code>task_</code> 的方法作为执行的命令。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">task_hello</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;hello&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">python_hello</span>(<span class="params">targets</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(targets[<span class="number">0</span>], <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> output:</span><br><span class="line">            output.write(<span class="string">&quot;Python says Hello World!!!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;actions&#x27;</span>: [python_hello],</span><br><span class="line">        <span class="string">&#x27;targets&#x27;</span>: [<span class="string">&quot;hello.txt&quot;</span>],</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;比如添加上面的方法到 <code>dodo.py</code> 里面<br>&emsp;&emsp;执行 <code>doit list</code> 可以罗列出当前的可执行的命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F:\thm_git\adam_pose_editor&gt;doit list</span><br><span class="line">hello   hello</span><br><span class="line">F:\thm_git\adam_pose_editor&gt;doit hello</span><br><span class="line">.  hello</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;执行 <code>doit hello</code> 就会在 <code>dodo.py</code> 缩在目录下输出一个 hello.txt 的文件。<br>&emsp;&emsp;这个就是 doit 的基本用法。</p></blockquote><h3 id="dodo-py-配置"><a href="#dodo-py-配置" class="headerlink" title="dodo.py 配置"></a>dodo.py 配置</h3><p><a href="https://pydoit.org/configuration.html">https://pydoit.org/configuration.html</a></p><blockquote><p>&emsp;&emsp;可以使用 <code>doit -f xxx/dodo.py</code> 配置 <code>dodo.py</code> 的路径<br>&emsp;&emsp;也可以使用 <code>pyproject.toml</code> 进行配置</p></blockquote><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.doit]</span></span><br><span class="line"><span class="attr">dodoFile</span> = <span class="string">&quot;scripts/dodo.py&quot;</span></span><br></pre></td></tr></table></figure><h3 id="task-配置"><a href="#task-配置" class="headerlink" title="task 配置"></a>task 配置</h3><blockquote><p>&emsp;&emsp;<code>dodo.py</code> 的 task 支持导入<br>&emsp;&emsp;只要是 <code>task_</code> 前缀的方法就会自动识别。<br>&emsp;&emsp;也可以给函数添加 <code>create_doit_tasks</code> 属性，这样就可以自动生成了。 <a href="https://pydoit.org/task-creation.html#custom-task-definition">文档链接</a></p></blockquote><blockquote><p>&emsp;&emsp;利用这些机制，我搞了一个装饰器可以给 task 添加一个短名的方案。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_short_name</span>(<span class="params">short_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Doit for short decorator.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        short_name (str): short alias name.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        callable: decoartor function.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="built_in">globals</span>()[<span class="string">&quot;task_&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(short_name)] = func  <span class="comment"># noqa: WPS421</span></span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_short_name(<span class="params"><span class="string">&quot;pf&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_preflight</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run pre commit for all files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    command = [<span class="string">&quot;poetry&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;pre-commit&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;-a&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;actions&quot;</span>: [command], <span class="string">&quot;verbosity&quot;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这样运行 doit 会识别到两个 task ，可以分别通过 <code>doit pf</code> 或者 <code>doit preflight</code> 触发指令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;doit list </span><br><span class="line">pf          Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">preflight   Run pre commit <span class="keyword">for</span> all files.</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;但是默认排序是按命名来的，如果命令很多就会混在一起</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;doit list </span><br><span class="line">b             Run black format all python files.</span><br><span class="line">black         Run black format all python files.</span><br><span class="line">d             Run mkdocs serve.</span><br><span class="line"><span class="built_in">dd</span>            Run mike to deploy docs.</span><br><span class="line">docs          Run mkdocs serve.</span><br><span class="line">docs_deploy   Run mike to deploy docs.</span><br><span class="line">f             Run `black` `isort`.</span><br><span class="line">format        Run `black` `isort`.</span><br><span class="line">i             Run isort format all python files.</span><br><span class="line">isort         Run isort format all python files.</span><br><span class="line">l             Run flakehell lint <span class="keyword">for</span> all python files.</span><br><span class="line">lint          Run flakehell lint <span class="keyword">for</span> all python files.</span><br><span class="line">m             Run mike serve.</span><br><span class="line">mike          Run mike serve.</span><br><span class="line">pf            Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">preflight     Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">pt            Run pytest.</span><br><span class="line">pytest        Run pytest.</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;可以使用 doit list –sort=definition 的方式让排序变成创建顺序。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;doit list --<span class="built_in">sort</span>=definition</span><br><span class="line">f             Run `black` `isort`.</span><br><span class="line">format        Run `black` `isort`.</span><br><span class="line">pf            Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">preflight     Run pre commit <span class="keyword">for</span> all files.</span><br><span class="line">b             Run black format all python files.</span><br><span class="line">black         Run black format all python files.</span><br><span class="line">i             Run isort format all python files.</span><br><span class="line">isort         Run isort format all python files.</span><br><span class="line">l             Run flakehell lint <span class="keyword">for</span> all python files.</span><br><span class="line">lint          Run flakehell lint <span class="keyword">for</span> all python files.</span><br><span class="line">pt            Run pytest.</span><br><span class="line">pytest        Run pytest.</span><br><span class="line">d             Run mkdocs serve.</span><br><span class="line">docs          Run mkdocs serve.</span><br><span class="line">m             Run mike serve.</span><br><span class="line">mike          Run mike serve.</span><br><span class="line"><span class="built_in">dd</span>            Run mike to deploy docs.</span><br><span class="line">docs_deploy   Run mike to deploy docs.</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;但是每次使用都要加一个参数配置，那是相当的麻烦。<br>&emsp;&emsp;我们可以利用 <code>DOIT_CONFIG</code> 进行配置 <a href="https://pydoit.org/configuration.html#configuration-at-dodo-py">文档链接</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DOIT_CONFIG = &#123;</span><br><span class="line">    <span class="string">&quot;sort&quot;</span>: <span class="string">&quot;definition&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="task-group"><a href="#task-group" class="headerlink" title="task group"></a>task group</h3><blockquote><p>&emsp;&emsp;可以使用 <code>task_dep</code> 的方式执行多个定义好的 task <a href="https://pydoit.org/task-creation.html#custom-task-definition">文档链接</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">DIR = os.path.dirname(__file__)</span><br><span class="line">PY_FILES = glob.glob(os.path.join(DIR, <span class="string">&quot;**/*.py&quot;</span>), recursive=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">@add_short_name(<span class="params"><span class="string">&quot;f&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_format</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run `black` `isort`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;actions&quot;</span>: <span class="literal">None</span>, <span class="string">&quot;task_dep&quot;</span>: [<span class="string">&quot;black&quot;</span>, <span class="string">&quot;isort&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_short_name(<span class="params"><span class="string">&quot;b&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_black</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run black format all python files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    command = [<span class="string">&quot;poetry&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;black&quot;</span>] + PY_FILES</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;actions&quot;</span>: [command], <span class="string">&quot;verbosity&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@add_short_name(<span class="params"><span class="string">&quot;i&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_isort</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run isort format all python files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    command = [<span class="string">&quot;poetry&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;isort&quot;</span>] + PY_FILES</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;actions&quot;</span>: [command], <span class="string">&quot;verbosity&quot;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过上面的配置就可以快速给所有的 python 脚本运行 black 和 isort </p></blockquote><h3 id="task-传参"><a href="#task-传参" class="headerlink" title="task 传参"></a>task 传参</h3><p><a href="https://pydoit.org/task-args.html#task-action-parameters">文档链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen_api</span>(<span class="params">api</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate API docs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        api (bool): flag to generate docs</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        str: running command</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># NOTES(timmyliang): remove reference api</span></span><br><span class="line">    rmtree(os.path.join(DIR, <span class="string">&quot;docs&quot;</span>, <span class="string">&quot;reference&quot;</span>), ignore_errors=<span class="literal">True</span>)</span><br><span class="line">    script_path = os.path.join(DIR, <span class="string">&quot;docs&quot;</span>, <span class="string">&quot;gen_api_nav.py&quot;</span>)</span><br><span class="line">    api_command = <span class="string">&quot; &quot;</span>.join([<span class="string">&quot;poetry&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;python&quot;</span>, script_path])</span><br><span class="line">    serve_command = <span class="string">&quot; &quot;</span>.join([<span class="string">&quot;poetry&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;mkdocs&quot;</span>, <span class="string">&quot;serve&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;api_command&#125;</span> &amp; <span class="subst">&#123;serve_command&#125;</span>&quot;</span> <span class="keyword">if</span> api <span class="keyword">else</span> serve_command</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@add_short_name(<span class="params"><span class="string">&quot;d&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_docs</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run mkdocs serve.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict: doit config.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;actions&quot;</span>: [CmdAction(gen_api)],</span><br><span class="line">        <span class="string">&quot;params&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;api&quot;</span>,</span><br><span class="line">                <span class="string">&quot;short&quot;</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="built_in">bool</span>,</span><br><span class="line">                <span class="string">&quot;default&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;inverse&quot;</span>: <span class="string">&quot;flagoff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;help&quot;</span>: <span class="string">&quot;generate api docs&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;verbosity&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 <code>params</code> 定义传入的参数，就可以控制 mkdocs 是否自动生成 api 的 markdown 脚本。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;目前我使用上面的写法已经很够用了，其实它还有很多其他的配置可以用来做 C 编译。<br>&emsp;&emsp;还可以定义 task 依赖 和 文件依赖，确保 task 的执行顺序。<br>&emsp;&emsp;整体而言，doit 是个非常简单而是用的框架，配置 tox 等工具可谓是锦上添花。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Python 任务管理命令行
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python dependencies 库</title>
    <link href="https://blog.l0v0.com/posts/7aa50252.html"/>
    <id>https://blog.l0v0.com/posts/7aa50252.html</id>
    <published>2022-03-28T01:50:26.000Z</published>
    <updated>2022-08-11T11:40:18.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;在 Java Spring Boot 等等的后端领域，会大量使用依赖注入的方式来简化复杂的设计模式。<br>&emsp;&emsp;实现参数的自动化注入。<br>&emsp;&emsp;这些设计方式在 Python 的世界里使用不多，因为 Python 语言足够灵活。<br>&emsp;&emsp;倘若需要开发复杂的框架，使用 依赖注入 框架可以简化很多代码。</p></blockquote><p><a href="https://github.com/proofit404/dependencies">Github 地址</a><br><a href="https://proofit404.github.io/dependencies/">官方说明文档</a></p><h2 id="依赖注入解决的问题"><a href="#依赖注入解决的问题" class="headerlink" title="依赖注入解决的问题"></a>依赖注入解决的问题</h2><p><a href="https://sobolevn.me/2020/02/typed-functional-dependency-injection">参考文章</a></p><blockquote><p>&emsp;&emsp;在日常开发中，我们的方法调用可能会越来越深。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot</span>(<span class="params">robot_name</span>):</span><br><span class="line">    create_robot_hand()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot_hand</span>():</span><br><span class="line">    create_robot_finger()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot_finger</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;create_robot_finger&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面是一个简单的机器人创建调用函数。<br>&emsp;&emsp;调用方式会伴随则系统的复杂程度逐层深入。<br>&emsp;&emsp;到了 <code>create_robot_finger</code> 深度的时候，可能会需要在上层传入参数控制 finger 的数量</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot</span>(<span class="params">robot_name,finger_num=<span class="number">10</span></span>):</span><br><span class="line">    create_robot_hand(finger_num=finger_num)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot_hand</span>(<span class="params">finger_num=<span class="number">10</span></span>):</span><br><span class="line">    create_robot_finger(finger_num=finger_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot_finger</span>(<span class="params">finger_num=<span class="number">10</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;create_robot_finger finder_number:&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(finger_num))</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这需要将参数补充到 调用链条 的每一个函数当中。<br>&emsp;&emsp;如果只是上面的 三层 调用深度，那可能手动修改维护还不是什么问题。<br>&emsp;&emsp;但倘若调用深度很深，那这个代码修改量就会非常庞大。<br>&emsp;&emsp;不利于代码的扩展和维护。</p></blockquote><hr><blockquote><p>&emsp;&emsp;在 Python 的世界里，解决这个问题的方法有很多。</p><ol><li>导入 配置 模块，外部获取参数配置</li><li>面向对象 注入依赖，从实例化中获取参数配置</li></ol></blockquote><h3 id="方案一-导入模块"><a href="#方案一-导入模块" class="headerlink" title="方案一 导入模块"></a>方案一 导入模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;settings.py&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"></span><br><span class="line">ROBOT_FINGER_NUM = <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot</span>(<span class="params">robot_name</span>):</span><br><span class="line">    create_robot_hand()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot_hand</span>():</span><br><span class="line">    create_robot_finger()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_robot_finger</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;create_robot_finger finder_number:&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(settings.ROBOT_FINGER_NUM))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过模块的方式将参数转移到外部，进行配置。<br>&emsp;&emsp;这个做法可以解决参数传递的问题。</p></blockquote><blockquote><p>&emsp;&emsp;缺点就是参数管理会比较麻烦，通常是将全局配置的参数都放到一个文件方便集中管理。<br>&emsp;&emsp;但是这样会导致不同的逻辑调用的参数都会塞到一个文件里面，并不是十分整洁。</p></blockquote><h3 id="方案二-注入依赖"><a href="#方案二-注入依赖" class="headerlink" title="方案二 注入依赖"></a>方案二 注入依赖</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dependencies <span class="keyword">import</span> Injector</span><br><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Robot</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    finger_num = attr.ib(default=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_robot</span>(<span class="params">self,robot_name</span>):</span><br><span class="line">        self.create_robot_hand()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_robot_hand</span>(<span class="params">self</span>):</span><br><span class="line">        self.create_robot_finger()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_robot_finger</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;create_robot_finger finder_number:&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(self.finger_num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span>(<span class="title class_ inherited__">Injector</span>):</span><br><span class="line">    finger_num = <span class="number">10</span></span><br><span class="line">    robot = Robot</span><br><span class="line">Container.robot.create_robot(<span class="string">&quot;robot name&quot;</span>)</span><br><span class="line"><span class="comment"># 打印 create_robot_finger finder_number:10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `dependencies` 的实现等价于下面的代码</span></span><br><span class="line">robot = Robot(finger_num=<span class="number">10</span>)</span><br><span class="line">robot.create_robot(<span class="string">&quot;robot name&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;使用 <code>dependencies</code> 库实现依赖注入，自动将容器内的数据填充到 类的实例化过程中。<br>&emsp;&emsp;通过类的属性实现参数传递。</p></blockquote><h2 id="dependencies-介绍"><a href="#dependencies-介绍" class="headerlink" title="dependencies 介绍"></a>dependencies 介绍</h2><blockquote><p>&emsp;&emsp;通过上面的案例可以看到。<br>&emsp;&emsp;<code>dependencies</code> 可以自动实例化类，填充类初始化需要的参数。<br>&emsp;&emsp;但它的功能还远不止这么简单。<br>&emsp;&emsp;它还可以实现多个类实例化的自动填充，只要参数变量名命名配置好即可。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dependencies <span class="keyword">import</span> Injector</span><br><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Robot</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    servo = attr.ib()</span><br><span class="line">    controller = attr.ib()</span><br><span class="line">    settings = attr.ib()</span><br><span class="line">    di_environment = attr.ib()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;controller di_environment&quot;</span>,self.controller.di_environment)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;self di_environment&quot;</span>,self.di_environment)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;settings threshold&quot;</span>,self.settings.threshold)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;servo threshold&quot;</span>,self.servo.threshold)</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Servo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    threshold = attr.ib()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Controller</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    di_environment = attr.ib()</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Settings</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    threshold = attr.ib()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span>(<span class="title class_ inherited__">Injector</span>):</span><br><span class="line">    threshold = <span class="number">1</span></span><br><span class="line">    di_environment = <span class="string">&quot;production&quot;</span></span><br><span class="line">    </span><br><span class="line">    robot = Robot</span><br><span class="line">    servo = Servo</span><br><span class="line">    settings = Settings</span><br><span class="line">    controller = Controller</span><br><span class="line"></span><br><span class="line">Container.robot.run()</span><br><span class="line"><span class="comment"># 打印: </span></span><br><span class="line"><span class="comment"># controller di_environment production</span></span><br><span class="line"><span class="comment"># self di_environment production</span></span><br><span class="line"><span class="comment"># settings threshold 1</span></span><br><span class="line"><span class="comment"># servo threshold 1</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 <code>dependencies</code> 可以根据属性命名自动填充多个类的参数数据。<br>&emsp;&emsp;container 的逻辑等价于下面的代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">threshold = <span class="number">1</span></span><br><span class="line">di_environment = <span class="string">&quot;production&quot;</span></span><br><span class="line">servo = Servo(threshold)</span><br><span class="line">settings = Settings(threshold)</span><br><span class="line">controller = Controller(di_environment)</span><br><span class="line">robot = Robot(servo,controller,settings,di_environment)</span><br><span class="line">robot.run()</span><br><span class="line"><span class="comment"># 打印: </span></span><br><span class="line"><span class="comment"># controller di_environment production</span></span><br><span class="line"><span class="comment"># self di_environment production</span></span><br><span class="line"><span class="comment"># settings threshold 1</span></span><br><span class="line"><span class="comment"># servo threshold 1</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;但是 <code>dependencies</code> 库根据参数的命名自动实例化对象，参数的调整变得简单可控。</p></blockquote><h2 id="dependencies-实现-caller-方法"><a href="#dependencies-实现-caller-方法" class="headerlink" title="dependencies 实现 caller 方法"></a>dependencies 实现 caller 方法</h2><p><a href="https://sobolevn.me/2019/03/enforcing-srp">参考文章</a></p><blockquote><p>&emsp;&emsp;利用 依赖注入 可以分离 依赖 和 业务 逻辑</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">from</span> dependencies <span class="keyword">import</span> Injector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Editor</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">install_language</span>(<span class="params">self,lang</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;install language:&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(lang))</span><br><span class="line"></span><br><span class="line">editor = Editor()</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s(<span class="params">frozen=<span class="literal">True</span>, slots=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangeLanguage</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    editor = attr.ib()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self,lang</span>):</span><br><span class="line">        self.editor.install_language(lang)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span>(<span class="title class_ inherited__">Injector</span>):</span><br><span class="line">    editor = editor</span><br><span class="line">    change_language = ChangeLanguage</span><br><span class="line"></span><br><span class="line">Container.change_language(<span class="string">&quot;en_US&quot;</span>)</span><br><span class="line"><span class="comment"># 打印: install language:en_US</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;利用 dependencies 可以构建出 caller 对象。<br>&emsp;&emsp;caller 虽然用类构建，但是调用方式和方法一致，可以方法需要用到的依赖用类实例化的方式进行注入。<br>&emsp;&emsp;实现依赖和传参的分离。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;依赖注入可以很好解决函数调用过深的问题，让代码结构更加清晰。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Python 依赖注入实现
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python blinker 库</title>
    <link href="https://blog.l0v0.com/posts/9ad5ab39.html"/>
    <id>https://blog.l0v0.com/posts/9ad5ab39.html</id>
    <published>2022-02-28T12:47:25.000Z</published>
    <updated>2022-08-11T11:40:18.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;Qt 内置了非常棒的 信号槽的函数。<br>&emsp;&emsp;可以让 UI 进行异步调用。<br>&emsp;&emsp;但是有些时候，并不想依赖 Qt 框架同时又能实现信号槽的功能。<br>&emsp;&emsp;这里可以使用 <code>blinker</code> 库来完成。</p></blockquote><p><a href="https://pythonhosted.org/blinker/">Github 地址</a><br><a href="https://github.com/jek/blinker">官方说明文档</a></p><h2 id="blinker-基本用法"><a href="#blinker-基本用法" class="headerlink" title="blinker 基本用法"></a>blinker 基本用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> signal,Signal</span><br><span class="line"></span><br><span class="line">initialized = signal(<span class="string">&#x27;initialized&#x27;</span>)</span><br><span class="line">initialized <span class="keyword">is</span> signal(<span class="string">&#x27;initialized&#x27;</span>)</span><br><span class="line">sig = Signal()</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;可以使用匿名信号槽，也可以使用带名称的信号槽。</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> signal</span><br><span class="line">send_data = signal(<span class="string">&#x27;send-data&#x27;</span>)</span><br><span class="line"><span class="meta">@send_data.connect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_data</span>(<span class="params">sender, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Caught signal from %r, data %r&quot;</span> % (sender, kw))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;received!&#x27;</span></span><br><span class="line">result = send_data.send(<span class="string">&#x27;anonymous&#x27;</span>, abc=<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 打印 [(&lt;function receive_data at 0x000002A3328D4DC8&gt;, &#x27;received!&#x27;)]</span></span><br><span class="line"><span class="comment"># 打印 Caught signal from &#x27;anonymous&#x27;, data &#123;&#x27;abc&#x27;: 123&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;可以用装饰器的方式连接信号槽<br>&emsp;&emsp;触发信号槽使用 send 方法<br>&emsp;&emsp;并且信号槽执行完可以拿到函数触发的返回值。</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line">dice_roll = signal(<span class="string">&#x27;dice_roll&#x27;</span>)</span><br><span class="line"><span class="meta">@dice_roll.connect_via(<span class="params"><span class="number">1</span></span>)</span></span><br><span class="line"><span class="meta">@dice_roll.connect_via(<span class="params"><span class="number">3</span></span>)</span></span><br><span class="line"><span class="meta">@dice_roll.connect_via(<span class="params"><span class="number">5</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">odd_subscriber</span>(<span class="params">sender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Observed dice roll %r.&quot;</span> % sender)</span><br><span class="line">result = dice_roll.send(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;另外一个特点就是可以根据触发的参数去触发相应注册的函数。<br>&emsp;&emsp;Qt 因为要使用 C++，这种注册方式会非常麻烦。</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line">initialized = signal(<span class="string">&quot;initialized&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@initialized.connect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize_call1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;initialize_call1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@initialized.connect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize_call2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;initialize_call2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@initialized.connect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize_call3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;initialize_call3&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, weakref <span class="keyword">in</span> initialized.receivers.items():</span><br><span class="line">    func = weakref()</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印: </span></span><br><span class="line"><span class="comment"># initialize_call1</span></span><br><span class="line"><span class="comment"># initialize_call2</span></span><br><span class="line"><span class="comment"># initialize_call3</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过信号槽的 <code>receivers</code> 方法可以获取到注册到信号槽的所有函数。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;这个库可以摆脱 Qt 的依赖实现函数的异步调用。<br>&emsp;&emsp;如果是 Qt 的环境建议还是使用 Qt 内置的 信号槽，这样可以支持 Qt 的多线程等处理。<br>&emsp;&emsp;但如果是 Python 环境下想要摆脱 Qt 的依赖，则推荐 blinker 来完成信号触发。<br>&emsp;&emsp;blinker 还有个好处是可以获取到注册的函数列表，而 Qt 基于 C++ 的并没有提供这个功能，只能通过 Meta 对象来判断这个信号槽是否有函数连接。 <a href="https://github.com/PyQt5/PyQt/blob/0c8e7d33d7a1da7a53a6b6d15869095f1626faf0/Demo/IsSignalConnected.py">参考实现</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      纯 Python 信号槽库
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python marshmallow 库</title>
    <link href="https://blog.l0v0.com/posts/2c8022e3.html"/>
    <id>https://blog.l0v0.com/posts/2c8022e3.html</id>
    <published>2022-02-28T07:37:44.000Z</published>
    <updated>2022-08-11T11:40:18.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;使用 Python 经常需要将一些数据序列化存储到本地<br>&emsp;&emsp;同时又想要反序列化将本地的 json 数据转换为对象。<br>&emsp;&emsp;通常的解决方案是使用数据库的 orm 方案，用 orm 对象来同步数据库。<br>&emsp;&emsp;数据全部附着在 orm 上，当 orm 上的数据改变时直接修改到数据库上。</p></blockquote><blockquote><p>&emsp;&emsp;但是在我的工作使用场景中，Data Centric 的流程更为推崇，因此输出一个 json 文件会更好一点。<br>&emsp;&emsp;那么 marshmallow 库就是一个很不错的选项。</p></blockquote><blockquote><p>&emsp;&emsp;另外这个库可以和 之前提到的 attrs 库可以结合使用。 <a href="./1f4cc7d1.html">文章</a></p></blockquote><p><a href="https://github.com/marshmallow-code/marshmallow">Github 地址</a><br><a href="https://marshmallow.readthedocs.io/en/stable/">官方说明文档</a></p><h2 id="什么是序列化-什么是-orm"><a href="#什么是序列化-什么是-orm" class="headerlink" title="什么是序列化 什么是 orm"></a>什么是序列化 什么是 orm</h2><blockquote><p>&emsp;&emsp;序列化就是将代码对象转换为纯数据进行存储<br>&emsp;&emsp;反序列化就是将纯数据重新转换为 代码对象<br>&emsp;&emsp;代码对象可以拥有特定的方法，可以直接触发对数据的处理。</p></blockquote><blockquote><p>&emsp;&emsp;orm 全称是 Object-relational Mappers<br>&emsp;&emsp;通常是一个定义了对象实例化规则的类。<br>&emsp;&emsp;通过操作这个类的实例就可以用代码的方式将数据进行互相转换。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/2c8022e3/01.png" alt="alt"></p><blockquote><p>&emsp;&emsp;上面的图片就是传统 orm 实现的效果，可以用 orm 对象来执行 sql 语句从而简化数据库同步的操作，同时也增加了代码的安全性。<br>&emsp;&emsp;这个操作实现了内存到硬盘桥梁，管理更加清晰方便。</p></blockquote><h2 id="marshmallow-介绍"><a href="#marshmallow-介绍" class="headerlink" title="marshmallow 介绍"></a>marshmallow 介绍</h2><h3 id="marshmallow-基本用法"><a href="#marshmallow-基本用法" class="headerlink" title="marshmallow 基本用法"></a>marshmallow 基本用法</h3><blockquote><p>&emsp;&emsp;和其他 orm 库一样，marshmallow 需要定义 Schema 类作为数据约束。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Album</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    title = attr.ib()</span><br><span class="line">    artist = attr.ib()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Artist</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    name = attr.ib()</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE 生成 Python 对象</span></span><br><span class="line">bowie = Artist(name=<span class="string">&quot;David Bowie&quot;</span>)</span><br><span class="line">album = Album(artist=bowie, title=<span class="string">&quot;Hunky Dory&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE 定义 Schema 来约束数据转换</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArtistSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.Str()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title = fields.Str()</span><br><span class="line">    artist = fields.Nested(ArtistSchema())</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE 通过 Schema 将对象转换为字典</span></span><br><span class="line">schema = AlbumSchema()</span><br><span class="line">result = schema.dump(album)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># &#123;&#x27;artist&#x27;: &#123;&#x27;name&#x27;: &#x27;David Bowie&#x27;&#125;, &#x27;title&#x27;: &#x27;Hunky Dory&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">result = schema.dumps(album)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment"># &#x27;&#123;&quot;artist&quot;: &#123;&quot;name&quot;: &quot;David Bowie&quot;&#125;, &quot;title&quot;: &quot;Hunky Dory&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">album = schema.loads(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(album))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(album)  <span class="comment"># &#123;&#x27;artist&#x27;: &#123;&#x27;name&#x27;: &#x27;David Bowie&#x27;&#125;, &#x27;title&#x27;: &#x27;Hunky Dory&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过 Schema 定义好数据对象的转换方式。<br>&emsp;&emsp;<code>dump</code> 可以将对象数据转换为字典，<code>dumps</code> 则是转换为 字符串<br>&emsp;&emsp;<code>load</code> 可以将字典转换为对象(默认是字典，需要额外的处理才可以)，<code>loads</code> 可以将字符串转换为对象。</p></blockquote><h3 id="反序列化为对象"><a href="#反序列化为对象" class="headerlink" title="反序列化为对象"></a>反序列化为对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, post_load</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Album</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    title = attr.ib()</span><br><span class="line">    artist = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Artist</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    name = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArtistSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.Str()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArtistSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.Str()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_artist</span>(<span class="params">self, data, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Artist(**data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title = fields.Str()</span><br><span class="line">    artist = fields.Nested(ArtistSchema())</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_album</span>(<span class="params">self, data, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Album(**data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bowie = Artist(name=<span class="string">&quot;David Bowie&quot;</span>)</span><br><span class="line">album = Album(artist=bowie, title=<span class="string">&quot;Hunky Dory&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE 通过 Schema 将对象转换为字典</span></span><br><span class="line">schema = AlbumSchema()</span><br><span class="line">result = schema.dumps(album)</span><br><span class="line">album = schema.loads(result)</span><br><span class="line"><span class="built_in">print</span>(album)  <span class="comment"># Album(title=&#x27;Hunky Dory&#x27;, artist=Artist(name=&#x27;David Bowie&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(album.title)  <span class="comment"># Hunky Dory</span></span><br><span class="line"><span class="built_in">print</span>(album.artist)  <span class="comment"># Artist(name=&#x27;David Bowie&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(album.artist.name)  <span class="comment"># David Bowie</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;通过加入 <code>post_load</code> 装饰器可以将字典数据做进一步的转换。<br>&emsp;&emsp;使用 attrs 库就不需要在 <code>__init__</code> 函数中写入大量传参和初始化数据的信息了。</p></blockquote><h3 id="嵌套-Schema"><a href="#嵌套-Schema" class="headerlink" title="嵌套 Schema"></a>嵌套 Schema</h3><p><a href="https://marshmallow.readthedocs.io/en/stable/nesting.html">官方文档</a></p><blockquote><p>&emsp;&emsp;通过 <code>fields.Nested</code> 的方法定义嵌套的对象，从而序列化和反序列化可以复用 Schema。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(<span class="title class_ inherited__">Dict</span>):</span><br><span class="line">    title = attr.ib()</span><br><span class="line">    author = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(<span class="title class_ inherited__">Dict</span>):</span><br><span class="line">    name = attr.ib()</span><br><span class="line">    books = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">potter = Book(<span class="string">&quot;potter&quot;</span>, <span class="string">&quot;JK&quot;</span>)</span><br><span class="line">JK = Author(<span class="string">&quot;JK&quot;</span>, [potter])</span><br><span class="line">potter.author = JK</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title = fields.Str()</span><br><span class="line">    author = fields.Nested(<span class="string">&quot;AuthorSchema&quot;</span>, only=(<span class="string">&quot;name&quot;</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.Str()</span><br><span class="line">    books = fields.<span class="type">List</span>(fields.Nested(<span class="string">&quot;BookSchema&quot;</span>, exclude=(<span class="string">&quot;author&quot;</span>,)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">schema = BookSchema()</span><br><span class="line">res = schema.dump(potter)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># &#123;&#x27;title&#x27;: &#x27;potter&#x27;, &#x27;author&#x27;: &#123;&#x27;name&#x27;: &#x27;JK&#x27;&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="自定义-Field"><a href="#自定义-Field" class="headerlink" title="自定义 Field"></a>自定义 Field</h3><p><a href="https://marshmallow.readthedocs.io/en/stable/custom_fields.html">官方文档</a></p><blockquote><p>&emsp;&emsp;默认提供的 field 可能不能满足需求。<br>&emsp;&emsp;有些库的 field 需要自定义复杂的 序列化 和 反序列化操作。<br>&emsp;&emsp;这个时候就可以定义自己的 field 来解决问题。</p></blockquote><blockquote><p>&emsp;&emsp;简单的情况可以使用 <code>Method</code> 和 <code>Function</code> 来解决问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.String()</span><br><span class="line">    created_at = fields.DateTime()</span><br><span class="line">    since_created = fields.Method(<span class="string">&quot;get_days_since_created&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_days_since_created</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> dt.datetime.now().day - obj.created_at.day</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.String()</span><br><span class="line">    created_at = fields.DateTime()</span><br><span class="line">    uppername = fields.Function(<span class="keyword">lambda</span> obj: obj.name.upper())</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;默认情况下是 serialize 函数，如果要自定义 deserialize 可以使用  <code>Method</code> 和 <code>Function</code> 传入 deserialize 参数进行指定。</p></blockquote><blockquote><p>&emsp;&emsp;复杂的情况就需要 <code>fields.Field</code> 类。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> fields, ValidationError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PinCode</span>(fields.Field):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Field that serializes to a string of numbers and deserializes</span></span><br><span class="line"><span class="string">    to a list of numbers.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_serialize</span>(<span class="params">self, value, attr, obj, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(d) <span class="keyword">for</span> d <span class="keyword">in</span> value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_deserialize</span>(<span class="params">self, value, attr, data, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="built_in">int</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> value]</span><br><span class="line">        <span class="keyword">except</span> ValueError <span class="keyword">as</span> error:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&quot;Pin codes must contain only digits.&quot;</span>) <span class="keyword">from</span> error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.String()</span><br><span class="line">    created_at = fields.DateTime()</span><br><span class="line">    pin_code = PinCode()</span><br></pre></td></tr></table></figure><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="双向嵌套数据"><a href="#双向嵌套数据" class="headerlink" title="双向嵌套数据"></a>双向嵌套数据</h3><blockquote><p>&emsp;&emsp;如果数据存在相互嵌套引用的关系，是无法通过原生的 json 内置库进行序列化的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> addict <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(<span class="title class_ inherited__">Dict</span>):</span><br><span class="line">    title = attr.ib()</span><br><span class="line">    author = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(<span class="title class_ inherited__">Dict</span>):</span><br><span class="line">    name = attr.ib()</span><br><span class="line">    books = attr.ib()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">potter = Book(<span class="string">&quot;potter&quot;</span>, <span class="string">&quot;JK&quot;</span>)</span><br><span class="line">JK = Author(<span class="string">&quot;JK&quot;</span>, [potter])</span><br><span class="line">potter.author = JK</span><br><span class="line"><span class="built_in">print</span>(json.dumps(potter))</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;f:/repo/_blog/source/_posts/Python/pacakge/02_marshmallow.py&quot;, line 22, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     print(json.dumps(potter))</span></span><br><span class="line"><span class="comment">#   File &quot;C:\tools\Anaconda3\lib\json\__init__.py&quot;, line 231, in dumps</span></span><br><span class="line"><span class="comment">#     return _default_encoder.encode(obj)</span></span><br><span class="line"><span class="comment">#   File &quot;C:\tools\Anaconda3\lib\json\encoder.py&quot;, line 199, in encode</span></span><br><span class="line"><span class="comment">#     chunks = self.iterencode(o, _one_shot=True)</span></span><br><span class="line"><span class="comment">#   File &quot;C:\tools\Anaconda3\lib\json\encoder.py&quot;, line 257, in iterencode</span></span><br><span class="line"><span class="comment">#     return _iterencode(o, 0)</span></span><br><span class="line"><span class="comment"># ValueError: Circular reference detected</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;marshmallow 则需要通过 Schema 的定义过滤掉特定的嵌套键值才可用。<br>&emsp;&emsp;并且加载数据的时候并不能还原它们原有的关联关系。<br>&emsp;&emsp;需要自己的手动去定义反序列化之后的操作。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> addict <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields,post_load</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(<span class="title class_ inherited__">Dict</span>):</span><br><span class="line">    title = attr.ib()</span><br><span class="line">    author = attr.ib(default=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(<span class="title class_ inherited__">Dict</span>):</span><br><span class="line">    name = attr.ib()</span><br><span class="line">    books = attr.ib(factory=<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">potter = Book(<span class="string">&quot;potter&quot;</span>, <span class="string">&quot;JK&quot;</span>)</span><br><span class="line">JK = Author(<span class="string">&quot;JK&quot;</span>, [potter])</span><br><span class="line">potter.author = JK</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title = fields.Str()</span><br><span class="line">    author = fields.Nested(<span class="string">&quot;AuthorSchema&quot;</span>, only=(<span class="string">&quot;name&quot;</span>,))</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_object</span>(<span class="params">self, data, **kwargs</span>):</span><br><span class="line">        book = Book(**data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;author&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">            books = book.author.books</span><br><span class="line">            <span class="keyword">if</span> book <span class="keyword">not</span> <span class="keyword">in</span> books:</span><br><span class="line">                books.append(book)</span><br><span class="line">        <span class="keyword">return</span> book</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.Str()</span><br><span class="line">    books = fields.<span class="type">List</span>(fields.Nested(<span class="string">&quot;BookSchema&quot;</span>, exclude=(<span class="string">&quot;author&quot;</span>,)))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_object</span>(<span class="params">self, data, **kwargs</span>):</span><br><span class="line">        author = Author(**data)</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> author.books:</span><br><span class="line">            book.author = author</span><br><span class="line">        <span class="keyword">return</span> author</span><br><span class="line"></span><br><span class="line">schema = BookSchema()</span><br><span class="line">res = schema.dumps(potter).data</span><br><span class="line"></span><br><span class="line">new_potter = schema.loads(res).data</span><br><span class="line"><span class="built_in">print</span>(potter)  <span class="comment"># Book(title=&#x27;potter&#x27;, author=Author(name=&#x27;JK&#x27;, books=[...]))</span></span><br><span class="line"><span class="built_in">print</span>(new_potter)  <span class="comment"># Book(title=&#x27;potter&#x27;, author=Author(name=&#x27;JK&#x27;, books=[...]))</span></span><br><span class="line"></span><br><span class="line">schema = AuthorSchema()</span><br><span class="line">res = schema.dumps(JK).data</span><br><span class="line">new_JK = schema.loads(res).data</span><br><span class="line"><span class="built_in">print</span>(JK)  <span class="comment"># Author(name=&#x27;JK&#x27;, books=[Book(title=&#x27;potter&#x27;, author=...)])</span></span><br><span class="line"><span class="built_in">print</span>(new_JK)  <span class="comment"># Author(name=&#x27;JK&#x27;, books=[Book(title=&#x27;potter&#x27;, author=...)])</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;关系重建需要手动处理。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;使用 marshmallow 可以很方便实现数据序列化。<br>&emsp;&emsp;使用的时候可以配合 <code>addict</code> 以及下一篇文章要介绍的 <code>cerberus</code> 结合使用。<br>&emsp;&emsp;可以让使用体验更上一层楼。</p></blockquote>]]></content>
    
    <summary type="html">
    
      序列化 orm 工具
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python cerberus 库</title>
    <link href="https://blog.l0v0.com/posts/8a7956b2.html"/>
    <id>https://blog.l0v0.com/posts/8a7956b2.html</id>
    <published>2022-02-28T07:37:38.000Z</published>
    <updated>2022-08-11T11:40:18.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;cerberus 翻译为地狱犬，是地狱的看门狗，比喻做数据的校验者。<br>&emsp;&emsp;这个库是专门用来校验做数据校验。<br>&emsp;&emsp;可以通过定义一个 schema 文件来快速校验数据是否复合 schema。</p></blockquote><p><a href="https://github.com/pyeve/cerberus">Github 地址</a><br><a href="https://docs.python-cerberus.org/en/stable/index.html">官方说明文档</a></p><h2 id="cerberus-介绍"><a href="#cerberus-介绍" class="headerlink" title="cerberus 介绍"></a>cerberus 介绍</h2><h3 id="cerberus-基本用法"><a href="#cerberus-基本用法" class="headerlink" title="cerberus 基本用法"></a>cerberus 基本用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cerberus <span class="keyword">import</span> Validator</span><br><span class="line"></span><br><span class="line">schema = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&quot;member&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;dict&quot;</span>,</span><br><span class="line">        <span class="string">&quot;require_all&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;schema&quot;</span>: &#123;<span class="string">&quot;address&quot;</span>: &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>&#125;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">v = Validator(schema)</span><br><span class="line">document = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;john doe&quot;</span>, <span class="string">&quot;member&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">result = v.validate(document)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 打印 False</span></span><br><span class="line"><span class="built_in">print</span>(v.errors)  <span class="comment"># 打印 &#123;&#x27;member&#x27;: [&#123;&#x27;address&#x27;: [&#x27;required field&#x27;]&#125;]&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;主要用法就是定义一个规范。<br>&emsp;&emsp;cerberus 会根据这个规范对数据进行校验。<br>&emsp;&emsp;这其中的规则既可以根据官方文档添加，也可以继承 Validator 实现自定义的规则。</p></blockquote><h3 id="cerberus-嵌套检查"><a href="#cerberus-嵌套检查" class="headerlink" title="cerberus 嵌套检查"></a>cerberus 嵌套检查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cerberus <span class="keyword">import</span> schema_registry</span><br><span class="line"></span><br><span class="line">schema_registry.add(<span class="string">&quot;non-system user&quot;</span>, &#123;<span class="string">&quot;uid&quot;</span>: &#123;<span class="string">&quot;min&quot;</span>: <span class="number">1000</span>, <span class="string">&quot;max&quot;</span>: <span class="number">0xFFFF</span>&#125;&#125;)</span><br><span class="line">schema = &#123;</span><br><span class="line">    <span class="string">&quot;sender&quot;</span>: &#123;<span class="string">&quot;schema&quot;</span>: <span class="string">&quot;non-system user&quot;</span>, <span class="string">&quot;allow_unknown&quot;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">    <span class="string">&quot;receiver&quot;</span>: &#123;<span class="string">&quot;schema&quot;</span>: <span class="string">&quot;non-system user&quot;</span>, <span class="string">&quot;allow_unknown&quot;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;导入 schema_registry 添加到里面的 schema 可以被别的地方复用。<br>&emsp;&emsp;别的 schema 只要输入相应的字符串就可以复用 schema<br>&emsp;&emsp;或者也可以通过接入字典变量的方式来复用 schema </p></blockquote><h3 id="cerberus-自定义检查功能"><a href="#cerberus-自定义检查功能" class="headerlink" title="cerberus 自定义检查功能"></a>cerberus 自定义检查功能</h3><blockquote><p>&emsp;&emsp;扩展检查规则可以通过继承 <code>Validator</code> 来实现，非常简单方便。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cerberus <span class="keyword">import</span> Validator</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyValidator</span>(<span class="title class_ inherited__">Validator</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_validate_is_odd</span>(<span class="params">self, constraint, field, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; Test the oddity of a value.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The rule&#x27;s arguments are validated against this schema:</span></span><br><span class="line"><span class="string">        &#123;&#x27;type&#x27;: &#x27;boolean&#x27;&#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> constraint <span class="keyword">is</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">bool</span>(value &amp; <span class="number">1</span>):</span><br><span class="line">            self._error(field, <span class="string">&quot;Must be an odd number&quot;</span>)</span><br><span class="line"></span><br><span class="line">schema = &#123;<span class="string">&#x27;amount&#x27;</span>: &#123;<span class="string">&#x27;is odd&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;integer&#x27;</span>&#125;&#125;</span><br><span class="line">v = MyValidator(schema)</span><br><span class="line">v.validate(&#123;<span class="string">&#x27;amount&#x27;</span>: <span class="number">10</span>&#125;)  <span class="comment"># 打印 False</span></span><br></pre></td></tr></table></figure><h2 id="结合-marshmallow-使用"><a href="#结合-marshmallow-使用" class="headerlink" title="结合 marshmallow 使用"></a>结合 marshmallow 使用</h2><blockquote><p>&emsp;&emsp;使用 cerberus 的 schema 可以让校验规则统一到一个地方进行配置。<br>&emsp;&emsp;配置更加清晰，查找也比较方便。<br>&emsp;&emsp;相较于使用 <code>attrs</code> 或者 <code>marshmallow</code> 提供校验功能。<br>&emsp;&emsp;cerberus 可以更加清晰地配置和修改。</p></blockquote><blockquote><p>&emsp;&emsp;我上一篇文章介绍了使用 <code>marshmallow</code> 可以很方便地对数据进行序列化。<br>&emsp;&emsp;同时它也可以对每一个 field 编写函数进行数据校验，但是如果使用 嵌套 Schema 的话<br>&emsp;&emsp;这些校验方法东一块西一块，配置和修改都非常繁琐。<br>&emsp;&emsp;这个使用可以结合 <code>marshmallow</code> 的 <code>validates_schema</code> 装饰器通过函数调用 cerberus 进行数据校验。 <a href="https://marshmallow.readthedocs.io/en/stable/upgrading.html?highlight=validate_schema#schema-validators">marshmallow 文档</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, validates_schema, ValidationError</span><br><span class="line"><span class="keyword">from</span> cerberus <span class="keyword">import</span> Validator</span><br><span class="line"></span><br><span class="line">schema = &#123;</span><br><span class="line">    <span class="string">&quot;field_a&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;required&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;min&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;max&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">validator = Validator(schema)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    field_a = fields.Int(required=<span class="literal">True</span>)</span><br><span class="line">    field_b = fields.Int(required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @validates_schema(<span class="params">pass_original=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_schema</span>(<span class="params">self, data, original_data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> validator.validate(original_data):</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(validator.errors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">schema = MySchema()</span><br><span class="line">document = &#123;</span><br><span class="line">    <span class="string">&quot;field_a&quot;</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;field_b&quot;</span>: -<span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">res, err = schema.load(document)</span><br><span class="line"><span class="built_in">print</span>(err)  <span class="comment"># 打印 &#123;&#x27;_schema&#x27;: [&#123;&#x27;field_a&#x27;: [&#x27;min value is 0&#x27;], &#x27;field_b&#x27;: [&#x27;unknown field&#x27;]&#125;]&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这样就可以实现反序列化数据的同时进行数据校验。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;cerberus 其实也可以做数据的 coerce ，实现一定程度的序列化功能。<br>&emsp;&emsp;不过如果需要嵌套的话，还是用 marshmallow 进行处理比较方便。<br>&emsp;&emsp;而且 marshmallow 嵌套调用也可以配合着 cerberus 顺便进行数据校验。</p></blockquote>]]></content>
    
    <summary type="html">
    
      基于 schema 字典数据校验库
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python decorator &amp; wrapt 库</title>
    <link href="https://blog.l0v0.com/posts/b9593ce4.html"/>
    <id>https://blog.l0v0.com/posts/b9593ce4.html</id>
    <published>2022-02-28T03:13:26.000Z</published>
    <updated>2022-08-11T11:40:18.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;Python 的装饰器是个好东西，自从加入了语法糖 <code>@</code> 之后。<br>&emsp;&emsp;装饰器方法可以实现很多功能，同时又不会把代码给弄乱。<br>&emsp;&emsp;这里会剖析何为装饰器，并且推荐两个简化装饰器的库</p></blockquote><h2 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器</h2><blockquote><p>&emsp;&emsp;装饰器可以在函数裹上一层壳，在函数调度前和调度后触发新的逻辑。<br>&emsp;&emsp;这样可以在原有的逻辑不动的情况下，添加新的逻辑。<br>&emsp;&emsp;比如修改函数的传参，修改函数的返回值。<br>&emsp;&emsp;也可以通过装饰器给原来简单的函数添加新的功能。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco_func</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;before call&quot;</span>)</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;after call&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;on running&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call_func()</span><br><span class="line"><span class="comment"># 打印如下</span></span><br><span class="line"><span class="comment"># before call</span></span><br><span class="line"><span class="comment"># on running</span></span><br><span class="line"><span class="comment"># after call</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;装饰器的本质其实下面这种写法的语法糖。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;on running&quot;</span>)</span><br><span class="line"></span><br><span class="line">call_func = deco_func(call_func)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;两者的本质是一样的，但是用语法糖可以更加清晰看到这个函数被什么所包裹。<br>&emsp;&emsp;另外实现装饰器的方法还可以用类来实现。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DecoratorClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,func</span>):</span><br><span class="line">        self.func = func</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self,*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;before call&quot;</span>)</span><br><span class="line">        result=  self.func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;after call&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><hr><blockquote><p>&emsp;&emsp;上面实现的装饰器不能携带参数，如果需要传入参数需要返回一个装饰器</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deco_func</span>(<span class="params">arg1=<span class="number">1</span>,arg2=<span class="number">2</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(arg1,arg2)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;before call&quot;</span>)</span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;after call&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco_func(<span class="params">arg1=<span class="number">3</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;on running&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call_func()</span><br><span class="line"><span class="comment"># 3 2</span></span><br><span class="line"><span class="comment"># before call</span></span><br><span class="line"><span class="comment"># on running</span></span><br><span class="line"><span class="comment"># after call</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;这里需要三重函数嵌套会让装饰器繁琐且复杂。<br>&emsp;&emsp;而且由于装饰器返回的函数和源函数是不一致的，默认情况下无法继承 <code>__doc__</code> 等函数属性。<br>&emsp;&emsp;解决这个问题需要给嵌套里面的函数加上 <a href="mailto:`@functools.wraps">`@functools.wraps</a>(func)` 的装饰器来同步才行。 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco_func</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">  @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><h2 id="decorator-库介绍"><a href="#decorator-库介绍" class="headerlink" title="decorator 库介绍"></a>decorator 库介绍</h2><blockquote><p>&emsp;&emsp;想要解决这个问题有两个库可以推荐 <code>decorator</code> &amp; <code>wrapt</code></p></blockquote><table><thead><tr><th>Python 库</th><th>wrapt</th><th>decorator</th></tr></thead><tbody><tr><td>类装饰</td><td>✔</td><td>❌</td></tr><tr><td>受欢迎程度</td><td>✔</td><td>❌</td></tr><tr><td>简洁</td><td>❌</td><td>✔</td></tr><tr><td>性能</td><td>❌</td><td>✔</td></tr></tbody></table><blockquote><p>&emsp;&emsp;wrapt 解决的问题更多，比 decorator 更加流行。<br>&emsp;&emsp;decorator 则使用简单且方便，而且性能比 wrapt 要好。<br>&emsp;&emsp;可以根据实际的使用情况来选择。</p></blockquote><h3 id="装饰案例"><a href="#装饰案例" class="headerlink" title="装饰案例"></a>装饰案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="keyword">from</span> decorator <span class="keyword">import</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">warn_slow</span>(<span class="params">func, timelimit=<span class="number">60</span>, *args, **kw</span>):</span><br><span class="line">    t0 = time.time()</span><br><span class="line">    result = func(*args, **kw)</span><br><span class="line">    dt = time.time() - t0</span><br><span class="line">    <span class="keyword">if</span> dt &gt; timelimit:</span><br><span class="line">        logging.warn(<span class="string">&#x27;%s took %d seconds&#x27;</span>, func.__name__, dt)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.info(<span class="string">&#x27;%s took %d seconds&#x27;</span>, func.__name__, dt)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">@warn_slow  </span><span class="comment"># warn if it takes more than 1 minute</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess_input_files</span>(<span class="params">inputdir, tempdir</span>):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@warn_slow(<span class="params">timelimit=<span class="number">600</span></span>)  </span><span class="comment"># warn if it takes more than 10 minutes</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_calculation</span>(<span class="params">tempdir, outdir</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decorator <span class="keyword">import</span> decorator</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">with_arguments</span>(<span class="params">func, myarg1=<span class="number">2</span>, myarg2=<span class="number">3</span>, *args, **kwargs</span>):</span><br><span class="line">    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">@with_arguments(<span class="params">myarg1=<span class="number">1</span>,myarg2=<span class="number">2</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>decorator</code> 库只需要一个装饰器就可以让函数同时支持带参数和不带参数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wrapt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">with_arguments</span>(<span class="params">myarg1, myarg2</span>):</span><br><span class="line"><span class="meta">    @wrapt.decorator</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">wrapped, instance, args, kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> wrapped(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@with_arguments(<span class="params"><span class="number">1</span>, <span class="number">2</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;<code>wrapt</code> 库则还是需要使用嵌套函数才能实现，但是可以简化一个函数嵌套。</p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decorator <span class="keyword">import</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pass_through</span>(<span class="params">func, timelimit=<span class="number">60</span>, *args, **kw</span>):</span><br><span class="line">    <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pass_through</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function_im</span>(<span class="params">cls, *args</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#   File &quot;&lt;decorator-gen-1&gt;&quot;, line 3, in pass_through</span></span><br><span class="line"><span class="comment">#   File &quot;c:\_thm\rez_local_cache\ext\decorator\4.4.2\site-packages\decorator.py&quot;, line 252, in decorate        </span></span><br><span class="line"><span class="comment">#     evaldict, __wrapped__=func)</span></span><br><span class="line"><span class="comment">#   File &quot;c:\_thm\rez_local_cache\ext\decorator\4.4.2\site-packages\decorator.py&quot;, line 213, in create</span></span><br><span class="line"><span class="comment">#     self = cls(func, name, signature, defaults, doc, module)</span></span><br><span class="line"><span class="comment">#   File &quot;c:\_thm\rez_local_cache\ext\decorator\4.4.2\site-packages\decorator.py&quot;, line 143, in __init__        </span></span><br><span class="line"><span class="comment">#     raise TypeError(&#x27;You are decorating a non function: %s&#x27; % func)</span></span><br><span class="line"><span class="comment"># TypeError: You are decorating a non function: &lt;class &#x27;__main__.Class&#x27;&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;decorator 不能装饰类，但是 <code>wrapt</code> 可以做到</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wrapt</span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapt.decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pass_through</span>(<span class="params">wrapped, instance, args, kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(wrapped,instance)</span><br><span class="line">    res = wrapped(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;call Base&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pass_through</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Class.__wrapped__, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function_im</span>(<span class="params">self, *args</span>):</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Class))  <span class="comment"># &lt;class &#x27;FunctionWrapper&#x27;&gt;</span></span><br><span class="line">a = Class()</span><br><span class="line">a.function_im(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;wrapt 可以装饰类，但是装饰返回一个 <code>FunctionWrapper</code> 类型<br>&emsp;&emsp;会影响到 super 传参调用，需要调用 <code>wrapped</code> 才正常。<br>&emsp;&emsp;如果是 Python3 则直接使用 <code>super()</code> 可以生效</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;<code>wrapt</code> 库更加通用，但是如果不是复杂的情况， <code>decorator</code> 库就已经够用了。<br>&emsp;&emsp;<code>wrapt</code> 可以解决装饰类的时候，类信息的同步。</p></blockquote>]]></content>
    
    <summary type="html">
    
      装饰器优化库
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python pluggy 库</title>
    <link href="https://blog.l0v0.com/posts/7beafa88.html"/>
    <id>https://blog.l0v0.com/posts/7beafa88.html</id>
    <published>2022-02-28T03:13:26.000Z</published>
    <updated>2022-08-11T11:40:18.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;</p></blockquote><h2 id="什么是-pluggy"><a href="#什么是-pluggy" class="headerlink" title="什么是 pluggy"></a>什么是 pluggy</h2><blockquote><p>&emsp;&emsp;pluggy 是 pytest 团队开发的库，<br>&emsp;&emsp;用来解决给 pytest 写扩展插件的。<br>&emsp;&emsp;pluggy 提供了方便的 API 可以很轻松的扩展框架的逻辑。</p></blockquote><p><a href="https://github.com/pytest-dev/pluggy">Github仓库</a><br><a href="https://pluggy.readthedocs.io/en/latest/">文档地址</a></p><h2 id="pluggy-的调度方式"><a href="#pluggy-的调度方式" class="headerlink" title="pluggy 的调度方式"></a>pluggy 的调度方式</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/2c8022e3/a27504a12b44751e025e75587f27b489.jpeg" alt="image"></p><p><a href="https://viewer.diagrams.net/?tags=%7B%7D&amp;highlight=0000ff&amp;edit=_blank&amp;layers=1&amp;nav=1&amp;title=pluggy.drawio#R7VxLc%2BI4EP41qto5bMqW30cbyGZqkp3U5rDHlAIK9sRYlC1Ckl%2B%2Falk2GBlCIASY9Qm5LQk9vu7%2B1JKMrN7k5a%2BcTOMbNqIpwsboBVl9hLHpWrb4AcmrkpguLiXjPBkp2UJwl7xRJTSUdJaMaNHIyBlLeTJtCocsy%2BiQN2Qkz9m8me2Rpc1%2FnZIx1QR3Q5Lq0n%2BTEY9LqY%2B9hfyKJuOY1%2F0LyjcPZPg0ztksU%2F%2BHsHVpXoaDQfl6Qqq6VEeLmIzYfElkDZDVyxnjZWry0qMpDG41bJfR3P3xdGUUf9vhaGgX7Oou%2FrOs7PIjReoe5jTjn1y1o%2FrGX6vxpCMxvOqR5TxmY5aRdLCQRsNZ%2FkyhVkM8yAGUT6Z4Kp4oH8bq1aL0NWNTleMX5fxVoYjMOBOimE9S9faRZbzHUpbLtlhm33IcD%2BrlOXuiS29sx4uCPpRI0nRJHvr9sN8T8rJf0JkVmLwziCpfwWb5kG7Ip9SGk3xMN9Zn1lAROkjZhPL8VRTMaUp48txsHVG6MK7z1UVvWSLajQ2luLX6KbW1XLdZRdkwVWoBC5FYasZCJMHyAeCo7j%2BTdKa6cMXYUzGlwxuSP9EcYTcVwxI9QGoMqT9ileGb%2Fg4NHBQOUBCigY2iAPmBDss0FRYF4DePE07vpkROz1xYtSaECPwHzMhj8gK4XEIogDIlDzSNatVvg04DxJ%2BNyGeac%2FqyAyZ1CKla7BUkVM%2FzhTU0K7TEDUtorEddAy8fBYfVWZUdrYqzpVXBwZ5WZb%2F5dbv5Pez8WtZR59fr5vfA82scc36dVuedTKbpRucNGdY4b99BkSeddx8FVuXOB2jgIX%2BAIkPHU%2BfO17hzbDsNf%2B4e3Z2bLdPXmYNtzIG7pTk4qjd3NWtwm87GSXZDMrF2bjMG08m3TqG3VmjPxBdNlT4Bio47CrejTgfbUnR8TKUONKWeTi7AiXeKu4fiOtg6tuKafqe4uymuWUWn39Nc95iKa%2BqaS0aje9C9oo17u0C8o5KEhyg0ZMKXlNuoPbiQBsgXXLwHCTELIW5F0TXo8IrWp8k4E%2BmhmARRlRWBniVDkobqxSQZjSTIclokb%2BRB1gdgmkLsUQ6PEyGnvwEra0xHxjK6Sb3VjoL6S1QH6t9HjL9R740L0whwQ%2FHVP%2B4atK2ysMfHgh4kHos7jn5os%2BDsaRZk0TDPyetSBqUk6%2BP8fjO6a2JnBT5ljZ8LJrMD04HBtO%2BKbycwWUYTTI73BWCqhmTJoYW336VPkp4q8NDAR6GJQp3ZFPNkkhLpBQADFQABRsM4SUfX5JXNYJgLLrxH9RTFLE%2FeRH5SAUi8zrmCl1j5NPGh3Myi0B1UVgEZnBq9rfBhrohuyEsj4zUpeNVAlqZkWiSld4KCEwGKJIsY52yi6ckGCq0auCd7PhRLxtbq%2FlMLR7bbOLJhH4pDYQ1ySXGfZPeFYDFUQ5kYEK4NnRr0FqBUjCilj7yFD3EwalEhllFJNr6Wefr2QvKPGgAQMVH2MZVnCmLBomgmEcEJX8uigNb1DLEqEXwK98SzuXiWFGsqzGuPZaIvJJGTSgUi5xRQ%2Bflg2wNSazClMFRFJ96DEHYPhSBLQ1BBU0E279nDL1gFdxg6dQw5%2BNgY0s9IDHNKOL0XM5ONiphMO1t0%2Bjjy%2FCPjCOve7Ornzx8dg%2FpdGJS7ssZzvRYGpaj6FzEorPs%2FFT%2B%2B6JjUSVmvddsMG5hUG5QOZ710L1ghqWNU54WlNkb1tVjSD65UWOqY1fnhqY1ZfSmerG4vbcc4J1Yjd9p7aVUrl%2BzFLOFpcTF97YjyGRJlBzeJMm45RtO2NKsMzecDTN%2Bs7ejxabmgNVu9pxJorILnXaDxbDF09ECj1XJbqqMx29AYC58DjbF1G5HTcVJwdbTHRf4lCrA8fh%2BhqP1k5%2F%2FkaI%2B1ZmO9PtpjeL7bJBHl0%2Bke7alAujT9i2VuR2V%2FDyprWlty2crbfL4X0UO%2BXVDlBNmI9fGA75eyEdvu2MiOnxQ4iwPKVSuX7ETKxp0fOk8%2F5K%2FsPW7rhg639WjrdKeLqZyUB7JP%2FPCW3R3eOncMHT2mYutbjR0bPj8cHf3wlu1pOGoJ2JSJ0IFXoQFnugYefA3Jt%2BGIVyTva0GiBwUh4cirXPK7C6JUy7UwH0XiLwx1MKy89yUSUSiLh7KeAPkmVAWSAQpDUZpMAHPZQwE%2F198vf6LylJmoyR9UtVZffIBmOnCtLApbmrBSWVuOdvU5UIQKVgZFSSLNDyjpAc4bbiZkePXSqem3GEOvLTRwqDuntr6PWl4lXr5XuARYgEQfsBw4cBERMOih0JWvBH5Mifee%2FNyXvKnoWwqVZZ76GyK%2BqFzWAwkZ6Ax6kIZLjxacdoQ8bvPf9WCorhwBvAp82TAB%2FLKUBZAuKwSdEMV95NeaJPslkA%2FfNKn7JS9eij9tvZa5kgc0%2B1Kqnaw5DCslsmQeW17dLM2AtTjO2VJKNx513%2FWmOjBuYqg75dtpNeSZ%2BnKo%2FiDLnqonHhffjixjxYsvdFqD%2FwA%3D">draw.io链接</a></p><p><strong>pluggy 有三大要素</strong></p><p><code>HookspecMarker</code>(hookspec) 定义<br><code>HookimplMarker</code>(hookimpl) 实现<br><code>PluginManager</code>(pm) 插件管理器</p><blockquote><p>&emsp;&emsp;spec 定义了可以暴露的方法，可以通过 pm.hook 去调用对应的方法<br>&emsp;&emsp;调用的时候会逐个执行 impl 注册的插件，按 LIFO 后进先出的方式进行。</p></blockquote><h2 id="pluggy-案例代码"><a href="#pluggy-案例代码" class="headerlink" title="pluggy 案例代码"></a>pluggy 案例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pluggy</span><br><span class="line"></span><br><span class="line">hookspec = pluggy.HookspecMarker(<span class="string">&quot;myproject&quot;</span>)</span><br><span class="line">hookimpl = pluggy.HookimplMarker(<span class="string">&quot;myproject&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySpec</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A hook specification namespace.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @hookspec</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myhook</span>(<span class="params">self, arg1, arg2</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;My special little hook that you can customize.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Plugin_1</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A hook implementation namespace.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @hookimpl</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myhook</span>(<span class="params">self, arg1, arg2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;inside Plugin_1.myhook()&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> arg1 + arg2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Plugin_2</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A 2nd hook implementation namespace.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @hookimpl</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myhook</span>(<span class="params">self, arg1, arg2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;inside Plugin_2.myhook()&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> arg1 - arg2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># create a manager and add the spec</span></span><br><span class="line">pm = pluggy.PluginManager(<span class="string">&quot;myproject&quot;</span>)</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"><span class="comment"># register plugins</span></span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line"><span class="comment"># call our `myhook` hook</span></span><br><span class="line">results = pm.hook.myhook(arg1=<span class="number">1</span>, arg2=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;代码来自官方文档<br>&emsp;&emsp;执行会先触发 <code>Plugin_2</code> 再触发 <code>Plugin_1</code></p></blockquote><blockquote><p>&emsp;&emsp;上述是 pluggy 最简单的用法<br>&emsp;&emsp;还有 <code>firstresult</code> <code>hookwrapper</code> 等用法<br>&emsp;&emsp;可以参照文档说明学习，用法非常灵活。</p></blockquote><hr><blockquote><p>&emsp;&emsp;<code>pm.hook.myhook</code> 就是在源代码中的 代码桩。<br>&emsp;&emsp;之前注册的插件都会在这个代码桩中逐一触发。<br>&emsp;&emsp;pluggy 是可配置的，可以用代码动态地修改注册地插件，实时改变运行的逻辑。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;使用 pluggy 可以将功能拆分成小文件</p></blockquote><ol><li>更好适配代码规范</li><li>逻辑更加简洁清晰，查找方便</li><li>功能扩展简单</li><li>启用禁用功能很方便</li></ol>]]></content>
    
    <summary type="html">
    
      pytest 团队出品 | 让代码变得可扩展
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python addict 库</title>
    <link href="https://blog.l0v0.com/posts/531dbb5a.html"/>
    <id>https://blog.l0v0.com/posts/531dbb5a.html</id>
    <published>2022-02-28T03:13:26.000Z</published>
    <updated>2022-08-11T11:40:18.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;</p></blockquote><h2 id="attrs-介绍"><a href="#attrs-介绍" class="headerlink" title="attrs 介绍"></a>attrs 介绍</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;</p></blockquote>]]></content>
    
    <summary type="html">
    
      像 JavaScript 一样使用字典
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>Python attrs 库</title>
    <link href="https://blog.l0v0.com/posts/1f4cc7d1.html"/>
    <id>https://blog.l0v0.com/posts/1f4cc7d1.html</id>
    <published>2022-02-28T02:13:51.000Z</published>
    <updated>2022-08-11T11:40:18.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;作为 TA 工具人，已经用 Python 很长一段时间，很多内置库都使用得得心应手了。<br>&emsp;&emsp;最近开始尝试了解一些第三方库，从而能够更好解决一些实际运用遇到的问题。<br>&emsp;&emsp;attrs 这个库是一个非常不错的代码优化方案。<br>&emsp;&emsp;可以简略了很多类描述的方法。</p></blockquote><p><a href="https://github.com/python-attrs/attrs">Github 地址</a><br><a href="https://www.attrs.org/en/stable/">官方说明文档</a></p><h2 id="attrs-解决的问题"><a href="#attrs-解决的问题" class="headerlink" title="attrs 解决的问题"></a>attrs 解决的问题</h2><blockquote><p>&emsp;&emsp;attrs 统一了类属性描述，让代码更加简洁可读。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArtisanalClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ArtisanalClass(a=&#123;&#125;, b=&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(self.a, self.b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:</span><br><span class="line">            <span class="keyword">return</span> (self.a, self.b) == (other.a, other.b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NotImplemented</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ne__</span>(<span class="params">self, other</span>):</span><br><span class="line">        result = self.__eq__(other)</span><br><span class="line">        <span class="keyword">if</span> result <span class="keyword">is</span> <span class="literal">NotImplemented</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NotImplemented</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:</span><br><span class="line">            <span class="keyword">return</span> (self.a, self.b) &lt; (other.a, other.b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NotImplemented</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:</span><br><span class="line">            <span class="keyword">return</span> (self.a, self.b) &lt;= (other.a, other.b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NotImplemented</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__gt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:</span><br><span class="line">            <span class="keyword">return</span> (self.a, self.b) &gt; (other.a, other.b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NotImplemented</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ge__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:</span><br><span class="line">            <span class="keyword">return</span> (self.a, self.b) &gt;= (other.a, other.b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NotImplemented</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hash</span>((self.__class__, self.a, self.b))</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;如果要写一个完整的类需要加上很多内置方法的实现。<br>&emsp;&emsp;这会导致大量的重复工作，而且代码会非常冗长。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   a = attr.ib()</span><br><span class="line">   b = attr.ib()</span><br></pre></td></tr></table></figure><p>代码例子来源于 <a href="https://www.attrs.org/en/20.3.0/why.html#hand-written-classes">文档</a></p><blockquote><p>&emsp;&emsp;attrs 只需要简单的描述就可以帮你完成上面一大堆的功能，非常有用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM_Controller</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,polyName,col,row,conPre,size,shape,color,shape</span>):</span><br><span class="line">        self.start = start</span><br><span class="line">        self.polyName = polyName</span><br><span class="line">        self.col = col</span><br><span class="line">        self.row = row</span><br><span class="line">        self.conPre = conPre</span><br><span class="line">        self.size = size</span><br><span class="line">        self.shape = shape</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM_Controller</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    polyName = attr.ib()</span><br><span class="line">    col = attr.ib()</span><br><span class="line">    row = attr.ib()</span><br><span class="line">    conPre = attr.ib()</span><br><span class="line">    size = attr.ib()</span><br><span class="line">    shape = attr.ib()</span><br><span class="line">    color = attr.ib()</span><br><span class="line">    shape = attr.ib()</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;上面就是实战中的例子</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/1f4cc7d1/01.png" alt="alt"></p><blockquote><p>&emsp;&emsp;打印对象的时候使用 attrs 也会变得清晰。</p></blockquote><h2 id="attrs-介绍"><a href="#attrs-介绍" class="headerlink" title="attrs 介绍"></a>attrs 介绍</h2><h3 id="不可变类构建"><a href="#不可变类构建" class="headerlink" title="不可变类构建"></a>不可变类构建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="meta">@attr.s(<span class="params">frozen=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   a = attr.ib()</span><br><span class="line">   b = attr.ib()</span><br><span class="line"></span><br><span class="line">smart = SmartClass(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">smart.a = <span class="number">3</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#   File &quot;c:\_thm\rez_local_cache\ext\attrs\21.4.0\site-packages\attr\_make.py&quot;, line 642, in _frozen_setattrs</span></span><br><span class="line"><span class="comment">#     raise FrozenInstanceError()</span></span><br><span class="line"><span class="comment"># attr.exceptions.FrozenInstanceError</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;加入 frozen 参数可以让类初始化之后不可改变。</p></blockquote><h3 id="验证数据"><a href="#验证数据" class="headerlink" title="验证数据"></a>验证数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   a = attr.ib()</span><br><span class="line">   b = attr.ib()</span><br><span class="line"><span class="meta">   @a.validator</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">must_be_str</span>(<span class="params">self,attribute,value</span>):</span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value,<span class="built_in">str</span>):</span><br><span class="line">           <span class="keyword">raise</span> ValueError(<span class="string">&quot;must be a string type&quot;</span>)</span><br><span class="line"></span><br><span class="line">smart = SmartClass(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#   File &quot;&lt;attrs generated init __main__.SmartClass-2&gt;&quot;, line 5, in __init__</span></span><br><span class="line"><span class="comment">#   File &quot;&lt;stdin&gt;&quot;, line 8, in must_be_str</span></span><br><span class="line"><span class="comment"># ValueError: must be a string type</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;支持对初始化的数据进行校验。</p></blockquote><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   a = attr.ib(default=<span class="number">1</span>)</span><br><span class="line">   b = attr.ib(factory=<span class="built_in">list</span>)</span><br><span class="line">smart = SmartClass()</span><br><span class="line"><span class="built_in">print</span>(smart)  <span class="comment"># SmartClass(a=1, b=[])</span></span><br><span class="line">smart = SmartClass(b=<span class="number">2</span>,a=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(smart)  <span class="comment"># SmartClass(a=&#x27;a&#x27;, b=2)</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;参数添加默认值之后可以不进行传参，也可以用键值进行传参。<br>&emsp;&emsp;使用 attrs 构建类就变得更加灵活。</p></blockquote><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="mutable-容器"><a href="#mutable-容器" class="headerlink" title="mutable 容器"></a>mutable 容器</h3><blockquote><p>&emsp;&emsp;构建 mutable 容器的时候，需要用 factory 参数或者 <code>attr.ib(default=attr.factory(list))</code><br>&emsp;&emsp;参数默认值使用数组和字典这类 mutable 容器会导致很多问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">return_list</span>(<span class="params">a=[]</span>):</span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">a = return_list()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># [1]</span></span><br><span class="line">a = return_list()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># [1, 1] 这里的结果预期是 [1] 才对</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;虽然我们想要进入函数的时候 a 的默认值都是这个数组。<br>&emsp;&emsp;然而实际运行的时候赋值只发生了一次，并不会每次函数运行都重置默认值的。<br>&emsp;&emsp;所以参数不能使用 [] {} 这些容器，而是推荐使用 None，然后再函数中初始化</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">return_list</span>(<span class="params">a=<span class="literal">None</span></span>):</span><br><span class="line">    a = a <span class="keyword">if</span> a <span class="keyword">else</span> []</span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">a = return_list()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># [1]</span></span><br><span class="line">a = return_list()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;所以如果默认值想要为 数组 之类的，需要用 attrs 提供的 factory 方法。</p></blockquote><h3 id="hash-值"><a href="#hash-值" class="headerlink" title="hash 值"></a>hash 值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    a = attr.ib(default=<span class="number">1</span>)</span><br><span class="line">    b = attr.ib(factory=<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">smart = SmartClass()</span><br><span class="line">a = &#123;smart: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;f:/repo/_blog/source/_posts/Python/pacakge/01_attrs.py&quot;, line 11, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     a = &#123;smart: 1&#125;</span></span><br><span class="line"><span class="comment"># TypeError: unhashable type: &#x27;SmartClass&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;attrs 默认处理 <code>__hash__</code> 方法，所以无法把它当成键值使用。<br>&emsp;&emsp;然而不使用 attrs 装饰的话是可以的。<br>&emsp;&emsp;解决方法就是加上 <a href="mailto:`@attr.s">`@attr.s</a>(hash=False)` 就可以了。</p></blockquote><p><a href="https://www.attrs.org/en/20.3.0/hashing.html">参考文档 Hashing 的部分</a></p><h3 id="init-初始化"><a href="#init-初始化" class="headerlink" title="init 初始化"></a>init 初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    a = attr.ib(default=<span class="number">1</span>)</span><br><span class="line">    b = attr.ib(factory=<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(SmartClass,self).__init__(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">        </span><br><span class="line">smart = SmartClass()  <span class="comment"># 子类并没有打印数据输出</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;依照文档 attrs 的装饰器会覆盖掉原有的 <code>__init__</code><br>&emsp;&emsp;但是如果我们确实要在 <code>__init__</code> 进行数据处理，需要使用 <code>__attrs_post_init__</code> 方法<br>&emsp;&emsp;或者也可以使用继承的方式调用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    a = attr.ib(default=<span class="number">1</span>)</span><br><span class="line">    b = attr.ib(factory=<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__attrs_post_init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperClass</span>(<span class="title class_ inherited__">SmartClass</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(SuperClass, self).__init__(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">456</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">smart = SmartClass()  <span class="comment"># 打印 123</span></span><br><span class="line">sup = SuperClass()  <span class="comment"># 打印 123 456</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;Python3.7 加入了 dataclass 内置模块，基本上涵盖 attrs 大多数功能。<br>&emsp;&emsp;attrs 的好处在于老版本完美兼容 Python2 可以在 Maya 等 DCC 里面使用。<br>&emsp;&emsp;让代码编写更加紧凑和简洁。</p></blockquote>]]></content>
    
    <summary type="html">
    
      简化类描述神库
    
    </summary>
    
      <category term="Python" scheme="https://blog.l0v0.com/categories/Python/"/>
    
    
      <category term="ࠕPython" scheme="https://blog.l0v0.com/tags/%E0%A0%95Python/"/>
    
  </entry>
  
  <entry>
    <title>2021 年度总结</title>
    <link href="https://blog.l0v0.com/posts/2dac7475.html"/>
    <id>https://blog.l0v0.com/posts/2dac7475.html</id>
    <published>2022-01-09T13:45:52.000Z</published>
    <updated>2022-08-11T11:40:18.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;最近好长一段时间没有更新博客了<br>&emsp;&emsp;这个年度终结也大部分都是 1月1日就更新了，我硬是拖到了1月中旬<em>(:з」∠)</em><br>&emsp;&emsp;最近发生了很多事，有很多东西可以记录，但又不知道从哪里下笔的迷之感觉。</p></blockquote><h2 id="年度大事汇总"><a href="#年度大事汇总" class="headerlink" title="年度大事汇总"></a>年度大事汇总</h2><ol><li>活水去光子工作室</li><li>搭建 Unreal-PyToolkit 框架，博客大量更新自己的踩坑经历</li><li>折腾 PKM 的历程 具体可以看 <a href="https://blog.l0v0.com/posts/afa065b7.html">PKM文章总结</a></li><li>基金理财 (华夏全球优选派)</li><li>交到第一个女朋友❤</li></ol><h2 id="工作-amp-学习"><a href="#工作-amp-学习" class="headerlink" title="工作 &amp; 学习"></a>工作 &amp; 学习</h2><blockquote><p>&emsp;&emsp;一晃眼间，我已经毕业一年有余了，我是 2020 年毕业的，不过我从 2019 年年底就过来在魔方工作室实习。<br>&emsp;&emsp;到2021年10月份活水到光子，在魔方也有快两年了。<br>&emsp;&emsp;这个过程我们 TA 团队人员流失严重，在我活水同时还有其他人也选择了活水，仅仅2021年就基本走了一半的人<em>(:з」∠)</em><br>&emsp;&emsp;只能说这边根本留不住人，一方面 TA 比较抢手，这边的钱不够，另一方面是这边的团队建设真的不太行</p></blockquote><blockquote><p>&emsp;&emsp;关于这边的问题，其实我有很多话想要吐槽，但总归是在这里快两年了，虽有不愉快，也逼着自己成长了不少，我还是感谢的。</p></blockquote><blockquote><p>&emsp;&emsp;我来到魔方半年，还没有到毕业转正，我导师就跑去光子了。而且刚来两个星期就被分派到项目组里面，基本上都是靠自己自力更生解决问题为主。<br>&emsp;&emsp;所以那会挺焦虑的，而且作为 TA 一直在干 TD 的活，也有点名不副实<em>(:з」∠)</em></p></blockquote><blockquote><p>&emsp;&emsp;不过我的遭遇已经算好了，项目组里有个校招的角色美术更惨，当时角色模型组就两个正编，年后都跑路了、<br>&emsp;&emsp;刚过来导师没了，组里就他一个人<em>(:з」∠)</em>，所以这是什么神仙开局, 然后项目组之后调派另一个工作室的 6 级美术过来帮忙。<br>&emsp;&emsp;因为这个美术之前实习的时候在这个项目组待过。<br>&emsp;&emsp;所以紧靠两个人新人根本就没法把效果做好，对接好外包，把模型推到下游流程已经尽力了<em>(:з」∠)</em><br>&emsp;&emsp;而且由于项目是手绘风格，还一直招不到合适的人过来，最后好不容易招到了，整个组也就两人。<br>&emsp;&emsp;考核的时候由于模型效果没有提升，组内必须有一个人背星，那位校招生也只能默默承担。<br>&emsp;&emsp;ε=(´ο｀*)))，他的 2021 年开年是 2 星评价，年终大砍。我好歹还是拿了 4 星，所以有时候人比人比死人。</p></blockquote><blockquote><p>&emsp;&emsp;那为什么我能拿到 4 星呢？<br>&emsp;&emsp;主要还是因为，2020年年中的时候从 Weta 来了一个 TD 转 TA 的大佬，leader 将他定位成我们组的组长。<br>&emsp;&emsp;我当时转到中台做工具，支援多个项目，就在他身边学习了很多知识。<br>&emsp;&emsp;虽然很多都是靠看他写的代码学习的，并没有怎么请教他，支援的项目也不一样，但还是很感激。<br>&emsp;&emsp;他也能够理解我的工作，所以能够给我比较客观的评价。(因为组里的 leader 是个主美，忙项目组的事情就够呛了，基本不太了解我们的情况)<br>&emsp;&emsp;然而 2021 年开年终究还是要 TA 组给名额背锅，也导致后面年中的时候有人因此流失了。</p></blockquote><blockquote><p>&emsp;&emsp;2021 年春节结束之后，首先是有两个 TA 晋级的，晋级完成就活水去光子了。<br>&emsp;&emsp;到了 5 月份的时候，我们的组长也流失了，毕竟这边的流程很混乱，有很多流程根本推不动，也看不到头。<br>&emsp;&emsp;年中的时候那位背锅的 TA 也找到下家，直接离职了，而且他家在上海，本来也不用过来深圳，结果过来还背锅，他也算是仁至义尽了。<br>&emsp;&emsp;自从组长走了之后，组内就没了主心骨，我也觉得学不到东西，一直在干杂活，挺焦虑的。<br>&emsp;&emsp;加上那个时候开始帮项目组的一个美术搭建美术工具，结果我们都把方案定好了，准备推行的时候，程序leader 觉得方案不可行，来回折腾。<br>&emsp;&emsp;所以 5 月份非常难顶，当时有经验推动美术流程的是从天美过来的美术，我这个无能 TA 只能听他的建议来制定美术规范。<br>&emsp;&emsp;可能有更好地做法，但是我也没有足够的经验，至少他提的方案的确比起当前混乱的规范要好，所以我也就接受了。<br>&emsp;&emsp;当然为了做他的工具在 Unreal 里面调用 Qt 踩了非常多的坑，21年更新的很多博客都是和 Unreal Python Qt 开发相关的。<br>&emsp;&emsp;我也顺手推出了 <a href="https://github.com/FXTD-ODYSSEY/Unreal-PyToolkit">Unreal-PyToolkit</a> 开源框架<br>&emsp;&emsp;将我博客里面好一些的流程都整合到里面去了，只是由于离开魔方的原因，这个仓库目前就停更了。</p></blockquote><blockquote><p>&emsp;&emsp;基于上面的种种情况，加上我也快满一年可以活水了，所以我也非常想逃离<em>(:з」∠)</em><br>&emsp;&emsp;没想到有相同想法可不止我一个，我走了之后还有两个 TA 也跟着活水，魔方真的太难了。</p></blockquote><blockquote><p>&emsp;&emsp;最开始我联系我了前导师，想要他帮忙引荐一下，不过他已经挖了这边很多人了。<br>&emsp;&emsp;而且我这个过去他那边太明显了，可能不太好，加上当时光子扩招，他的小组编制爆了，我过不去。<br>&emsp;&emsp;所以最后是<a href="https://www.zhihu.com/people/shi-qi-xing-29">星哥</a>主动找我聊，后续也就顺理去了星哥的组下。</p></blockquote><hr><blockquote><p>&emsp;&emsp;曾经有一份搞 Houdini 的机会摆在我面前，我没有珍惜，毅然决然选择了光子，可能也是人生岔路的一种遗憾吧~<br>&emsp;&emsp;当时虽然和星哥谈妥了，但是魔方中台的 Falcon 组组长还是想争取一下，让我过去他们组。<br>&emsp;&emsp;那个时候我已经拿到了 光子 那边的活水邮件了，如果点确认就没有回头箭了。<br>&emsp;&emsp;想到星哥给我争取这个机会也是挺不容易的(后来我才得知，他们组里有人活水了，我才有这个机会过去)<br>&emsp;&emsp;加上光子比较国际化什么的，所以最后就放弃了去魔方中台，主要还是魔方太让我失望了<em>(:з」∠)</em><br>&emsp;&emsp;可能当时选择去那边，我的人生也会不一样吧，终究还是放不下 Houdini ，然而似乎和它没有什么缘分。</p></blockquote><blockquote><p>&emsp;&emsp;所以那段时间准备跑路了，就腾了一些时间来折腾 PKM 的事情，才有后面的 <a href="https://blog.l0v0.com/posts/afa065b7.html">PKM文章总结</a></p></blockquote><hr><blockquote><p>&emsp;&emsp;后来经过一些波折，我在 9 月底的时候就搬到了新的办公地点，去到光子下工作了。<br>&emsp;&emsp;原本我过来是负责 Unreal 引擎工具开发的，我打算抱紧大佬的大腿，顺便深入学习一下 引擎 工具开发相关的知识。<br>&emsp;&emsp;没想到我过去之后，组长改了方向，打算进军 Maya 绑定。<br>&emsp;&emsp;恰好我也算是在华强的时候积累了不少相关的知识，可以派上用场，只是让我万万没有想到的是。<br>&emsp;&emsp;这边很多人都是做 shader 出身的，他们对 Maya 的了解并不多，我反而成了他们的大腿。<br>&emsp;&emsp;这个转变有点让我不知道哭还是笑<em>(:з」∠)</em></p></blockquote><blockquote><p>&emsp;&emsp;其实和我同期活水的，还有项目组的一个程序，当时他也对魔方的管理感到失望，加上钱给的不多，所以就去天美了。<br>&emsp;&emsp;本来他那边的组长给他吹嘘一堆技术，让他以为很靠谱，其实过去之后也就那样，而且过去之后就变边缘人了，有很多东西不能主导。<br>&emsp;&emsp;我这边的话可以主导很多东西，但我还是很担心自己的经验不足会把大家带到沟里去<em>(:з」∠)</em></p></blockquote><blockquote><p>&emsp;&emsp;恰好那个时候我从厂长那里拿到了 RBF Retarget 算法等等的一些源码，于是经过我自己摸索尝试提出了通过 RBF retarget 模型的方案。<br>&emsp;&emsp;使用这个方案可以将不同脸的模型精准 retarget 过去，对于 BS 复用有非常好的效果。<br>&emsp;&emsp;没想到，我误打误撞研究出的方案，发现正是目前业界比较前沿的用法，也算是这套方案的落地让我完成第一版的 demo<br>&emsp;&emsp;但是制定绑定框架，整个流程是非常庞大而长期的事情，目前组内加上我也就 4 个人，我总感觉一眼望不到头<em>(:з」∠)</em><br>&emsp;&emsp;年底的时候又因为乘上了 <code>元宇宙</code> 的东风，发现公司内很多团队都想做类似的东西，着实让我压力山大。</p></blockquote><blockquote><p>&emsp;&emsp;由于又回到了 Maya ，所以我还是未能如愿以偿地用上 Houdini 的技术特性。看来还是得私下再抽时间去学习和研究了。<br>&emsp;&emsp;RBF 等等算法由于自己的数学太菜了，还没有搞得很明白，还需要再花时间恶补一下自己的数学基础。</p></blockquote><blockquote><p>&emsp;&emsp;不过去了光子之后，倒是认识了 龙浩，在他那边学习到了很多代码规范，ci 工具构建等等的流程知识。<br>&emsp;&emsp;总算是体会到大厂的规范化开发的感觉，之前在项目组的敏捷开发就非常离谱，没有单元测试，甚至没有代码审查。<br>&emsp;&emsp;初期还能接受，随着项目越做越复杂，我感觉很多时间都浪费在无休止地调试 BUG 里面，浪费时间。<br>&emsp;&emsp;在这边接触了一整套代码规范和开发工具，还有 Git 代码 Review 等等的知识，学习到了很多知识。<br>&emsp;&emsp;所以这段时间周末会去抽时间把相应的知识补全，导致博客自此停更了很长一段时间。<br>&emsp;&emsp;其实也有很大原因是我自己有点焦虑，也不知道从何处落笔比较好。</p></blockquote><blockquote><p>&emsp;&emsp;但是这段时间不仅仅没有好好写博客，之前立的 Flag 要把 Anki 和 Tiddlywiki 给用起来。<br>&emsp;&emsp;也因为各种原因搁置了<em>(:з」∠)</em><br>&emsp;&emsp;知道最近才逐渐开始重新将 Tiddlywiki 给捡起来。</p></blockquote><blockquote><p>&emsp;&emsp;目前已经过渡到 2022 年了，目前的工作进度算是稳定了一点。</p></blockquote><h2 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h2><blockquote><p>&emsp;&emsp;2021年我开始将自己的工资投入到理财里面。<br>&emsp;&emsp;可是没想到 2021 年开年就是高峰，然后就一路低迷走低。<br>&emsp;&emsp;好在我的钱大头都在 百信银行 存着(百信银行有 3.2% 的回报，比微信和支付宝要高一点，也可以灵活支取)</p></blockquote><blockquote><p>&emsp;&emsp;开年的时候我听我哥的说法，投了腾讯的一起投 <code>华夏全球优选派</code> 全球投资组合。<br>&emsp;&emsp;这是一个非常高风险的组合，近一年下来已经跌到 负数<em>(:з」∠)</em><br>&emsp;&emsp;所以是没赚反而亏了。<br>&emsp;&emsp;主要是港股年初原本预计是低洼地，没想到会因为各种因素一跌再跌，导致暴雷。<br>&emsp;&emsp;再加上今年发生了好一些的事件，中概股打压、教育行业政策、国家反垄断等等政策都对互联网行业打击极大。<br>&emsp;&emsp;以至于到了年底都说现在是互联网寒冬，市场不景气。</p></blockquote><blockquote><p>&emsp;&emsp;我这一年2/3的钱放到百信银行保本，1/3 投到了一起投。<br>&emsp;&emsp;可以说是投资不太成功的样子<em>(:з」∠)</em><br>&emsp;&emsp;后续打算定投 中证500 沪深300 之类的指数基金，只要国家的经济没有出现大问题，这类基金长线投资基本都是赚的。<br>&emsp;&emsp;只是目前的本钱比较少，还需要慢慢积累，<code>华夏全球优选派</code> 目前这个已经没有继续定投了。<br>&emsp;&emsp;投这个基金之初也是说投入三年再取，所以先放在一边，等它的业绩慢慢恢复好了。</p></blockquote><hr><details><br><summary>爱情</summary><br><br>2021 年圣诞我鼓起勇气告白，成功交到了我第一个女朋友。<br>这算是我 2021 年最完美的收官和点睛之笔了❤。<br><br></details><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;2021 年经历了很多事情，这是我毕业步入社会的第一个年头，在这里我只想感叹时光飞逝，岁月如梭。<br>&emsp;&emsp;大学的时光仿佛还在昨日，但我已不再是过去的我了。</p></blockquote><iframe class="center_iframe" src="//player.bilibili.com/player.html?aid=764441478&bvid=BV1Mr4y1Q7oW&cid=450409272&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><blockquote><p>&emsp;&emsp;年底的时候看到这个视频，深受触动。<br>&emsp;&emsp;当时 Up 组的 27 岁对话视频，我当时还在大三迷茫的时候看过，如今看这个对话视频，我仿佛看到当时的我自己。<br>&emsp;&emsp;非常的有感触，物是人非，勿忘初心。<br>&emsp;&emsp;所以我也想以文章的形式做一个小对话，如果以后有机会的话，也想要学习 Up 主一样做个 vlog<br>&emsp;&emsp;这里我就给自己写一份信，希望明年的自己可以重拾现在的心境，勿忘初心。 <a href="3cefe25e.html">链接</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      Goodbye 2021
    
    </summary>
    
      <category term="年度总结" scheme="https://blog.l0v0.com/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="✒博客/人生" scheme="https://blog.l0v0.com/tags/%E2%9C%92%E5%8D%9A%E5%AE%A2-%E4%BA%BA%E7%94%9F/"/>
    
      <category term="🧐回顾" scheme="https://blog.l0v0.com/tags/%F0%9F%A7%90%E5%9B%9E%E9%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>Quicker 编辑器快捷键</title>
    <link href="https://blog.l0v0.com/posts/190b1e59.html"/>
    <id>https://blog.l0v0.com/posts/190b1e59.html</id>
    <published>2021-09-25T06:24:00.000Z</published>
    <updated>2022-08-11T11:40:18.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;工作一年有余了，一直不舍得在这些软件领域上面花钱。<br>&emsp;&emsp;感觉自己还是学生，花钱总是省着花，只买一些刚需的产品。<br>&emsp;&emsp;省下的钱先放到大部分到放到了百信银行的钱包 plus 里面了 (利率比 零钱通 支付宝 要高一点点)<br>&emsp;&emsp;另外部分购买了基金，只是目前的市场行情不太好，只能说放着不管吧。</p></blockquote><blockquote><p>&emsp;&emsp;<a href="https://getquicker.net/">Quicker</a> 我比较早就接触了，具体可以看我以前的<a href="./fcc8e205.html">效率提升指南</a>的推荐。<br>&emsp;&emsp;它的免费功能就已经支持多端同步，能够满足大部分使用情景，非常良心。<br>&emsp;&emsp;也因为这样我一直不舍得花钱付费体验，而且部分付费的功能我也有其他软件作为辅助替代。<br>&emsp;&emsp;无论如何，这个软件目前还在搞促销，年费着实不贵。 <a href="https://getquicker.net/pricing">付费链接</a><br>&emsp;&emsp;这么良心的软件，如果没人支持倒了，那确实就很可惜，所以就国产之光而言，也要支持一波。<br>&emsp;&emsp;付费之后可以让我将多个软件整合成一个软件，使用体验提升了不少，而且多端同步非常方便，不用每台电脑都进行软件配置。</p></blockquote><h2 id="替代-WGesture"><a href="#替代-WGesture" class="headerlink" title="替代 WGesture"></a>替代 WGesture</h2><blockquote><p>&emsp;&emsp;之前我的手势滑动方案是用免费的 WGesture ，具体可以参考我这一篇文章 <a href="./82cd243a.html">链接</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/01.png" alt="Alt"></p><blockquote><p>&emsp;&emsp;Quicker 的付费功能也支持鼠标手势，因为我已经用惯了 WGesture ，所以直接将手势功能迁移到了 Quicker<br>&emsp;&emsp;目前大部分功能都能很好支持，部分手势比如滑特定手势加滚轮调节音量之类就做不到了。<br>&emsp;&emsp;不过这些小问题并不影响，quicker自带的屏幕上方滚动调节音量也非常方便。</p></blockquote><blockquote><p>&emsp;&emsp;另外通过 quicker 可以多端同步我自己定义的手势，这比 WGesture 要方便不少。<br>&emsp;&emsp;虽然 WGesture 也可以导出配置文件，然后用坚果云同步配置文件，总结起来还是 Quicker 自动同步方便得多。</p></blockquote><h2 id="标点符号替换"><a href="#标点符号替换" class="headerlink" title="标点符号替换"></a>标点符号替换</h2><blockquote><p>&emsp;&emsp;以前我是用 capslock+ 基于 <a href="https://www.autohotkey.com/">autohotkey</a> 设计的一套 capslock 键键盘映射。<br>&emsp;&emsp;并且利用 authotkey 的 <a href="https://www.autohotkey.com/docs/Hotstrings.htm">hotstring</a> 功能来输入中文标点，这样我可以将输入法的标点符号输入改为英文，避免我写代码的时候输入中文标点导致出错。<br>&emsp;&emsp;具体的配置历程可以参照我魔改的 capslock+ 的仓库 <a href="https://github.com/FXTD-ODYSSEY/capslock-plus">链接</a><br>&emsp;&emsp;不过如今可以利用 quicker 的文本指令来实现。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/02.png" alt="Alt"></p><blockquote><p>&emsp;&emsp;quicker 无法做到 autohotkey 的输入两个标点符号自动转换为中文符号的效果，</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/03.png" alt="Alt"></p><blockquote><p>&emsp;&emsp;设置里面只能选定按特定的按键来触发替换，只是多输入一个空格，我个人觉得还是没有问题的。<br>&emsp;&emsp;使用了一段时间之后就是输入标点太快的话会有一定可能影响到后面输入的内容，通常不会有这么快的手速。</p></blockquote><h2 id="键盘映射"><a href="#键盘映射" class="headerlink" title="键盘映射"></a>键盘映射</h2><blockquote><p>&emsp;&emsp;有了上面的体验之后，我就想进一步取代掉 capslock+ 的功能。<br>&emsp;&emsp;恰巧前段时间看上了一款很神奇的带触控小键盘 <a href="https://www.bilibili.com/video/BV1aA411571Y">prestigio</a> 心动直接剁手了。<br>&emsp;&emsp;买之前本来想用触控完全取代鼠标的，但是实际上使用 Maya 之类的软件还是不可能离开鼠标。<br>&emsp;&emsp;所以买回来之后其实很少用到触控功能，毕竟已经用惯鼠标了，不过它的小巧轻便依旧成为我办公的日常利器。<br>&emsp;&emsp;只是小键盘的一大问题就是 方向键 缩在右下角的角落里，使用起来非常不方便。<br>&emsp;&emsp;于是我想到了 capslock+ 的键盘映射功能。 <a href="https://capslox.com/capslock-plus/">链接</a><br>&emsp;&emsp;capslock+ 将方向键映射为 ESDF 四个键(配合 capslock 键一起按)<br>&emsp;&emsp;经过我自己一番折腾体验之后，还是觉得游戏里面的 WASD 键比较顺手，所以我在 Quicker 里面复现了这一整套配置。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/04.png" alt="Alt"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/05.png" alt="Alt"></p><blockquote><p>&emsp;&emsp;我也将键盘靠右的按键，比如回车键 del键 backspace键 映射到左边来，这样我就不用松开鼠标的右手了。<br>&emsp;&emsp;经过了一个月的熟悉之后，我觉得这套键盘映射非常香，缺点就是在别人的电脑上会下意识用 capslock+WASD 去敲方向键，结果不起作用，着实让我很抓狂。</p></blockquote><table><thead><tr><th>源按键</th><th>映射按键(配合 capslock 一起按)</th></tr></thead><tbody><tr><td>↑</td><td>W</td></tr><tr><td>←</td><td>A</td></tr><tr><td>↓</td><td>S</td></tr><tr><td>→</td><td>D</td></tr><tr><td>Backspace</td><td>Q</td></tr><tr><td>Del</td><td>R</td></tr><tr><td>Home</td><td>1</td></tr><tr><td>End</td><td>3</td></tr></tbody></table><blockquote><p>&emsp;&emsp;基本的映射如图所示，配合 ctrl shift 的按键都需要单独配置，所以花了我不少时间。<br>&emsp;&emsp;另外我买的键盘并不是全键无冲突的，这导致有些快捷键无法触发，比如我的 prestigio 键盘的 <code>capslock+shift+S</code> 就是无法不起作用，<br>&emsp;&emsp;我当初还以为是 quicker 的 BUG ，还特意去 github 给他提了 issue ，然后才发现是键盘的问题，因为换了一个键盘就可以触发了。<br>&emsp;&emsp;不过全键无冲突的键盘也是贵死，而且必要性很小，所以某些问题可以忍耐一下，比如说用其他的按键映射来解决问题。</p></blockquote><h2 id="编辑器功能键"><a href="#编辑器功能键" class="headerlink" title="编辑器功能键"></a>编辑器功能键</h2><blockquote><p>&emsp;&emsp;有了上面的键盘映射之后，我有想到可以将 VScode 的部分编辑器特有的功能集成到按键里面。<br>&emsp;&emsp;毕竟按键触发是可以调用 Quicker 动作的，我可以模拟部分 VScode 的输入功能，提升在外部输入的体验。<br>&emsp;&emsp;所以我自己做了一个动作，输入参数实现一连串的输入，比如自动换行到下一行或者上一行，复制一行，粘贴一行 等等<br>&emsp;&emsp;编辑器还有个非常实用的扩选功能，我也想通过 quicker 动作实现，只是每一次实现都要获取一下当前光标下的文本，然后才能解析扩选，效率有点低。<br>&emsp;&emsp;目前还没有将相应的功能用 quicker 动作做好，以后做好了可以抽时间分享一下。</p></blockquote><h2 id="键盘控制鼠标"><a href="#键盘控制鼠标" class="headerlink" title="键盘控制鼠标"></a>键盘控制鼠标</h2><blockquote><p>&emsp;&emsp;经过上面的摸索之后，我还发现键盘映射是有用户共享的 <a href="https://getquicker.net/share/powerkeys">链接</a><br>&emsp;&emsp;应为这个是付费功能，共享的用户并不多，看了一下共享的功能，发现还有人用键盘来控制鼠标的。<br>&emsp;&emsp;于是我也基于别人的一些写法，做了独属于自己的一套键盘控制鼠标的逻辑。</p></blockquote><p><a href="https://getquicker.net/Share/PowerKeys/Package?id=46ba49bd-cbbd-4e8c-71d5-08d96b96059c">鼠标控制共享</a></p><blockquote><p>&emsp;&emsp;上面是我做的键盘映射共享。</p></blockquote><table><thead><tr><th>组合键(按住 Tab 键)</th><th>标题</th><th>操作类型</th></tr></thead><tbody><tr><td>3</td><td>鼠标右键</td><td>PlayKeyMouseData</td></tr><tr><td>←</td><td>向左移动</td><td>PlayKeyMouseData</td></tr><tr><td>↑</td><td>向上移动</td><td>PlayKeyMouseData</td></tr><tr><td>→</td><td>向右移动</td><td>PlayKeyMouseData</td></tr><tr><td>↓</td><td>向下移动</td><td>PlayKeyMouseData</td></tr><tr><td>1</td><td>鼠标左键</td><td>PlayKeyMouseData</td></tr><tr><td>2</td><td>鼠标中键</td><td>PlayKeyMouseData</td></tr><tr><td>4</td><td>X1键</td><td>PlayKeyMouseData</td></tr><tr><td>5</td><td>X2键</td><td>PlayKeyMouseData</td></tr><tr><td>A</td><td>向左移动</td><td>PlayKeyMouseData</td></tr><tr><td>D</td><td>向右移动</td><td>PlayKeyMouseData</td></tr><tr><td>E</td><td>向后滚动</td><td>PlayKeyMouseData</td></tr><tr><td>Q</td><td>向前滚动</td><td>PlayKeyMouseData</td></tr><tr><td>S</td><td>向下移动</td><td>PlayKeyMouseData</td></tr><tr><td>W</td><td>向上移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + ←</td><td>快速向左移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + ↑</td><td>快速向上移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + →</td><td>快速向右移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + ↓</td><td>快速向下移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + A</td><td>快速向左移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + D</td><td>快速向右移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + E</td><td>快速向后滚动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + Q</td><td>快速向前滚动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + S</td><td>快速向下移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + W</td><td>快速向上移动</td><td>PlayKeyMouseData</td></tr><tr><td>Space + F1</td><td>按下鼠标左键</td><td>PlayKeyMouseData</td></tr><tr><td>Space + F2</td><td>按下鼠标中键</td><td>PlayKeyMouseData</td></tr><tr><td>Space + F3</td><td>按下鼠标右键</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + ←</td><td>轻微向左移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + ↑</td><td>轻微向上移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + →</td><td>轻微向右移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + ↓</td><td>轻微向下移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + A</td><td>轻微向左移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + D</td><td>轻微向右移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + E</td><td>轻微向后滚动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + Q</td><td>轻微向前滚动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + S</td><td>轻微向下移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + W</td><td>轻微向上移动</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + F1</td><td>松开鼠标左键</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + F2</td><td>松开鼠标中键</td><td>PlayKeyMouseData</td></tr><tr><td>LeftAlt + F3</td><td>松开鼠标右键</td><td>PlayKeyMouseData</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/07.png" alt="Alt"></p><blockquote><p>&emsp;&emsp;基本上思想也是 WASD 移动鼠标，12345 表示鼠标左中右键 + X1 X2 键，Q E 键做鼠标滚轮<br>&emsp;&emsp;按住空格键是加速移动，按住 alt 键是略微移动。<br>&emsp;&emsp;我还加了 F1 F2 F3 用来模拟按住鼠标按键的效果，只是用起来很不方便，很少会用到，并且我的 prestigio 键盘有实体的鼠标按键，按那个更方便一点。</p></blockquote><h2 id="粘贴板"><a href="#粘贴板" class="headerlink" title="粘贴板"></a>粘贴板</h2><blockquote><p>&emsp;&emsp;以前的粘贴板我是网上推荐的 Ditto 进行记录的。<br>&emsp;&emsp;现在可以结合 Quicker 的一个动作 <a href="https://getquicker.net/Sharedaction?code=9ec53d43-5539-4571-6886-08d8c752bfcb">粘贴板</a> 来实现这个功能，付费之后就可以用 快捷键 触发动作，使用上更加方便。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/190b1e59/06.png" alt="Alt"></p><blockquote><p>&emsp;&emsp;日常体验已经完全可以替代 ditto 。<br>&emsp;&emsp;ditto 还有分组之类的功能，其实使用并不多。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>&emsp;&emsp;quicker 价格便宜，购买之后便利提升了不少，强烈推荐。<br>&emsp;&emsp;无论作者还是社区都在朝着 <code>all in one</code> 的道路迈进<br>&emsp;&emsp;我已经找到了和 listary 相似的启动器动作 <a href="https://getquicker.net/Sharedaction?code=152618d3-6c3c-49e8-afef-08d8f6743496">智搜</a><br>&emsp;&emsp;可惜这个动作的全盘搜索是基于 everything 的，也不知道如何设定到当前目录下进行搜索，我体验了一段时间还是换回了 listary。<br>&emsp;&emsp;listary 另一个切换目录的功能 也有 动作模拟 <a href="https://getquicker.net/Sharedaction?code=415d9d0f-bc9c-4710-c434-08d7e719849b">快速切换</a><br>&emsp;&emsp;体验上虽然比 Quicker 要慢一点，但能够满足我的需求就已经谢天谢地了。</p></blockquote><blockquote><p>&emsp;&emsp;最后截图上，也有 <a href="https://getquicker.net/Sharedaction?code=57738e7e-9b34-4add-efd8-08d71d5bdffe">Ever截图</a> 神器<br>&emsp;&emsp;可以使用 quicker 提供的截图功能，quicker 的快速截图做得很想 snipaste ，目前已经可以钉图了，只是还缺少图画功能，因此还尚未能取代 snipaste<br>&emsp;&emsp;Ever截图的强大在于支持第三方截图功能，获取粘贴板的图片可以做后续的诸多操作，比如识别或者搜索</p></blockquote><blockquote><p>&emsp;&emsp;目前我的日常使用已经离不开 quicker ，希望 quicker 能够再接再厉，提供更好的体验~</p></blockquote>]]></content>
    
    <summary type="html">
    
      结合 Quicker 付费功能 | 映射键盘键位
    
    </summary>
    
      <category term="效率提升指南" scheme="https://blog.l0v0.com/categories/%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="࠰Windows" scheme="https://blog.l0v0.com/tags/%E0%A0%B0Windows/"/>
    
      <category term="🚀效率" scheme="https://blog.l0v0.com/tags/%F0%9F%9A%80%E6%95%88%E7%8E%87/"/>
    
      <category term="💾软件" scheme="https://blog.l0v0.com/tags/%F0%9F%92%BE%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
</feed>
